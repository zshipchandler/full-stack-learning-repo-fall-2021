{"ast":null,"code":"/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TenantManager = exports.TenantAwareAuth = void 0;\n\nvar validator = require(\"../utils/validator\");\n\nvar utils = require(\"../utils/index\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar base_auth_1 = require(\"./base-auth\");\n\nvar tenant_1 = require(\"./tenant\");\n\nvar auth_api_request_1 = require(\"./auth-api-request\");\n/**\n * Tenant-aware `Auth` interface used for managing users, configuring SAML/OIDC providers,\n * generating email links for password reset, email verification, etc for specific tenants.\n *\n * Multi-tenancy support requires Google Cloud's Identity Platform\n * (GCIP). To learn more about GCIP, including pricing and features,\n * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n *\n * Each tenant contains its own identity providers, settings and sets of users.\n * Using `TenantAwareAuth`, users for a specific tenant and corresponding OIDC/SAML\n * configurations can also be managed, ID tokens for users signed in to a specific tenant\n * can be verified, and email action links can also be generated for users belonging to the\n * tenant.\n *\n * `TenantAwareAuth` instances for a specific `tenantId` can be instantiated by calling\n * {@link TenantManager.authForTenant}.\n */\n\n\nvar TenantAwareAuth =\n/** @class */\nfunction (_super) {\n  __extends(TenantAwareAuth, _super);\n  /**\n   * The TenantAwareAuth class constructor.\n   *\n   * @param app - The app that created this tenant.\n   * @param tenantId - The corresponding tenant ID.\n   * @constructor\n   * @internal\n   */\n\n\n  function TenantAwareAuth(app, tenantId) {\n    var _this = _super.call(this, app, new auth_api_request_1.TenantAwareAuthRequestHandler(app, tenantId), base_auth_1.createFirebaseTokenGenerator(app, tenantId)) || this;\n\n    utils.addReadonlyGetter(_this, 'tenantId', tenantId);\n    return _this;\n  }\n  /**\n   * {@inheritdoc BaseAuth.verifyIdToken}\n   */\n\n\n  TenantAwareAuth.prototype.verifyIdToken = function (idToken, checkRevoked) {\n    var _this = this;\n\n    if (checkRevoked === void 0) {\n      checkRevoked = false;\n    }\n\n    return _super.prototype.verifyIdToken.call(this, idToken, checkRevoked).then(function (decodedClaims) {\n      // Validate tenant ID.\n      if (decodedClaims.firebase.tenant !== _this.tenantId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n      }\n\n      return decodedClaims;\n    });\n  };\n  /**\n   * {@inheritdoc BaseAuth.createSessionCookie}\n   */\n\n\n  TenantAwareAuth.prototype.createSessionCookie = function (idToken, sessionCookieOptions) {\n    var _this = this; // Validate arguments before processing.\n\n\n    if (!validator.isNonEmptyString(idToken)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN));\n    }\n\n    if (!validator.isNonNullObject(sessionCookieOptions) || !validator.isNumber(sessionCookieOptions.expiresIn)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION));\n    } // This will verify the ID token and then match the tenant ID before creating the session cookie.\n\n\n    return this.verifyIdToken(idToken).then(function () {\n      return _super.prototype.createSessionCookie.call(_this, idToken, sessionCookieOptions);\n    });\n  };\n  /**\n   * {@inheritdoc BaseAuth.verifySessionCookie}\n   */\n\n\n  TenantAwareAuth.prototype.verifySessionCookie = function (sessionCookie, checkRevoked) {\n    var _this = this;\n\n    if (checkRevoked === void 0) {\n      checkRevoked = false;\n    }\n\n    return _super.prototype.verifySessionCookie.call(this, sessionCookie, checkRevoked).then(function (decodedClaims) {\n      if (decodedClaims.firebase.tenant !== _this.tenantId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n      }\n\n      return decodedClaims;\n    });\n  };\n\n  return TenantAwareAuth;\n}(base_auth_1.BaseAuth);\n\nexports.TenantAwareAuth = TenantAwareAuth;\n/**\n * Defines the tenant manager used to help manage tenant related operations.\n * This includes:\n * <ul>\n * <li>The ability to create, update, list, get and delete tenants for the underlying\n *     project.</li>\n * <li>Getting a `TenantAwareAuth` instance for running Auth related operations\n *     (user management, provider configuration management, token verification,\n *     email link generation, etc) in the context of a specified tenant.</li>\n * </ul>\n */\n\nvar TenantManager =\n/** @class */\nfunction () {\n  /**\n   * Initializes a TenantManager instance for a specified FirebaseApp.\n   *\n   * @param app - The app for this TenantManager instance.\n   *\n   * @constructor\n   * @internal\n   */\n  function TenantManager(app) {\n    this.app = app;\n    this.authRequestHandler = new auth_api_request_1.AuthRequestHandler(app);\n    this.tenantsMap = {};\n  }\n  /**\n   * Returns a `TenantAwareAuth` instance bound to the given tenant ID.\n   *\n   * @param tenantId - The tenant ID whose `TenantAwareAuth` instance is to be returned.\n   *\n   * @returns The `TenantAwareAuth` instance corresponding to this tenant identifier.\n   */\n\n\n  TenantManager.prototype.authForTenant = function (tenantId) {\n    if (!validator.isNonEmptyString(tenantId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\n    }\n\n    if (typeof this.tenantsMap[tenantId] === 'undefined') {\n      this.tenantsMap[tenantId] = new TenantAwareAuth(this.app, tenantId);\n    }\n\n    return this.tenantsMap[tenantId];\n  };\n  /**\n   * Gets the tenant configuration for the tenant corresponding to a given `tenantId`.\n   *\n   * @param tenantId - The tenant identifier corresponding to the tenant whose data to fetch.\n   *\n   * @returns A promise fulfilled with the tenant configuration to the provided `tenantId`.\n   */\n\n\n  TenantManager.prototype.getTenant = function (tenantId) {\n    return this.authRequestHandler.getTenant(tenantId).then(function (response) {\n      return new tenant_1.Tenant(response);\n    });\n  };\n  /**\n   * Retrieves a list of tenants (single batch only) with a size of `maxResults`\n   * starting from the offset as specified by `pageToken`. This is used to\n   * retrieve all the tenants of a specified project in batches.\n   *\n   * @param maxResults - The page size, 1000 if undefined. This is also\n   *   the maximum allowed limit.\n   * @param pageToken - The next page token. If not specified, returns\n   *   tenants starting without any offset.\n   *\n   * @returns A promise that resolves with\n   *   a batch of downloaded tenants and the next page token.\n   */\n\n\n  TenantManager.prototype.listTenants = function (maxResults, pageToken) {\n    return this.authRequestHandler.listTenants(maxResults, pageToken).then(function (response) {\n      // List of tenants to return.\n      var tenants = []; // Convert each user response to a Tenant.\n\n      response.tenants.forEach(function (tenantResponse) {\n        tenants.push(new tenant_1.Tenant(tenantResponse));\n      }); // Return list of tenants and the next page token if available.\n\n      var result = {\n        tenants: tenants,\n        pageToken: response.nextPageToken\n      }; // Delete result.pageToken if undefined.\n\n      if (typeof result.pageToken === 'undefined') {\n        delete result.pageToken;\n      }\n\n      return result;\n    });\n  };\n  /**\n   * Deletes an existing tenant.\n   *\n   * @param tenantId - The `tenantId` corresponding to the tenant to delete.\n   *\n   * @returns An empty promise fulfilled once the tenant has been deleted.\n   */\n\n\n  TenantManager.prototype.deleteTenant = function (tenantId) {\n    return this.authRequestHandler.deleteTenant(tenantId);\n  };\n  /**\n   * Creates a new tenant.\n   * When creating new tenants, tenants that use separate billing and quota will require their\n   * own project and must be defined as `full_service`.\n   *\n   * @param tenantOptions - The properties to set on the new tenant configuration to be created.\n   *\n   * @returns A promise fulfilled with the tenant configuration corresponding to the newly\n   *   created tenant.\n   */\n\n\n  TenantManager.prototype.createTenant = function (tenantOptions) {\n    return this.authRequestHandler.createTenant(tenantOptions).then(function (response) {\n      return new tenant_1.Tenant(response);\n    });\n  };\n  /**\n   * Updates an existing tenant configuration.\n   *\n   * @param tenantId - The `tenantId` corresponding to the tenant to delete.\n   * @param tenantOptions - The properties to update on the provided tenant.\n   *\n   * @returns A promise fulfilled with the update tenant data.\n   */\n\n\n  TenantManager.prototype.updateTenant = function (tenantId, tenantOptions) {\n    return this.authRequestHandler.updateTenant(tenantId, tenantOptions).then(function (response) {\n      return new tenant_1.Tenant(response);\n    });\n  };\n\n  return TenantManager;\n}();\n\nexports.TenantManager = TenantManager;","map":{"version":3,"sources":["/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/node_modules/firebase-admin/lib/auth/tenant-manager.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","TenantManager","TenantAwareAuth","validator","require","utils","error_1","base_auth_1","tenant_1","auth_api_request_1","_super","app","tenantId","_this","call","TenantAwareAuthRequestHandler","createFirebaseTokenGenerator","addReadonlyGetter","verifyIdToken","idToken","checkRevoked","then","decodedClaims","firebase","tenant","FirebaseAuthError","AuthClientErrorCode","MISMATCHING_TENANT_ID","createSessionCookie","sessionCookieOptions","isNonEmptyString","Promise","reject","INVALID_ID_TOKEN","isNonNullObject","isNumber","expiresIn","INVALID_SESSION_COOKIE_DURATION","verifySessionCookie","sessionCookie","BaseAuth","authRequestHandler","AuthRequestHandler","tenantsMap","authForTenant","INVALID_TENANT_ID","getTenant","response","Tenant","listTenants","maxResults","pageToken","tenants","forEach","tenantResponse","push","result","nextPageToken","deleteTenant","createTenant","tenantOptions","updateTenant"],"mappings":"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","sourcesContent":["/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TenantManager = exports.TenantAwareAuth = void 0;\nvar validator = require(\"../utils/validator\");\nvar utils = require(\"../utils/index\");\nvar error_1 = require(\"../utils/error\");\nvar base_auth_1 = require(\"./base-auth\");\nvar tenant_1 = require(\"./tenant\");\nvar auth_api_request_1 = require(\"./auth-api-request\");\n/**\n * Tenant-aware `Auth` interface used for managing users, configuring SAML/OIDC providers,\n * generating email links for password reset, email verification, etc for specific tenants.\n *\n * Multi-tenancy support requires Google Cloud's Identity Platform\n * (GCIP). To learn more about GCIP, including pricing and features,\n * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n *\n * Each tenant contains its own identity providers, settings and sets of users.\n * Using `TenantAwareAuth`, users for a specific tenant and corresponding OIDC/SAML\n * configurations can also be managed, ID tokens for users signed in to a specific tenant\n * can be verified, and email action links can also be generated for users belonging to the\n * tenant.\n *\n * `TenantAwareAuth` instances for a specific `tenantId` can be instantiated by calling\n * {@link TenantManager.authForTenant}.\n */\nvar TenantAwareAuth = /** @class */ (function (_super) {\n    __extends(TenantAwareAuth, _super);\n    /**\n     * The TenantAwareAuth class constructor.\n     *\n     * @param app - The app that created this tenant.\n     * @param tenantId - The corresponding tenant ID.\n     * @constructor\n     * @internal\n     */\n    function TenantAwareAuth(app, tenantId) {\n        var _this = _super.call(this, app, new auth_api_request_1.TenantAwareAuthRequestHandler(app, tenantId), base_auth_1.createFirebaseTokenGenerator(app, tenantId)) || this;\n        utils.addReadonlyGetter(_this, 'tenantId', tenantId);\n        return _this;\n    }\n    /**\n     * {@inheritdoc BaseAuth.verifyIdToken}\n     */\n    TenantAwareAuth.prototype.verifyIdToken = function (idToken, checkRevoked) {\n        var _this = this;\n        if (checkRevoked === void 0) { checkRevoked = false; }\n        return _super.prototype.verifyIdToken.call(this, idToken, checkRevoked)\n            .then(function (decodedClaims) {\n            // Validate tenant ID.\n            if (decodedClaims.firebase.tenant !== _this.tenantId) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n            }\n            return decodedClaims;\n        });\n    };\n    /**\n     * {@inheritdoc BaseAuth.createSessionCookie}\n     */\n    TenantAwareAuth.prototype.createSessionCookie = function (idToken, sessionCookieOptions) {\n        var _this = this;\n        // Validate arguments before processing.\n        if (!validator.isNonEmptyString(idToken)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN));\n        }\n        if (!validator.isNonNullObject(sessionCookieOptions) ||\n            !validator.isNumber(sessionCookieOptions.expiresIn)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION));\n        }\n        // This will verify the ID token and then match the tenant ID before creating the session cookie.\n        return this.verifyIdToken(idToken)\n            .then(function () {\n            return _super.prototype.createSessionCookie.call(_this, idToken, sessionCookieOptions);\n        });\n    };\n    /**\n     * {@inheritdoc BaseAuth.verifySessionCookie}\n     */\n    TenantAwareAuth.prototype.verifySessionCookie = function (sessionCookie, checkRevoked) {\n        var _this = this;\n        if (checkRevoked === void 0) { checkRevoked = false; }\n        return _super.prototype.verifySessionCookie.call(this, sessionCookie, checkRevoked)\n            .then(function (decodedClaims) {\n            if (decodedClaims.firebase.tenant !== _this.tenantId) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n            }\n            return decodedClaims;\n        });\n    };\n    return TenantAwareAuth;\n}(base_auth_1.BaseAuth));\nexports.TenantAwareAuth = TenantAwareAuth;\n/**\n * Defines the tenant manager used to help manage tenant related operations.\n * This includes:\n * <ul>\n * <li>The ability to create, update, list, get and delete tenants for the underlying\n *     project.</li>\n * <li>Getting a `TenantAwareAuth` instance for running Auth related operations\n *     (user management, provider configuration management, token verification,\n *     email link generation, etc) in the context of a specified tenant.</li>\n * </ul>\n */\nvar TenantManager = /** @class */ (function () {\n    /**\n     * Initializes a TenantManager instance for a specified FirebaseApp.\n     *\n     * @param app - The app for this TenantManager instance.\n     *\n     * @constructor\n     * @internal\n     */\n    function TenantManager(app) {\n        this.app = app;\n        this.authRequestHandler = new auth_api_request_1.AuthRequestHandler(app);\n        this.tenantsMap = {};\n    }\n    /**\n     * Returns a `TenantAwareAuth` instance bound to the given tenant ID.\n     *\n     * @param tenantId - The tenant ID whose `TenantAwareAuth` instance is to be returned.\n     *\n     * @returns The `TenantAwareAuth` instance corresponding to this tenant identifier.\n     */\n    TenantManager.prototype.authForTenant = function (tenantId) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\n        }\n        if (typeof this.tenantsMap[tenantId] === 'undefined') {\n            this.tenantsMap[tenantId] = new TenantAwareAuth(this.app, tenantId);\n        }\n        return this.tenantsMap[tenantId];\n    };\n    /**\n     * Gets the tenant configuration for the tenant corresponding to a given `tenantId`.\n     *\n     * @param tenantId - The tenant identifier corresponding to the tenant whose data to fetch.\n     *\n     * @returns A promise fulfilled with the tenant configuration to the provided `tenantId`.\n     */\n    TenantManager.prototype.getTenant = function (tenantId) {\n        return this.authRequestHandler.getTenant(tenantId)\n            .then(function (response) {\n            return new tenant_1.Tenant(response);\n        });\n    };\n    /**\n     * Retrieves a list of tenants (single batch only) with a size of `maxResults`\n     * starting from the offset as specified by `pageToken`. This is used to\n     * retrieve all the tenants of a specified project in batches.\n     *\n     * @param maxResults - The page size, 1000 if undefined. This is also\n     *   the maximum allowed limit.\n     * @param pageToken - The next page token. If not specified, returns\n     *   tenants starting without any offset.\n     *\n     * @returns A promise that resolves with\n     *   a batch of downloaded tenants and the next page token.\n     */\n    TenantManager.prototype.listTenants = function (maxResults, pageToken) {\n        return this.authRequestHandler.listTenants(maxResults, pageToken)\n            .then(function (response) {\n            // List of tenants to return.\n            var tenants = [];\n            // Convert each user response to a Tenant.\n            response.tenants.forEach(function (tenantResponse) {\n                tenants.push(new tenant_1.Tenant(tenantResponse));\n            });\n            // Return list of tenants and the next page token if available.\n            var result = {\n                tenants: tenants,\n                pageToken: response.nextPageToken,\n            };\n            // Delete result.pageToken if undefined.\n            if (typeof result.pageToken === 'undefined') {\n                delete result.pageToken;\n            }\n            return result;\n        });\n    };\n    /**\n     * Deletes an existing tenant.\n     *\n     * @param tenantId - The `tenantId` corresponding to the tenant to delete.\n     *\n     * @returns An empty promise fulfilled once the tenant has been deleted.\n     */\n    TenantManager.prototype.deleteTenant = function (tenantId) {\n        return this.authRequestHandler.deleteTenant(tenantId);\n    };\n    /**\n     * Creates a new tenant.\n     * When creating new tenants, tenants that use separate billing and quota will require their\n     * own project and must be defined as `full_service`.\n     *\n     * @param tenantOptions - The properties to set on the new tenant configuration to be created.\n     *\n     * @returns A promise fulfilled with the tenant configuration corresponding to the newly\n     *   created tenant.\n     */\n    TenantManager.prototype.createTenant = function (tenantOptions) {\n        return this.authRequestHandler.createTenant(tenantOptions)\n            .then(function (response) {\n            return new tenant_1.Tenant(response);\n        });\n    };\n    /**\n     * Updates an existing tenant configuration.\n     *\n     * @param tenantId - The `tenantId` corresponding to the tenant to delete.\n     * @param tenantOptions - The properties to update on the provided tenant.\n     *\n     * @returns A promise fulfilled with the update tenant data.\n     */\n    TenantManager.prototype.updateTenant = function (tenantId, tenantOptions) {\n        return this.authRequestHandler.updateTenant(tenantId, tenantOptions)\n            .then(function (response) {\n            return new tenant_1.Tenant(response);\n        });\n    };\n    return TenantManager;\n}());\nexports.TenantManager = TenantManager;\n"]},"metadata":{},"sourceType":"script"}