{"ast":null,"code":"/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDatabaseWithUrl = exports.getDatabase = exports.ServerValue = exports.enableLogging = void 0;\n\nvar standalone_1 = require(\"@firebase/database-compat/standalone\");\n\nvar app_1 = require(\"../app\");\n\nvar database_1 = require(\"./database\"); // TODO: Remove the following any-cast once the typins in @firebase/database-types are fixed.\n\n/**\n * {@link https://firebase.google.com/docs/reference/js/firebase.database#enablelogging | enableLogging}\n * function from the `@firebase/database` package.\n */\n\n\nexports.enableLogging = standalone_1.enableLogging;\n/**\n * {@link https://firebase.google.com/docs/reference/js/firebase.database.ServerValue | ServerValue}\n * constant from the `@firebase/database` package.\n */\n\nexports.ServerValue = standalone_1.ServerValue;\n/**\n * Gets the {@link Database} service for the default\n * app or a given app.\n *\n * `getDatabase()` can be called with no arguments to access the default\n * app's `Database` service or as `getDatabase(app)` to access the\n * `Database` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Database service for the default app\n * const defaultDatabase = getDatabase();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Database service for a specific app\n * const otherDatabase = getDatabase(app);\n * ```\n *\n * @param App - whose `Database` service to\n *   return. If not provided, the default `Database` service will be returned.\n *\n * @returns The default `Database` service if no app\n *   is provided or the `Database` service associated with the provided app.\n */\n\nfunction getDatabase(app) {\n  return getDatabaseInstance({\n    app: app\n  });\n}\n\nexports.getDatabase = getDatabase;\n/**\n * Gets the {@link Database} service for the default\n * app or a given app.\n *\n * `getDatabaseWithUrl()` can be called with no arguments to access the default\n * app's {@link Database} service or as `getDatabaseWithUrl(app)` to access the\n * {@link Database} service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Database service for the default app\n * const defaultDatabase = getDatabaseWithUrl('https://example.firebaseio.com');\n * ```\n *\n * @example\n * ```javascript\n * // Get the Database service for a specific app\n * const otherDatabase = getDatabaseWithUrl('https://example.firebaseio.com', app);\n * ```\n *\n * @param App - whose `Database` service to\n *   return. If not provided, the default `Database` service will be returned.\n *\n * @returns The default `Database` service if no app\n *   is provided or the `Database` service associated with the provided app.\n */\n\nfunction getDatabaseWithUrl(url, app) {\n  return getDatabaseInstance({\n    url: url,\n    app: app\n  });\n}\n\nexports.getDatabaseWithUrl = getDatabaseWithUrl;\n\nfunction getDatabaseInstance(options) {\n  var app = options.app;\n\n  if (typeof app === 'undefined') {\n    app = app_1.getApp();\n  }\n\n  var firebaseApp = app;\n  var dbService = firebaseApp.getOrInitService('database', function (app) {\n    return new database_1.DatabaseService(app);\n  });\n  return dbService.getDatabase(options.url);\n}","map":{"version":3,"sources":["/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/node_modules/firebase-admin/lib/database/index.js"],"names":["Object","defineProperty","exports","value","getDatabaseWithUrl","getDatabase","ServerValue","enableLogging","standalone_1","require","app_1","database_1","app","getDatabaseInstance","url","options","getApp","firebaseApp","dbService","getOrInitService","DatabaseService"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAACG,WAAR,GAAsBH,OAAO,CAACI,WAAR,GAAsBJ,OAAO,CAACK,aAAR,GAAwB,KAAK,CAAtG;;AACA,IAAIC,YAAY,GAAGC,OAAO,CAAC,sCAAD,CAA1B;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,YAAD,CAAxB,C,CACA;;AACA;AACA;AACA;AACA;;;AACAP,OAAO,CAACK,aAAR,GAAwBC,YAAY,CAACD,aAArC;AACA;AACA;AACA;AACA;;AACAL,OAAO,CAACI,WAAR,GAAsBE,YAAY,CAACF,WAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,WAAT,CAAqBO,GAArB,EAA0B;AACtB,SAAOC,mBAAmB,CAAC;AAAED,IAAAA,GAAG,EAAEA;AAAP,GAAD,CAA1B;AACH;;AACDV,OAAO,CAACG,WAAR,GAAsBA,WAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,kBAAT,CAA4BU,GAA5B,EAAiCF,GAAjC,EAAsC;AAClC,SAAOC,mBAAmB,CAAC;AAAEC,IAAAA,GAAG,EAAEA,GAAP;AAAYF,IAAAA,GAAG,EAAEA;AAAjB,GAAD,CAA1B;AACH;;AACDV,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;;AACA,SAASS,mBAAT,CAA6BE,OAA7B,EAAsC;AAClC,MAAIH,GAAG,GAAGG,OAAO,CAACH,GAAlB;;AACA,MAAI,OAAOA,GAAP,KAAe,WAAnB,EAAgC;AAC5BA,IAAAA,GAAG,GAAGF,KAAK,CAACM,MAAN,EAAN;AACH;;AACD,MAAIC,WAAW,GAAGL,GAAlB;AACA,MAAIM,SAAS,GAAGD,WAAW,CAACE,gBAAZ,CAA6B,UAA7B,EAAyC,UAAUP,GAAV,EAAe;AAAE,WAAO,IAAID,UAAU,CAACS,eAAf,CAA+BR,GAA/B,CAAP;AAA6C,GAAvG,CAAhB;AACA,SAAOM,SAAS,CAACb,WAAV,CAAsBU,OAAO,CAACD,GAA9B,CAAP;AACH","sourcesContent":["/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDatabaseWithUrl = exports.getDatabase = exports.ServerValue = exports.enableLogging = void 0;\nvar standalone_1 = require(\"@firebase/database-compat/standalone\");\nvar app_1 = require(\"../app\");\nvar database_1 = require(\"./database\");\n// TODO: Remove the following any-cast once the typins in @firebase/database-types are fixed.\n/**\n * {@link https://firebase.google.com/docs/reference/js/firebase.database#enablelogging | enableLogging}\n * function from the `@firebase/database` package.\n */\nexports.enableLogging = standalone_1.enableLogging;\n/**\n * {@link https://firebase.google.com/docs/reference/js/firebase.database.ServerValue | ServerValue}\n * constant from the `@firebase/database` package.\n */\nexports.ServerValue = standalone_1.ServerValue;\n/**\n * Gets the {@link Database} service for the default\n * app or a given app.\n *\n * `getDatabase()` can be called with no arguments to access the default\n * app's `Database` service or as `getDatabase(app)` to access the\n * `Database` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Database service for the default app\n * const defaultDatabase = getDatabase();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Database service for a specific app\n * const otherDatabase = getDatabase(app);\n * ```\n *\n * @param App - whose `Database` service to\n *   return. If not provided, the default `Database` service will be returned.\n *\n * @returns The default `Database` service if no app\n *   is provided or the `Database` service associated with the provided app.\n */\nfunction getDatabase(app) {\n    return getDatabaseInstance({ app: app });\n}\nexports.getDatabase = getDatabase;\n/**\n * Gets the {@link Database} service for the default\n * app or a given app.\n *\n * `getDatabaseWithUrl()` can be called with no arguments to access the default\n * app's {@link Database} service or as `getDatabaseWithUrl(app)` to access the\n * {@link Database} service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Database service for the default app\n * const defaultDatabase = getDatabaseWithUrl('https://example.firebaseio.com');\n * ```\n *\n * @example\n * ```javascript\n * // Get the Database service for a specific app\n * const otherDatabase = getDatabaseWithUrl('https://example.firebaseio.com', app);\n * ```\n *\n * @param App - whose `Database` service to\n *   return. If not provided, the default `Database` service will be returned.\n *\n * @returns The default `Database` service if no app\n *   is provided or the `Database` service associated with the provided app.\n */\nfunction getDatabaseWithUrl(url, app) {\n    return getDatabaseInstance({ url: url, app: app });\n}\nexports.getDatabaseWithUrl = getDatabaseWithUrl;\nfunction getDatabaseInstance(options) {\n    var app = options.app;\n    if (typeof app === 'undefined') {\n        app = app_1.getApp();\n    }\n    var firebaseApp = app;\n    var dbService = firebaseApp.getOrInitService('database', function (app) { return new database_1.DatabaseService(app); });\n    return dbService.getDatabase(options.url);\n}\n"]},"metadata":{},"sourceType":"script"}