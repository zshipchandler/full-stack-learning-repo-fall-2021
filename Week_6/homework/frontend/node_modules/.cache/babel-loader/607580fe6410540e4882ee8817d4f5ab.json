{"ast":null,"code":"var _jsxFileName = \"/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/src/pages/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport \"./style.css\";\nimport { useEffect, useState, Fragment } from \"react\";\nimport ListItem from \"../../components/ListItem/ListItem\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home(props) {\n  _s();\n\n  const history = useHistory();\n  const [input, setInput] = useState('');\n  const [tasksToDo, setToDos] = useState([]);\n  const [tasksDone, setDone] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [taskName, setTaskName] = useState(\"\");\n  useEffect(() => {\n    async function loadCredentials() {\n      if (!localStorage.getItem(\"@token\")) {\n        history.push(\"/login\");\n      } else {\n        const request = await fetch(\"htttp://localhost:4000/auth\", {\n          headers: {\n            Authorization: \"Bearer \" + localStorage.getItem(\"@token\")\n          }\n        });\n        const status = await request.status;\n\n        if (status != 200) {\n          history.push(\"/login\");\n        }\n\n        const decode = jwtDecode(localStorage.getItem(\"@token\"));\n        setName(decode.name);\n      }\n    }\n\n    async function loadToDos() {\n      const request = await fetch(\"http://localhost:4000/todos\", {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"@token\")\n        }\n      });\n      const resp = await request.json();\n      const status = await request.status; //success case\n\n      if (status == 200) {\n        const data = resp.data;\n        const todos = [];\n        const completed = [];\n        data.map(item => {\n          if (!item.status) {\n            todos.push(item);\n          } else {\n            completed.push(item);\n          }\n        });\n        setDone(completed);\n        setToDos(todos);\n      }\n    }\n\n    loadCredentials().then(() => {\n      loadToDos();\n    });\n  }, []);\n\n  async function addTaskToDo() {\n    if (taskName) {\n      if (tasksToDo.includes(taskName)) {\n        alert(\"Task already exists\");\n      } else {\n        setToDos(tasksToDo.concat(taskName));\n      }\n\n      setTaskName(\"\"); //backend\n\n      const request = await fetch(\"http://localhost:4000todos\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + localStorage.getItem(\"@token\")\n        },\n        body: JSON.stringify({\n          description: taskName\n        })\n      });\n      const resp = await request.json();\n      const status = await request.status;\n\n      if (status == 200) {\n        //success\n        setToDos(tasksToDo.concat(resp.data));\n      }\n    }\n  }\n\n  async function doneTask(i) {\n    const finishedTask = toDo[i]; //backend\n\n    const request = await fetch(\"http://localhost:4000/todos\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + localStorage.getItem(\"@token\")\n      },\n      body: JSON.stringify({\n        id: finishedTask.id\n      })\n    });\n    const resp = await request.json();\n    const status = await request.status;\n    setToDos(tasksToDo.filter(task => task != tasksToDo[i]));\n    setDone([tasksToDo[i], ...tasksDone]);\n  }\n\n  async function undo(i) {\n    const unDoneTask = done[i]; //backend\n\n    const request = await fetch(\"http://localhost:4000/todos\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + localStorage.getItem(\"@token\")\n      },\n      body: JSON.stringify({\n        id: unDoneTask.id\n      })\n    });\n    const resp = await request.json();\n    const status = await request.status;\n\n    if (status == 200) {\n      //success\n      setDone(tasksDone.filter(task => task != tasksDone[i]));\n      const newToDos = [tasksDone[i], ...tasksToDo];\n      setToDos(newToDos);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"What Do I have Planned For Today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"howManyTasks\",\n      children: [name, \", you have \", tasksToDo.length, \" tasks left to do\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"AddTaskBar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Add a to-do\",\n        value: input,\n        id: \"input_bar\",\n        onChange: event => setInput(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"todo-button\",\n        onClick: () => addTaskToDo(),\n        children: \"Add task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"To Do:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasksToDo.map((input, i) => /*#__PURE__*/_jsxDEV(ListItem, {\n        type: \"do\",\n        index: i,\n        input: input,\n        completeTask: doneTask,\n        undoTask: undo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Finished Tasks:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasksDone.map((input, i) => /*#__PURE__*/_jsxDEV(ListItem, {\n        type: \"done\",\n        index: i,\n        input: input,\n        completeTask: doneTask,\n        undoTask: undo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"logout-button\",\n      onClick: () => {\n        localStorage.removeItem(\"@token\");\n        history.push(\"/login\");\n      },\n      children: \" Logout \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"s746Vuoj3cREIvVa4QpG3vWS3/8=\", false, function () {\n  return [useHistory];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/src/pages/Home/Home.js"],"names":["useEffect","useState","Fragment","ListItem","useHistory","Home","props","history","input","setInput","tasksToDo","setToDos","tasksDone","setDone","name","setName","taskName","setTaskName","loadCredentials","localStorage","getItem","push","request","fetch","headers","Authorization","status","decode","jwtDecode","loadToDos","resp","json","data","todos","completed","map","item","then","addTaskToDo","includes","alert","concat","method","body","JSON","stringify","description","doneTask","i","finishedTask","toDo","id","filter","task","undo","unDoneTask","done","newToDos","length","event","target","value","removeItem"],"mappings":"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","sourcesContent":["import \"./style.css\";\r\nimport { useEffect, useState, Fragment } from \"react\";\r\nimport ListItem from \"../../components/ListItem/ListItem\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function Home(props) {\r\nconst history = useHistory();\r\nconst [input, setInput] = useState('');\r\nconst [tasksToDo, setToDos] = useState([]);\r\nconst [tasksDone, setDone] = useState([]);\r\nconst [name, setName] = useState(\"\");\r\nconst [taskName, setTaskName] = useState(\"\");\r\n\r\nuseEffect(()=> {\r\n  async function loadCredentials() {\r\n    if (!localStorage.getItem(\"@token\")) {\r\n      history.push(\"/login\");\r\n    } else {\r\n      const request = await fetch(\"htttp://localhost:4000/auth\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"@token\"),\r\n        },\r\n      });\r\n\r\n      const status = await request.status;\r\n\r\n      if (status != 200) {\r\n        history.push(\"/login\");\r\n      }\r\n\r\n      const decode = jwtDecode(localStorage.getItem(\"@token\"));\r\n      setName(decode.name);\r\n    }\r\n  }\r\n\r\n  async function loadToDos() {\r\n    const request = await fetch(\"http://localhost:4000/todos\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"@token\"),\r\n      },\r\n    });\r\n  const resp = await request.json();\r\n  const status = await request.status;\r\n\r\n  //success case\r\n  if (status == 200) {\r\n    const data = resp.data;\r\n    const todos = [];\r\n    const completed = [];\r\n\r\n    data.map((item) => {\r\n      if (!item.status) {\r\n        todos.push(item);\r\n      } else {\r\n        completed.push(item);\r\n      }\r\n    });\r\n    setDone(completed);\r\n    setToDos(todos);\r\n  }\r\n  }\r\n\r\n  loadCredentials().then(() => {\r\n    loadToDos();\r\n  });\r\n}, []);\r\n\r\nasync function addTaskToDo() {\r\n  if (taskName) {\r\n    if (tasksToDo.includes(taskName)) {\r\n      alert(\"Task already exists\")\r\n    } else {\r\n      setToDos(tasksToDo.concat(taskName));\r\n    }\r\n    setTaskName(\"\");\r\n\r\n    //backend\r\n    const request = await fetch(\"http://localhost:4000todos\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + localStorage.getItem(\"@token\"),\r\n      },\r\n      body: JSON.stringify({description: taskName}),\r\n    });\r\n\r\n    const resp = await request.json();\r\n    const status = await request.status;\r\n\r\n    if (status == 200) {\r\n      //success\r\n      setToDos(tasksToDo.concat(resp.data));\r\n    }\r\n  }\r\n}\r\n\r\nasync function doneTask(i) {\r\n  const finishedTask = toDo[i];\r\n\r\n  //backend\r\n  const request = await fetch(\"http://localhost:4000/todos\", {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"Bearer \" + localStorage.getItem(\"@token\"),\r\n    },\r\n    body: JSON.stringify({ id: finishedTask.id}),\r\n  });\r\n\r\n  const resp = await request.json();\r\n  const status = await request.status;\r\n\r\n  setToDos(tasksToDo.filter((task) => task != tasksToDo[i]));\r\n  setDone([tasksToDo[i], ...tasksDone]);\r\n}\r\n\r\nasync function undo(i) {\r\n  const unDoneTask = done[i];\r\n\r\n  //backend\r\n  const request = await fetch(\"http://localhost:4000/todos\", {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"Bearer \" + localStorage.getItem(\"@token\"),\r\n    },\r\n    body: JSON.stringify({ id: unDoneTask.id }),\r\n  });\r\n\r\n  const resp = await request.json();\r\n  const status = await request.status;\r\n\r\n  if (status == 200) {\r\n    //success\r\n    setDone(tasksDone.filter((task) => task != tasksDone[i]));\r\n    const newToDos = [tasksDone[i], ...tasksToDo];\r\n    setToDos(newToDos);\r\n  }\r\n}\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1>What Do I have Planned For Today?</h1>\r\n        <h2 id = \"howManyTasks\">\r\n        {name}, you have {tasksToDo.length} tasks left to do\r\n        </h2>\r\n      <div id = \"AddTaskBar\">\r\n        <input\r\n          placeholder = 'Add a to-do'\r\n          value = {input}\r\n          id = \"input_bar\"\r\n          onChange={(event) => setInput(event.target.value)}\r\n         ></input>\r\n         <button id='todo-button' onClick={() => addTaskToDo()}>Add task</button>\r\n        </div>\r\n        <h2>To Do:</h2>\r\n        <ul>\r\n          {tasksToDo.map((input, i) => (\r\n          <ListItem\r\n            type = \"do\"\r\n            index = {i}\r\n            input = {input}\r\n            completeTask = {doneTask}\r\n            undoTask = {undo}\r\n          ></ListItem>\r\n          ))}\r\n        </ul>\r\n        <h2>Finished Tasks:</h2>\r\n        <ul>\r\n          {tasksDone.map((input, i) => (\r\n          <ListItem\r\n            type = \"done\"\r\n            index = {i}\r\n            input = {input}\r\n            completeTask = {doneTask}\r\n            undoTask = {undo}\r\n            ></ListItem>\r\n            ))}\r\n        </ul>\r\n        <button \r\n          className = \"logout-button\"\r\n          onClick={() => {\r\n            localStorage.removeItem(\"@token\");\r\n            history.push(\"/login\");\r\n          }}\r\n          > Logout </button>\r\n    </Fragment>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}