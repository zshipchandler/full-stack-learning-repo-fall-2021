{"ast":null,"code":"/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProjectManagement = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar android_app_1 = require(\"./android-app\");\n\nvar ios_app_1 = require(\"./ios-app\");\n\nvar project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\n\nvar app_metadata_1 = require(\"./app-metadata\");\n/**\n * The Firebase ProjectManagement service interface.\n */\n\n\nvar ProjectManagement =\n/** @class */\nfunction () {\n  /**\n   * @param app - The app for this ProjectManagement service.\n   * @constructor\n   * @internal\n   */\n  function ProjectManagement(app) {\n    this.app = app;\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app ' + 'instance.');\n    }\n\n    this.requestHandler = new project_management_api_request_internal_1.ProjectManagementRequestHandler(app);\n  }\n  /**\n   * Lists up to 100 Firebase Android apps associated with this Firebase project.\n   *\n   * @returns The list of Android apps.\n   */\n\n\n  ProjectManagement.prototype.listAndroidApps = function () {\n    return this.listPlatformApps('android', 'listAndroidApps()');\n  };\n  /**\n   * Lists up to 100 Firebase iOS apps associated with this Firebase project.\n   *\n   * @returns The list of iOS apps.\n   */\n\n\n  ProjectManagement.prototype.listIosApps = function () {\n    return this.listPlatformApps('ios', 'listIosApps()');\n  };\n  /**\n   * Creates an `AndroidApp` object, referencing the specified Android app within\n   * this Firebase project.\n   *\n   * This method does not perform an RPC.\n   *\n   * @param appId - The `appId` of the Android app to reference.\n   *\n   * @returns An `AndroidApp` object that references the specified Firebase Android app.\n   */\n\n\n  ProjectManagement.prototype.androidApp = function (appId) {\n    return new android_app_1.AndroidApp(appId, this.requestHandler);\n  };\n  /**\n   * Creates an `iOSApp` object, referencing the specified iOS app within\n   * this Firebase project.\n   *\n   * This method does not perform an RPC.\n   *\n   * @param appId - The `appId` of the iOS app to reference.\n   *\n   * @returns An `iOSApp` object that references the specified Firebase iOS app.\n   */\n\n\n  ProjectManagement.prototype.iosApp = function (appId) {\n    return new ios_app_1.IosApp(appId, this.requestHandler);\n  };\n  /**\n   * Creates a `ShaCertificate` object.\n   *\n   * This method does not perform an RPC.\n   *\n   * @param shaHash - The SHA-1 or SHA-256 hash for this certificate.\n   *\n   * @returns A `ShaCertificate` object contains the specified SHA hash.\n   */\n\n\n  ProjectManagement.prototype.shaCertificate = function (shaHash) {\n    return new android_app_1.ShaCertificate(shaHash);\n  };\n  /**\n   * Creates a new Firebase Android app associated with this Firebase project.\n   *\n   * @param packageName - The canonical package name of the Android App,\n   *     as would appear in the Google Play Developer Console.\n   * @param displayName - An optional user-assigned display name for this\n   *     new app.\n   *\n   * @returns A promise that resolves to the newly created Android app.\n   */\n\n\n  ProjectManagement.prototype.createAndroidApp = function (packageName, displayName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.createAndroidApp(resourceName, packageName, displayName);\n    }).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createAndroidApp()\\'s response data.');\n      return new android_app_1.AndroidApp(responseData.appId, _this.requestHandler);\n    });\n  };\n  /**\n   * Creates a new Firebase iOS app associated with this Firebase project.\n   *\n   * @param bundleId - The iOS app bundle ID to use for this new app.\n   * @param displayName - An optional user-assigned display name for this\n   *     new app.\n   *\n   * @returns A promise that resolves to the newly created iOS app.\n   */\n\n\n  ProjectManagement.prototype.createIosApp = function (bundleId, displayName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.createIosApp(resourceName, bundleId, displayName);\n    }).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createIosApp()\\'s response data.');\n      return new ios_app_1.IosApp(responseData.appId, _this.requestHandler);\n    });\n  };\n  /**\n   * Lists up to 100 Firebase apps associated with this Firebase project.\n   *\n   * @returns A promise that resolves to the metadata list of the apps.\n   */\n\n\n  ProjectManagement.prototype.listAppMetadata = function () {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.listAppMetadata(resourceName);\n    }).then(function (responseData) {\n      return _this.getProjectId().then(function (projectId) {\n        return _this.transformResponseToAppMetadata(responseData, projectId);\n      });\n    });\n  };\n  /**\n   * Update the display name of this Firebase project.\n   *\n   * @param newDisplayName - The new display name to be updated.\n   *\n   * @returns A promise that resolves when the project display name has been updated.\n   */\n\n\n  ProjectManagement.prototype.setDisplayName = function (newDisplayName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.setDisplayName(resourceName, newDisplayName);\n    });\n  };\n\n  ProjectManagement.prototype.transformResponseToAppMetadata = function (responseData, projectId) {\n    this.assertListAppsResponseData(responseData, 'listAppMetadata()');\n\n    if (!responseData.apps) {\n      return [];\n    }\n\n    return responseData.apps.map(function (appJson) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, '\"apps[].appId\" field must be present in the listAppMetadata() response data.');\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.platform), responseData, '\"apps[].platform\" field must be present in the listAppMetadata() response data.');\n      var metadata = {\n        appId: appJson.appId,\n        platform: app_metadata_1.AppPlatform[appJson.platform] || app_metadata_1.AppPlatform.PLATFORM_UNKNOWN,\n        projectId: projectId,\n        resourceName: appJson.name\n      };\n\n      if (appJson.displayName) {\n        metadata.displayName = appJson.displayName;\n      }\n\n      return metadata;\n    });\n  };\n\n  ProjectManagement.prototype.getResourceName = function () {\n    return this.getProjectId().then(function (projectId) {\n      return \"projects/\" + projectId;\n    });\n  };\n\n  ProjectManagement.prototype.getProjectId = function () {\n    var _this = this;\n\n    if (this.projectId) {\n      return Promise.resolve(this.projectId);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      // Assert that a specific project ID was provided within the app.\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n\n      _this.projectId = projectId;\n      return _this.projectId;\n    });\n  };\n  /**\n   * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.listPlatformApps = function (platform, callerName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return platform === 'android' ? _this.requestHandler.listAndroidApps(resourceName) : _this.requestHandler.listIosApps(resourceName);\n    }).then(function (responseData) {\n      _this.assertListAppsResponseData(responseData, callerName);\n\n      if (!responseData.apps) {\n        return [];\n      }\n\n      return responseData.apps.map(function (appJson) {\n        project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, \"\\\"apps[].appId\\\" field must be present in the \" + callerName + \" response data.\");\n\n        if (platform === 'android') {\n          return new android_app_1.AndroidApp(appJson.appId, _this.requestHandler);\n        } else {\n          return new ios_app_1.IosApp(appJson.appId, _this.requestHandler);\n        }\n      });\n    });\n  };\n\n  ProjectManagement.prototype.assertListAppsResponseData = function (responseData, callerName) {\n    project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, callerName + \"'s responseData must be a non-null object.\");\n\n    if (responseData.apps) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isArray(responseData.apps), responseData, \"\\\"apps\\\" field must be present in the \" + callerName + \" response data.\");\n    }\n  };\n\n  return ProjectManagement;\n}();\n\nexports.ProjectManagement = ProjectManagement;","map":{"version":3,"sources":["/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/node_modules/firebase-admin/lib/project-management/project-management.js"],"names":["Object","defineProperty","exports","value","ProjectManagement","error_1","require","utils","validator","android_app_1","ios_app_1","project_management_api_request_internal_1","app_metadata_1","app","isNonNullObject","FirebaseProjectManagementError","requestHandler","ProjectManagementRequestHandler","prototype","listAndroidApps","listPlatformApps","listIosApps","androidApp","appId","AndroidApp","iosApp","IosApp","shaCertificate","shaHash","ShaCertificate","createAndroidApp","packageName","displayName","_this","getResourceName","then","resourceName","responseData","assertServerResponse","isNonEmptyString","createIosApp","bundleId","listAppMetadata","getProjectId","projectId","transformResponseToAppMetadata","setDisplayName","newDisplayName","assertListAppsResponseData","apps","map","appJson","platform","metadata","AppPlatform","PLATFORM_UNKNOWN","name","Promise","resolve","findProjectId","callerName","isArray"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAIK,yCAAyC,GAAGL,OAAO,CAAC,2CAAD,CAAvD;;AACA,IAAIM,cAAc,GAAGN,OAAO,CAAC,gBAAD,CAA5B;AACA;AACA;AACA;;;AACA,IAAIF,iBAAiB;AAAG;AAAe,YAAY;AAC/C;AACJ;AACA;AACA;AACA;AACI,WAASA,iBAAT,CAA2BS,GAA3B,EAAgC;AAC5B,SAAKA,GAAL,GAAWA,GAAX;;AACA,QAAI,CAACL,SAAS,CAACM,eAAV,CAA0BD,GAA1B,CAAD,IAAmC,EAAE,aAAaA,GAAf,CAAvC,EAA4D;AACxD,YAAM,IAAIR,OAAO,CAACU,8BAAZ,CAA2C,kBAA3C,EAA+D,qFAC/D,WADA,CAAN;AAEH;;AACD,SAAKC,cAAL,GAAsB,IAAIL,yCAAyC,CAACM,+BAA9C,CAA8EJ,GAA9E,CAAtB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIT,EAAAA,iBAAiB,CAACc,SAAlB,CAA4BC,eAA5B,GAA8C,YAAY;AACtD,WAAO,KAAKC,gBAAL,CAAsB,SAAtB,EAAiC,mBAAjC,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIhB,EAAAA,iBAAiB,CAACc,SAAlB,CAA4BG,WAA5B,GAA0C,YAAY;AAClD,WAAO,KAAKD,gBAAL,CAAsB,KAAtB,EAA6B,eAA7B,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIhB,EAAAA,iBAAiB,CAACc,SAAlB,CAA4BI,UAA5B,GAAyC,UAAUC,KAAV,EAAiB;AACtD,WAAO,IAAId,aAAa,CAACe,UAAlB,CAA6BD,KAA7B,EAAoC,KAAKP,cAAzC,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIZ,EAAAA,iBAAiB,CAACc,SAAlB,CAA4BO,MAA5B,GAAqC,UAAUF,KAAV,EAAiB;AAClD,WAAO,IAAIb,SAAS,CAACgB,MAAd,CAAqBH,KAArB,EAA4B,KAAKP,cAAjC,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIZ,EAAAA,iBAAiB,CAACc,SAAlB,CAA4BS,cAA5B,GAA6C,UAAUC,OAAV,EAAmB;AAC5D,WAAO,IAAInB,aAAa,CAACoB,cAAlB,CAAiCD,OAAjC,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIxB,EAAAA,iBAAiB,CAACc,SAAlB,CAA4BY,gBAA5B,GAA+C,UAAUC,WAAV,EAAuBC,WAAvB,EAAoC;AAC/E,QAAIC,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKC,eAAL,GACFC,IADE,CACG,UAAUC,YAAV,EAAwB;AAC9B,aAAOH,KAAK,CAACjB,cAAN,CAAqBc,gBAArB,CAAsCM,YAAtC,EAAoDL,WAApD,EAAiEC,WAAjE,CAAP;AACH,KAHM,EAIFG,IAJE,CAIG,UAAUE,YAAV,EAAwB;AAC9B1B,MAAAA,yCAAyC,CAAC2B,oBAA1C,CAA+D9B,SAAS,CAACM,eAAV,CAA0BuB,YAA1B,CAA/D,EAAwGA,YAAxG,EAAsH,+DAAtH;AACA1B,MAAAA,yCAAyC,CAAC2B,oBAA1C,CAA+D9B,SAAS,CAAC+B,gBAAV,CAA2BF,YAAY,CAACd,KAAxC,CAA/D,EAA+Gc,YAA/G,EAA6H,oFAA7H;AACA,aAAO,IAAI5B,aAAa,CAACe,UAAlB,CAA6Ba,YAAY,CAACd,KAA1C,EAAiDU,KAAK,CAACjB,cAAvD,CAAP;AACH,KARM,CAAP;AASH,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIZ,EAAAA,iBAAiB,CAACc,SAAlB,CAA4BsB,YAA5B,GAA2C,UAAUC,QAAV,EAAoBT,WAApB,EAAiC;AACxE,QAAIC,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKC,eAAL,GACFC,IADE,CACG,UAAUC,YAAV,EAAwB;AAC9B,aAAOH,KAAK,CAACjB,cAAN,CAAqBwB,YAArB,CAAkCJ,YAAlC,EAAgDK,QAAhD,EAA0DT,WAA1D,CAAP;AACH,KAHM,EAIFG,IAJE,CAIG,UAAUE,YAAV,EAAwB;AAC9B1B,MAAAA,yCAAyC,CAAC2B,oBAA1C,CAA+D9B,SAAS,CAACM,eAAV,CAA0BuB,YAA1B,CAA/D,EAAwGA,YAAxG,EAAsH,2DAAtH;AACA1B,MAAAA,yCAAyC,CAAC2B,oBAA1C,CAA+D9B,SAAS,CAAC+B,gBAAV,CAA2BF,YAAY,CAACd,KAAxC,CAA/D,EAA+Gc,YAA/G,EAA6H,gFAA7H;AACA,aAAO,IAAI3B,SAAS,CAACgB,MAAd,CAAqBW,YAAY,CAACd,KAAlC,EAAyCU,KAAK,CAACjB,cAA/C,CAAP;AACH,KARM,CAAP;AASH,GAXD;AAYA;AACJ;AACA;AACA;AACA;;;AACIZ,EAAAA,iBAAiB,CAACc,SAAlB,CAA4BwB,eAA5B,GAA8C,YAAY;AACtD,QAAIT,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKC,eAAL,GACFC,IADE,CACG,UAAUC,YAAV,EAAwB;AAC9B,aAAOH,KAAK,CAACjB,cAAN,CAAqB0B,eAArB,CAAqCN,YAArC,CAAP;AACH,KAHM,EAIFD,IAJE,CAIG,UAAUE,YAAV,EAAwB;AAC9B,aAAOJ,KAAK,CAACU,YAAN,GACFR,IADE,CACG,UAAUS,SAAV,EAAqB;AAC3B,eAAOX,KAAK,CAACY,8BAAN,CAAqCR,YAArC,EAAmDO,SAAnD,CAAP;AACH,OAHM,CAAP;AAIH,KATM,CAAP;AAUH,GAZD;AAaA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIxC,EAAAA,iBAAiB,CAACc,SAAlB,CAA4B4B,cAA5B,GAA6C,UAAUC,cAAV,EAA0B;AACnE,QAAId,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKC,eAAL,GACFC,IADE,CACG,UAAUC,YAAV,EAAwB;AAC9B,aAAOH,KAAK,CAACjB,cAAN,CAAqB8B,cAArB,CAAoCV,YAApC,EAAkDW,cAAlD,CAAP;AACH,KAHM,CAAP;AAIH,GAND;;AAOA3C,EAAAA,iBAAiB,CAACc,SAAlB,CAA4B2B,8BAA5B,GAA6D,UAAUR,YAAV,EAAwBO,SAAxB,EAAmC;AAC5F,SAAKI,0BAAL,CAAgCX,YAAhC,EAA8C,mBAA9C;;AACA,QAAI,CAACA,YAAY,CAACY,IAAlB,EAAwB;AACpB,aAAO,EAAP;AACH;;AACD,WAAOZ,YAAY,CAACY,IAAb,CAAkBC,GAAlB,CAAsB,UAAUC,OAAV,EAAmB;AAC5CxC,MAAAA,yCAAyC,CAAC2B,oBAA1C,CAA+D9B,SAAS,CAAC+B,gBAAV,CAA2BY,OAAO,CAAC5B,KAAnC,CAA/D,EAA0Gc,YAA1G,EAAwH,8EAAxH;AACA1B,MAAAA,yCAAyC,CAAC2B,oBAA1C,CAA+D9B,SAAS,CAAC+B,gBAAV,CAA2BY,OAAO,CAACC,QAAnC,CAA/D,EAA6Gf,YAA7G,EAA2H,iFAA3H;AACA,UAAIgB,QAAQ,GAAG;AACX9B,QAAAA,KAAK,EAAE4B,OAAO,CAAC5B,KADJ;AAEX6B,QAAAA,QAAQ,EAAExC,cAAc,CAAC0C,WAAf,CAA2BH,OAAO,CAACC,QAAnC,KAAgDxC,cAAc,CAAC0C,WAAf,CAA2BC,gBAF1E;AAGXX,QAAAA,SAAS,EAAEA,SAHA;AAIXR,QAAAA,YAAY,EAAEe,OAAO,CAACK;AAJX,OAAf;;AAMA,UAAIL,OAAO,CAACnB,WAAZ,EAAyB;AACrBqB,QAAAA,QAAQ,CAACrB,WAAT,GAAuBmB,OAAO,CAACnB,WAA/B;AACH;;AACD,aAAOqB,QAAP;AACH,KAbM,CAAP;AAcH,GAnBD;;AAoBAjD,EAAAA,iBAAiB,CAACc,SAAlB,CAA4BgB,eAA5B,GAA8C,YAAY;AACtD,WAAO,KAAKS,YAAL,GACFR,IADE,CACG,UAAUS,SAAV,EAAqB;AAC3B,aAAO,cAAcA,SAArB;AACH,KAHM,CAAP;AAIH,GALD;;AAMAxC,EAAAA,iBAAiB,CAACc,SAAlB,CAA4ByB,YAA5B,GAA2C,YAAY;AACnD,QAAIV,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKW,SAAT,EAAoB;AAChB,aAAOa,OAAO,CAACC,OAAR,CAAgB,KAAKd,SAArB,CAAP;AACH;;AACD,WAAOrC,KAAK,CAACoD,aAAN,CAAoB,KAAK9C,GAAzB,EACFsB,IADE,CACG,UAAUS,SAAV,EAAqB;AAC3B;AACA,UAAI,CAACpC,SAAS,CAAC+B,gBAAV,CAA2BK,SAA3B,CAAL,EAA4C;AACxC,cAAM,IAAIvC,OAAO,CAACU,8BAAZ,CAA2C,oBAA3C,EAAiE,6FACjE,+EADiE,GAEjE,uBAFA,CAAN;AAGH;;AACDkB,MAAAA,KAAK,CAACW,SAAN,GAAkBA,SAAlB;AACA,aAAOX,KAAK,CAACW,SAAb;AACH,KAVM,CAAP;AAWH,GAhBD;AAiBA;AACJ;AACA;;;AACIxC,EAAAA,iBAAiB,CAACc,SAAlB,CAA4BE,gBAA5B,GAA+C,UAAUgC,QAAV,EAAoBQ,UAApB,EAAgC;AAC3E,QAAI3B,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKC,eAAL,GACFC,IADE,CACG,UAAUC,YAAV,EAAwB;AAC9B,aAAQgB,QAAQ,KAAK,SAAd,GACHnB,KAAK,CAACjB,cAAN,CAAqBG,eAArB,CAAqCiB,YAArC,CADG,GAEDH,KAAK,CAACjB,cAAN,CAAqBK,WAArB,CAAiCe,YAAjC,CAFN;AAGH,KALM,EAMFD,IANE,CAMG,UAAUE,YAAV,EAAwB;AAC9BJ,MAAAA,KAAK,CAACe,0BAAN,CAAiCX,YAAjC,EAA+CuB,UAA/C;;AACA,UAAI,CAACvB,YAAY,CAACY,IAAlB,EAAwB;AACpB,eAAO,EAAP;AACH;;AACD,aAAOZ,YAAY,CAACY,IAAb,CAAkBC,GAAlB,CAAsB,UAAUC,OAAV,EAAmB;AAC5CxC,QAAAA,yCAAyC,CAAC2B,oBAA1C,CAA+D9B,SAAS,CAAC+B,gBAAV,CAA2BY,OAAO,CAAC5B,KAAnC,CAA/D,EAA0Gc,YAA1G,EAAwH,mDAAmDuB,UAAnD,GAAgE,iBAAxL;;AACA,YAAIR,QAAQ,KAAK,SAAjB,EAA4B;AACxB,iBAAO,IAAI3C,aAAa,CAACe,UAAlB,CAA6B2B,OAAO,CAAC5B,KAArC,EAA4CU,KAAK,CAACjB,cAAlD,CAAP;AACH,SAFD,MAGK;AACD,iBAAO,IAAIN,SAAS,CAACgB,MAAd,CAAqByB,OAAO,CAAC5B,KAA7B,EAAoCU,KAAK,CAACjB,cAA1C,CAAP;AACH;AACJ,OARM,CAAP;AASH,KApBM,CAAP;AAqBH,GAvBD;;AAwBAZ,EAAAA,iBAAiB,CAACc,SAAlB,CAA4B8B,0BAA5B,GAAyD,UAAUX,YAAV,EAAwBuB,UAAxB,EAAoC;AACzFjD,IAAAA,yCAAyC,CAAC2B,oBAA1C,CAA+D9B,SAAS,CAACM,eAAV,CAA0BuB,YAA1B,CAA/D,EAAwGA,YAAxG,EAAsHuB,UAAU,GAAG,4CAAnI;;AACA,QAAIvB,YAAY,CAACY,IAAjB,EAAuB;AACnBtC,MAAAA,yCAAyC,CAAC2B,oBAA1C,CAA+D9B,SAAS,CAACqD,OAAV,CAAkBxB,YAAY,CAACY,IAA/B,CAA/D,EAAqGZ,YAArG,EAAmH,2CAA2CuB,UAA3C,GAAwD,iBAA3K;AACH;AACJ,GALD;;AAMA,SAAOxD,iBAAP;AACH,CA5NsC,EAAvC;;AA6NAF,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectManagement = void 0;\nvar error_1 = require(\"../utils/error\");\nvar utils = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\nvar android_app_1 = require(\"./android-app\");\nvar ios_app_1 = require(\"./ios-app\");\nvar project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\nvar app_metadata_1 = require(\"./app-metadata\");\n/**\n * The Firebase ProjectManagement service interface.\n */\nvar ProjectManagement = /** @class */ (function () {\n    /**\n     * @param app - The app for this ProjectManagement service.\n     * @constructor\n     * @internal\n     */\n    function ProjectManagement(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app '\n                + 'instance.');\n        }\n        this.requestHandler = new project_management_api_request_internal_1.ProjectManagementRequestHandler(app);\n    }\n    /**\n     * Lists up to 100 Firebase Android apps associated with this Firebase project.\n     *\n     * @returns The list of Android apps.\n     */\n    ProjectManagement.prototype.listAndroidApps = function () {\n        return this.listPlatformApps('android', 'listAndroidApps()');\n    };\n    /**\n     * Lists up to 100 Firebase iOS apps associated with this Firebase project.\n     *\n     * @returns The list of iOS apps.\n     */\n    ProjectManagement.prototype.listIosApps = function () {\n        return this.listPlatformApps('ios', 'listIosApps()');\n    };\n    /**\n     * Creates an `AndroidApp` object, referencing the specified Android app within\n     * this Firebase project.\n     *\n     * This method does not perform an RPC.\n     *\n     * @param appId - The `appId` of the Android app to reference.\n     *\n     * @returns An `AndroidApp` object that references the specified Firebase Android app.\n     */\n    ProjectManagement.prototype.androidApp = function (appId) {\n        return new android_app_1.AndroidApp(appId, this.requestHandler);\n    };\n    /**\n     * Creates an `iOSApp` object, referencing the specified iOS app within\n     * this Firebase project.\n     *\n     * This method does not perform an RPC.\n     *\n     * @param appId - The `appId` of the iOS app to reference.\n     *\n     * @returns An `iOSApp` object that references the specified Firebase iOS app.\n     */\n    ProjectManagement.prototype.iosApp = function (appId) {\n        return new ios_app_1.IosApp(appId, this.requestHandler);\n    };\n    /**\n     * Creates a `ShaCertificate` object.\n     *\n     * This method does not perform an RPC.\n     *\n     * @param shaHash - The SHA-1 or SHA-256 hash for this certificate.\n     *\n     * @returns A `ShaCertificate` object contains the specified SHA hash.\n     */\n    ProjectManagement.prototype.shaCertificate = function (shaHash) {\n        return new android_app_1.ShaCertificate(shaHash);\n    };\n    /**\n     * Creates a new Firebase Android app associated with this Firebase project.\n     *\n     * @param packageName - The canonical package name of the Android App,\n     *     as would appear in the Google Play Developer Console.\n     * @param displayName - An optional user-assigned display name for this\n     *     new app.\n     *\n     * @returns A promise that resolves to the newly created Android app.\n     */\n    ProjectManagement.prototype.createAndroidApp = function (packageName, displayName) {\n        var _this = this;\n        return this.getResourceName()\n            .then(function (resourceName) {\n            return _this.requestHandler.createAndroidApp(resourceName, packageName, displayName);\n        })\n            .then(function (responseData) {\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createAndroidApp()\\'s response data.');\n            return new android_app_1.AndroidApp(responseData.appId, _this.requestHandler);\n        });\n    };\n    /**\n     * Creates a new Firebase iOS app associated with this Firebase project.\n     *\n     * @param bundleId - The iOS app bundle ID to use for this new app.\n     * @param displayName - An optional user-assigned display name for this\n     *     new app.\n     *\n     * @returns A promise that resolves to the newly created iOS app.\n     */\n    ProjectManagement.prototype.createIosApp = function (bundleId, displayName) {\n        var _this = this;\n        return this.getResourceName()\n            .then(function (resourceName) {\n            return _this.requestHandler.createIosApp(resourceName, bundleId, displayName);\n        })\n            .then(function (responseData) {\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createIosApp()\\'s response data.');\n            return new ios_app_1.IosApp(responseData.appId, _this.requestHandler);\n        });\n    };\n    /**\n     * Lists up to 100 Firebase apps associated with this Firebase project.\n     *\n     * @returns A promise that resolves to the metadata list of the apps.\n     */\n    ProjectManagement.prototype.listAppMetadata = function () {\n        var _this = this;\n        return this.getResourceName()\n            .then(function (resourceName) {\n            return _this.requestHandler.listAppMetadata(resourceName);\n        })\n            .then(function (responseData) {\n            return _this.getProjectId()\n                .then(function (projectId) {\n                return _this.transformResponseToAppMetadata(responseData, projectId);\n            });\n        });\n    };\n    /**\n     * Update the display name of this Firebase project.\n     *\n     * @param newDisplayName - The new display name to be updated.\n     *\n     * @returns A promise that resolves when the project display name has been updated.\n     */\n    ProjectManagement.prototype.setDisplayName = function (newDisplayName) {\n        var _this = this;\n        return this.getResourceName()\n            .then(function (resourceName) {\n            return _this.requestHandler.setDisplayName(resourceName, newDisplayName);\n        });\n    };\n    ProjectManagement.prototype.transformResponseToAppMetadata = function (responseData, projectId) {\n        this.assertListAppsResponseData(responseData, 'listAppMetadata()');\n        if (!responseData.apps) {\n            return [];\n        }\n        return responseData.apps.map(function (appJson) {\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, '\"apps[].appId\" field must be present in the listAppMetadata() response data.');\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.platform), responseData, '\"apps[].platform\" field must be present in the listAppMetadata() response data.');\n            var metadata = {\n                appId: appJson.appId,\n                platform: app_metadata_1.AppPlatform[appJson.platform] || app_metadata_1.AppPlatform.PLATFORM_UNKNOWN,\n                projectId: projectId,\n                resourceName: appJson.name,\n            };\n            if (appJson.displayName) {\n                metadata.displayName = appJson.displayName;\n            }\n            return metadata;\n        });\n    };\n    ProjectManagement.prototype.getResourceName = function () {\n        return this.getProjectId()\n            .then(function (projectId) {\n            return \"projects/\" + projectId;\n        });\n    };\n    ProjectManagement.prototype.getProjectId = function () {\n        var _this = this;\n        if (this.projectId) {\n            return Promise.resolve(this.projectId);\n        }\n        return utils.findProjectId(this.app)\n            .then(function (projectId) {\n            // Assert that a specific project ID was provided within the app.\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            _this.projectId = projectId;\n            return _this.projectId;\n        });\n    };\n    /**\n     * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\n     */\n    ProjectManagement.prototype.listPlatformApps = function (platform, callerName) {\n        var _this = this;\n        return this.getResourceName()\n            .then(function (resourceName) {\n            return (platform === 'android') ?\n                _this.requestHandler.listAndroidApps(resourceName)\n                : _this.requestHandler.listIosApps(resourceName);\n        })\n            .then(function (responseData) {\n            _this.assertListAppsResponseData(responseData, callerName);\n            if (!responseData.apps) {\n                return [];\n            }\n            return responseData.apps.map(function (appJson) {\n                project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, \"\\\"apps[].appId\\\" field must be present in the \" + callerName + \" response data.\");\n                if (platform === 'android') {\n                    return new android_app_1.AndroidApp(appJson.appId, _this.requestHandler);\n                }\n                else {\n                    return new ios_app_1.IosApp(appJson.appId, _this.requestHandler);\n                }\n            });\n        });\n    };\n    ProjectManagement.prototype.assertListAppsResponseData = function (responseData, callerName) {\n        project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, callerName + \"'s responseData must be a non-null object.\");\n        if (responseData.apps) {\n            project_management_api_request_internal_1.assertServerResponse(validator.isArray(responseData.apps), responseData, \"\\\"apps\\\" field must be present in the \" + callerName + \" response data.\");\n        }\n    };\n    return ProjectManagement;\n}());\nexports.ProjectManagement = ProjectManagement;\n"]},"metadata":{},"sourceType":"script"}