{"ast":null,"code":"/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Model = exports.MachineLearning = void 0;\n\nvar index_1 = require(\"../storage/index\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar utils = require(\"../utils\");\n\nvar machine_learning_api_client_1 = require(\"./machine-learning-api-client\");\n\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\n/**\n * The Firebase `MachineLearning` service interface.\n */\n\n\nvar MachineLearning =\n/** @class */\nfunction () {\n  /**\n   * @param app - The app for this ML service.\n   * @constructor\n   * @internal\n   */\n  function MachineLearning(app) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseError({\n        code: 'machine-learning/invalid-argument',\n        message: 'First argument passed to admin.machineLearning() must be a ' + 'valid Firebase app instance.'\n      });\n    }\n\n    this.appInternal = app;\n    this.client = new machine_learning_api_client_1.MachineLearningApiClient(app);\n  }\n\n  Object.defineProperty(MachineLearning.prototype, \"app\", {\n    /**\n     *  The {@link firebase-admin.app#App} associated with the current `MachineLearning`\n     *  service instance.\n     */\n    get: function () {\n      return this.appInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates a model in the current Firebase project.\n   *\n   * @param model - The model to create.\n   *\n   * @returns A Promise fulfilled with the created model.\n   */\n\n  MachineLearning.prototype.createModel = function (model) {\n    var _this = this;\n\n    return this.signUrlIfPresent(model).then(function (modelContent) {\n      return _this.client.createModel(modelContent);\n    }).then(function (operation) {\n      return _this.client.handleOperation(operation);\n    }).then(function (modelResponse) {\n      return new Model(modelResponse, _this.client);\n    });\n  };\n  /**\n   * Updates a model's metadata or model file.\n   *\n   * @param modelId - The ID of the model to update.\n   * @param model - The model fields to update.\n   *\n   * @returns A Promise fulfilled with the updated model.\n   */\n\n\n  MachineLearning.prototype.updateModel = function (modelId, model) {\n    var _this = this;\n\n    var updateMask = utils.generateUpdateMask(model);\n    return this.signUrlIfPresent(model).then(function (modelContent) {\n      return _this.client.updateModel(modelId, modelContent, updateMask);\n    }).then(function (operation) {\n      return _this.client.handleOperation(operation);\n    }).then(function (modelResponse) {\n      return new Model(modelResponse, _this.client);\n    });\n  };\n  /**\n   * Publishes a Firebase ML model.\n   *\n   * A published model can be downloaded to client apps.\n   *\n   * @param modelId - The ID of the model to publish.\n   *\n   * @returns A Promise fulfilled with the published model.\n   */\n\n\n  MachineLearning.prototype.publishModel = function (modelId) {\n    return this.setPublishStatus(modelId, true);\n  };\n  /**\n   * Unpublishes a Firebase ML model.\n   *\n   * @param modelId - The ID of the model to unpublish.\n   *\n   * @returns A Promise fulfilled with the unpublished model.\n   */\n\n\n  MachineLearning.prototype.unpublishModel = function (modelId) {\n    return this.setPublishStatus(modelId, false);\n  };\n  /**\n   * Gets the model specified by the given ID.\n   *\n   * @param modelId - The ID of the model to get.\n   *\n   * @returns A Promise fulfilled with the model object.\n   */\n\n\n  MachineLearning.prototype.getModel = function (modelId) {\n    var _this = this;\n\n    return this.client.getModel(modelId).then(function (modelResponse) {\n      return new Model(modelResponse, _this.client);\n    });\n  };\n  /**\n   * Lists the current project's models.\n   *\n   * @param options - The listing options.\n   *\n   * @returns A promise that\n   *     resolves with the current (filtered) list of models and the next page\n   *     token. For the last page, an empty list of models and no page token\n   *     are returned.\n   */\n\n\n  MachineLearning.prototype.listModels = function (options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return this.client.listModels(options).then(function (resp) {\n      if (!validator.isNonNullObject(resp)) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid ListModels response: \" + JSON.stringify(resp));\n      }\n\n      var models = [];\n\n      if (resp.models) {\n        models = resp.models.map(function (rs) {\n          return new Model(rs, _this.client);\n        });\n      }\n\n      var result = {\n        models: models\n      };\n\n      if (resp.nextPageToken) {\n        result.pageToken = resp.nextPageToken;\n      }\n\n      return result;\n    });\n  };\n  /**\n   * Deletes a model from the current project.\n   *\n   * @param modelId - The ID of the model to delete.\n   */\n\n\n  MachineLearning.prototype.deleteModel = function (modelId) {\n    return this.client.deleteModel(modelId);\n  };\n\n  MachineLearning.prototype.setPublishStatus = function (modelId, publish) {\n    var _this = this;\n\n    var updateMask = ['state.published'];\n    var options = {\n      state: {\n        published: publish\n      }\n    };\n    return this.client.updateModel(modelId, options, updateMask).then(function (operation) {\n      return _this.client.handleOperation(operation);\n    }).then(function (modelResponse) {\n      return new Model(modelResponse, _this.client);\n    });\n  };\n\n  MachineLearning.prototype.signUrlIfPresent = function (options) {\n    var modelOptions = deep_copy_1.deepCopy(options);\n\n    if (machine_learning_api_client_1.isGcsTfliteModelOptions(modelOptions)) {\n      return this.signUrl(modelOptions.tfliteModel.gcsTfliteUri).then(function (uri) {\n        modelOptions.tfliteModel.gcsTfliteUri = uri;\n        return modelOptions;\n      }).catch(function (err) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('internal-error', \"Error during signing upload url: \" + err.message);\n      });\n    }\n\n    return Promise.resolve(modelOptions);\n  };\n\n  MachineLearning.prototype.signUrl = function (unsignedUrl) {\n    var MINUTES_IN_MILLIS = 60 * 1000;\n    var URL_VALID_DURATION = 10 * MINUTES_IN_MILLIS;\n    var gcsRegex = /^gs:\\/\\/([a-z0-9_.-]{3,63})\\/(.+)$/;\n    var matches = gcsRegex.exec(unsignedUrl);\n\n    if (!matches) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid unsigned url: \" + unsignedUrl);\n    }\n\n    var bucketName = matches[1];\n    var blobName = matches[2];\n    var bucket = index_1.getStorage(this.app).bucket(bucketName);\n    var blob = bucket.file(blobName);\n    return blob.getSignedUrl({\n      action: 'read',\n      expires: Date.now() + URL_VALID_DURATION\n    }).then(function (signUrl) {\n      return signUrl[0];\n    });\n  };\n\n  return MachineLearning;\n}();\n\nexports.MachineLearning = MachineLearning;\n/**\n * A Firebase ML Model output object.\n */\n\nvar Model =\n/** @class */\nfunction () {\n  /**\n   * @internal\n   */\n  function Model(model, client) {\n    this.model = Model.validateAndClone(model);\n    this.client = client;\n  }\n\n  Object.defineProperty(Model.prototype, \"modelId\", {\n    /** The ID of the model. */\n    get: function () {\n      return extractModelId(this.model.name);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"displayName\", {\n    /**\n     * The model's name. This is the name you use from your app to load the\n     * model.\n     */\n    get: function () {\n      return this.model.displayName;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"tags\", {\n    /**\n     * The model's tags, which can be used to group or filter models in list\n     * operations.\n     */\n    get: function () {\n      return this.model.tags || [];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"createTime\", {\n    /** The timestamp of the model's creation. */\n    get: function () {\n      return new Date(this.model.createTime).toUTCString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"updateTime\", {\n    /** The timestamp of the model's most recent update. */\n    get: function () {\n      return new Date(this.model.updateTime).toUTCString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"validationError\", {\n    /** Error message when model validation fails. */\n    get: function () {\n      var _a, _b;\n\n      return (_b = (_a = this.model.state) === null || _a === void 0 ? void 0 : _a.validationError) === null || _b === void 0 ? void 0 : _b.message;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"published\", {\n    /** True if the model is published. */\n    get: function () {\n      var _a;\n\n      return ((_a = this.model.state) === null || _a === void 0 ? void 0 : _a.published) || false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"etag\", {\n    /**\n     * The ETag identifier of the current version of the model. This value\n     * changes whenever you update any of the model's properties.\n     */\n    get: function () {\n      return this.model.etag;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"modelHash\", {\n    /**\n     * The hash of the model's `tflite` file. This value changes only when\n     * you upload a new TensorFlow Lite model.\n     */\n    get: function () {\n      return this.model.modelHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"tfliteModel\", {\n    /** Metadata about the model's TensorFlow Lite model file. */\n    get: function () {\n      // Make a copy so people can't directly modify the private this.model object.\n      return deep_copy_1.deepCopy(this.model.tfliteModel);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"locked\", {\n    /**\n     * True if the model is locked by a server-side operation. You can't make\n     * changes to a locked model. See {@link Model.waitForUnlocked}.\n     */\n    get: function () {\n      var _a, _b;\n\n      return ((_b = (_a = this.model.activeOperations) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Return the model as a JSON object.\n   */\n\n  Model.prototype.toJSON = function () {\n    // We can't just return this.model because it has extra fields and\n    // different formats etc. So we build the expected model object.\n    var jsonModel = {\n      modelId: this.modelId,\n      displayName: this.displayName,\n      tags: this.tags,\n      createTime: this.createTime,\n      updateTime: this.updateTime,\n      published: this.published,\n      etag: this.etag,\n      locked: this.locked\n    }; // Also add possibly undefined fields if they exist.\n\n    if (this.validationError) {\n      jsonModel['validationError'] = this.validationError;\n    }\n\n    if (this.modelHash) {\n      jsonModel['modelHash'] = this.modelHash;\n    }\n\n    if (this.tfliteModel) {\n      jsonModel['tfliteModel'] = this.tfliteModel;\n    }\n\n    return jsonModel;\n  };\n  /**\n   * Wait for the model to be unlocked.\n   *\n   * @param maxTimeMillis - The maximum time in milliseconds to wait.\n   *     If not specified, a default maximum of 2 minutes is used.\n   *\n   * @returns A promise that resolves when the model is unlocked\n   *   or the maximum wait time has passed.\n   */\n\n\n  Model.prototype.waitForUnlocked = function (maxTimeMillis) {\n    var _this = this;\n\n    var _a, _b;\n\n    if (((_b = (_a = this.model.activeOperations) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {\n      // The client will always be defined on Models that have activeOperations\n      // because models with active operations came back from the server and\n      // were constructed with a non-empty client.\n      return this.client.handleOperation(this.model.activeOperations[0], {\n        wait: true,\n        maxTimeMillis: maxTimeMillis\n      }).then(function (modelResponse) {\n        _this.model = Model.validateAndClone(modelResponse);\n      });\n    }\n\n    return Promise.resolve();\n  };\n\n  Model.validateAndClone = function (model) {\n    if (!validator.isNonNullObject(model) || !validator.isNonEmptyString(model.name) || !validator.isNonEmptyString(model.createTime) || !validator.isNonEmptyString(model.updateTime) || !validator.isNonEmptyString(model.displayName) || !validator.isNonEmptyString(model.etag)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Invalid Model response: \" + JSON.stringify(model));\n    }\n\n    var tmpModel = deep_copy_1.deepCopy(model); // If tflite Model is specified, it must have a source consisting of\n    // oneof {gcsTfliteUri, automlModel}\n\n    if (model.tfliteModel && !validator.isNonEmptyString(model.tfliteModel.gcsTfliteUri) && !validator.isNonEmptyString(model.tfliteModel.automlModel)) {\n      // If we have some other source, ignore the whole tfliteModel.\n      delete tmpModel.tfliteModel;\n    } // Remove '@type' field. We don't need it.\n\n\n    if (tmpModel['@type']) {\n      delete tmpModel['@type'];\n    }\n\n    return tmpModel;\n  };\n\n  return Model;\n}();\n\nexports.Model = Model;\n\nfunction extractModelId(resourceName) {\n  return resourceName.split('/').pop();\n}","map":{"version":3,"sources":["/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/node_modules/firebase-admin/lib/machine-learning/machine-learning.js"],"names":["Object","defineProperty","exports","value","Model","MachineLearning","index_1","require","error_1","validator","deep_copy_1","utils","machine_learning_api_client_1","machine_learning_utils_1","app","isNonNullObject","FirebaseError","code","message","appInternal","client","MachineLearningApiClient","prototype","get","enumerable","configurable","createModel","model","_this","signUrlIfPresent","then","modelContent","operation","handleOperation","modelResponse","updateModel","modelId","updateMask","generateUpdateMask","publishModel","setPublishStatus","unpublishModel","getModel","listModels","options","resp","FirebaseMachineLearningError","JSON","stringify","models","map","rs","result","nextPageToken","pageToken","deleteModel","publish","state","published","modelOptions","deepCopy","isGcsTfliteModelOptions","signUrl","tfliteModel","gcsTfliteUri","uri","catch","err","Promise","resolve","unsignedUrl","MINUTES_IN_MILLIS","URL_VALID_DURATION","gcsRegex","matches","exec","bucketName","blobName","bucket","getStorage","blob","file","getSignedUrl","action","expires","Date","now","validateAndClone","extractModelId","name","displayName","tags","createTime","toUTCString","updateTime","_a","_b","validationError","etag","modelHash","activeOperations","length","toJSON","jsonModel","locked","waitForUnlocked","maxTimeMillis","wait","isNonEmptyString","tmpModel","automlModel","resourceName","split","pop"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACG,eAAR,GAA0B,KAAK,CAA/C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAArB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,oBAAD,CAAzB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIK,6BAA6B,GAAGL,OAAO,CAAC,+BAAD,CAA3C;;AACA,IAAIM,wBAAwB,GAAGN,OAAO,CAAC,0BAAD,CAAtC;AACA;AACA;AACA;;;AACA,IAAIF,eAAe;AAAG;AAAe,YAAY;AAC7C;AACJ;AACA;AACA;AACA;AACI,WAASA,eAAT,CAAyBS,GAAzB,EAA8B;AAC1B,QAAI,CAACL,SAAS,CAACM,eAAV,CAA0BD,GAA1B,CAAD,IAAmC,EAAE,aAAaA,GAAf,CAAvC,EAA4D;AACxD,YAAM,IAAIN,OAAO,CAACQ,aAAZ,CAA0B;AAC5BC,QAAAA,IAAI,EAAE,mCADsB;AAE5BC,QAAAA,OAAO,EAAE,gEACL;AAHwB,OAA1B,CAAN;AAKH;;AACD,SAAKC,WAAL,GAAmBL,GAAnB;AACA,SAAKM,MAAL,GAAc,IAAIR,6BAA6B,CAACS,wBAAlC,CAA2DP,GAA3D,CAAd;AACH;;AACDd,EAAAA,MAAM,CAACC,cAAP,CAAsBI,eAAe,CAACiB,SAAtC,EAAiD,KAAjD,EAAwD;AACpD;AACR;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKJ,WAAZ;AACH,KAPmD;AAQpDK,IAAAA,UAAU,EAAE,KARwC;AASpDC,IAAAA,YAAY,EAAE;AATsC,GAAxD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACIpB,EAAAA,eAAe,CAACiB,SAAhB,CAA0BI,WAA1B,GAAwC,UAAUC,KAAV,EAAiB;AACrD,QAAIC,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKC,gBAAL,CAAsBF,KAAtB,EACFG,IADE,CACG,UAAUC,YAAV,EAAwB;AAAE,aAAOH,KAAK,CAACR,MAAN,CAAaM,WAAb,CAAyBK,YAAzB,CAAP;AAAgD,KAD7E,EAEFD,IAFE,CAEG,UAAUE,SAAV,EAAqB;AAAE,aAAOJ,KAAK,CAACR,MAAN,CAAaa,eAAb,CAA6BD,SAA7B,CAAP;AAAiD,KAF3E,EAGFF,IAHE,CAGG,UAAUI,aAAV,EAAyB;AAAE,aAAO,IAAI9B,KAAJ,CAAU8B,aAAV,EAAyBN,KAAK,CAACR,MAA/B,CAAP;AAAgD,KAH9E,CAAP;AAIH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIf,EAAAA,eAAe,CAACiB,SAAhB,CAA0Ba,WAA1B,GAAwC,UAAUC,OAAV,EAAmBT,KAAnB,EAA0B;AAC9D,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAIS,UAAU,GAAG1B,KAAK,CAAC2B,kBAAN,CAAyBX,KAAzB,CAAjB;AACA,WAAO,KAAKE,gBAAL,CAAsBF,KAAtB,EACFG,IADE,CACG,UAAUC,YAAV,EAAwB;AAAE,aAAOH,KAAK,CAACR,MAAN,CAAae,WAAb,CAAyBC,OAAzB,EAAkCL,YAAlC,EAAgDM,UAAhD,CAAP;AAAqE,KADlG,EAEFP,IAFE,CAEG,UAAUE,SAAV,EAAqB;AAAE,aAAOJ,KAAK,CAACR,MAAN,CAAaa,eAAb,CAA6BD,SAA7B,CAAP;AAAiD,KAF3E,EAGFF,IAHE,CAGG,UAAUI,aAAV,EAAyB;AAAE,aAAO,IAAI9B,KAAJ,CAAU8B,aAAV,EAAyBN,KAAK,CAACR,MAA/B,CAAP;AAAgD,KAH9E,CAAP;AAIH,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIf,EAAAA,eAAe,CAACiB,SAAhB,CAA0BiB,YAA1B,GAAyC,UAAUH,OAAV,EAAmB;AACxD,WAAO,KAAKI,gBAAL,CAAsBJ,OAAtB,EAA+B,IAA/B,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI/B,EAAAA,eAAe,CAACiB,SAAhB,CAA0BmB,cAA1B,GAA2C,UAAUL,OAAV,EAAmB;AAC1D,WAAO,KAAKI,gBAAL,CAAsBJ,OAAtB,EAA+B,KAA/B,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI/B,EAAAA,eAAe,CAACiB,SAAhB,CAA0BoB,QAA1B,GAAqC,UAAUN,OAAV,EAAmB;AACpD,QAAIR,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKR,MAAL,CAAYsB,QAAZ,CAAqBN,OAArB,EACFN,IADE,CACG,UAAUI,aAAV,EAAyB;AAAE,aAAO,IAAI9B,KAAJ,CAAU8B,aAAV,EAAyBN,KAAK,CAACR,MAA/B,CAAP;AAAgD,KAD9E,CAAP;AAEH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIf,EAAAA,eAAe,CAACiB,SAAhB,CAA0BqB,UAA1B,GAAuC,UAAUC,OAAV,EAAmB;AACtD,QAAIhB,KAAK,GAAG,IAAZ;;AACA,QAAIgB,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,MAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,WAAO,KAAKxB,MAAL,CAAYuB,UAAZ,CAAuBC,OAAvB,EACFd,IADE,CACG,UAAUe,IAAV,EAAgB;AACtB,UAAI,CAACpC,SAAS,CAACM,eAAV,CAA0B8B,IAA1B,CAAL,EAAsC;AAClC,cAAM,IAAIhC,wBAAwB,CAACiC,4BAA7B,CAA0D,kBAA1D,EAA8E,kCAAkCC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAhH,CAAN;AACH;;AACD,UAAII,MAAM,GAAG,EAAb;;AACA,UAAIJ,IAAI,CAACI,MAAT,EAAiB;AACbA,QAAAA,MAAM,GAAGJ,IAAI,CAACI,MAAL,CAAYC,GAAZ,CAAgB,UAAUC,EAAV,EAAc;AAAE,iBAAO,IAAI/C,KAAJ,CAAU+C,EAAV,EAAcvB,KAAK,CAACR,MAApB,CAAP;AAAqC,SAArE,CAAT;AACH;;AACD,UAAIgC,MAAM,GAAG;AAAEH,QAAAA,MAAM,EAAEA;AAAV,OAAb;;AACA,UAAIJ,IAAI,CAACQ,aAAT,EAAwB;AACpBD,QAAAA,MAAM,CAACE,SAAP,GAAmBT,IAAI,CAACQ,aAAxB;AACH;;AACD,aAAOD,MAAP;AACH,KAdM,CAAP;AAeH,GAlBD;AAmBA;AACJ;AACA;AACA;AACA;;;AACI/C,EAAAA,eAAe,CAACiB,SAAhB,CAA0BiC,WAA1B,GAAwC,UAAUnB,OAAV,EAAmB;AACvD,WAAO,KAAKhB,MAAL,CAAYmC,WAAZ,CAAwBnB,OAAxB,CAAP;AACH,GAFD;;AAGA/B,EAAAA,eAAe,CAACiB,SAAhB,CAA0BkB,gBAA1B,GAA6C,UAAUJ,OAAV,EAAmBoB,OAAnB,EAA4B;AACrE,QAAI5B,KAAK,GAAG,IAAZ;;AACA,QAAIS,UAAU,GAAG,CAAC,iBAAD,CAAjB;AACA,QAAIO,OAAO,GAAG;AAAEa,MAAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAEF;AAAb;AAAT,KAAd;AACA,WAAO,KAAKpC,MAAL,CAAYe,WAAZ,CAAwBC,OAAxB,EAAiCQ,OAAjC,EAA0CP,UAA1C,EACFP,IADE,CACG,UAAUE,SAAV,EAAqB;AAAE,aAAOJ,KAAK,CAACR,MAAN,CAAaa,eAAb,CAA6BD,SAA7B,CAAP;AAAiD,KAD3E,EAEFF,IAFE,CAEG,UAAUI,aAAV,EAAyB;AAAE,aAAO,IAAI9B,KAAJ,CAAU8B,aAAV,EAAyBN,KAAK,CAACR,MAA/B,CAAP;AAAgD,KAF9E,CAAP;AAGH,GAPD;;AAQAf,EAAAA,eAAe,CAACiB,SAAhB,CAA0BO,gBAA1B,GAA6C,UAAUe,OAAV,EAAmB;AAC5D,QAAIe,YAAY,GAAGjD,WAAW,CAACkD,QAAZ,CAAqBhB,OAArB,CAAnB;;AACA,QAAIhC,6BAA6B,CAACiD,uBAA9B,CAAsDF,YAAtD,CAAJ,EAAyE;AACrE,aAAO,KAAKG,OAAL,CAAaH,YAAY,CAACI,WAAb,CAAyBC,YAAtC,EACFlC,IADE,CACG,UAAUmC,GAAV,EAAe;AACrBN,QAAAA,YAAY,CAACI,WAAb,CAAyBC,YAAzB,GAAwCC,GAAxC;AACA,eAAON,YAAP;AACH,OAJM,EAKFO,KALE,CAKI,UAAUC,GAAV,EAAe;AACtB,cAAM,IAAItD,wBAAwB,CAACiC,4BAA7B,CAA0D,gBAA1D,EAA4E,sCAAsCqB,GAAG,CAACjD,OAAtH,CAAN;AACH,OAPM,CAAP;AAQH;;AACD,WAAOkD,OAAO,CAACC,OAAR,CAAgBV,YAAhB,CAAP;AACH,GAbD;;AAcAtD,EAAAA,eAAe,CAACiB,SAAhB,CAA0BwC,OAA1B,GAAoC,UAAUQ,WAAV,EAAuB;AACvD,QAAIC,iBAAiB,GAAG,KAAK,IAA7B;AACA,QAAIC,kBAAkB,GAAG,KAAKD,iBAA9B;AACA,QAAIE,QAAQ,GAAG,oCAAf;AACA,QAAIC,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcL,WAAd,CAAd;;AACA,QAAI,CAACI,OAAL,EAAc;AACV,YAAM,IAAI7D,wBAAwB,CAACiC,4BAA7B,CAA0D,kBAA1D,EAA8E,2BAA2BwB,WAAzG,CAAN;AACH;;AACD,QAAIM,UAAU,GAAGF,OAAO,CAAC,CAAD,CAAxB;AACA,QAAIG,QAAQ,GAAGH,OAAO,CAAC,CAAD,CAAtB;AACA,QAAII,MAAM,GAAGxE,OAAO,CAACyE,UAAR,CAAmB,KAAKjE,GAAxB,EAA6BgE,MAA7B,CAAoCF,UAApC,CAAb;AACA,QAAII,IAAI,GAAGF,MAAM,CAACG,IAAP,CAAYJ,QAAZ,CAAX;AACA,WAAOG,IAAI,CAACE,YAAL,CAAkB;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,OAAO,EAAEC,IAAI,CAACC,GAAL,KAAad;AAFD,KAAlB,EAGJ1C,IAHI,CAGC,UAAUgC,OAAV,EAAmB;AAAE,aAAOA,OAAO,CAAC,CAAD,CAAd;AAAoB,KAH1C,CAAP;AAIH,GAhBD;;AAiBA,SAAOzD,eAAP;AACH,CAzKoC,EAArC;;AA0KAH,OAAO,CAACG,eAAR,GAA0BA,eAA1B;AACA;AACA;AACA;;AACA,IAAID,KAAK;AAAG;AAAe,YAAY;AACnC;AACJ;AACA;AACI,WAASA,KAAT,CAAeuB,KAAf,EAAsBP,MAAtB,EAA8B;AAC1B,SAAKO,KAAL,GAAavB,KAAK,CAACmF,gBAAN,CAAuB5D,KAAvB,CAAb;AACA,SAAKP,MAAL,GAAcA,MAAd;AACH;;AACDpB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,SAAvC,EAAkD;AAC9C;AACAC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOiE,cAAc,CAAC,KAAK7D,KAAL,CAAW8D,IAAZ,CAArB;AACH,KAJ6C;AAK9CjE,IAAAA,UAAU,EAAE,KALkC;AAM9CC,IAAAA,YAAY,EAAE;AANgC,GAAlD;AAQAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,aAAvC,EAAsD;AAClD;AACR;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,KAAL,CAAW+D,WAAlB;AACH,KAPiD;AAQlDlE,IAAAA,UAAU,EAAE,KARsC;AASlDC,IAAAA,YAAY,EAAE;AAToC,GAAtD;AAWAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,MAAvC,EAA+C;AAC3C;AACR;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,KAAL,CAAWgE,IAAX,IAAmB,EAA1B;AACH,KAP0C;AAQ3CnE,IAAAA,UAAU,EAAE,KAR+B;AAS3CC,IAAAA,YAAY,EAAE;AAT6B,GAA/C;AAWAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,YAAvC,EAAqD;AACjD;AACAC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,IAAI8D,IAAJ,CAAS,KAAK1D,KAAL,CAAWiE,UAApB,EAAgCC,WAAhC,EAAP;AACH,KAJgD;AAKjDrE,IAAAA,UAAU,EAAE,KALqC;AAMjDC,IAAAA,YAAY,EAAE;AANmC,GAArD;AAQAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,YAAvC,EAAqD;AACjD;AACAC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,IAAI8D,IAAJ,CAAS,KAAK1D,KAAL,CAAWmE,UAApB,EAAgCD,WAAhC,EAAP;AACH,KAJgD;AAKjDrE,IAAAA,UAAU,EAAE,KALqC;AAMjDC,IAAAA,YAAY,EAAE;AANmC,GAArD;AAQAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,iBAAvC,EAA0D;AACtD;AACAC,IAAAA,GAAG,EAAE,YAAY;AACb,UAAIwE,EAAJ,EAAQC,EAAR;;AACA,aAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKpE,KAAL,CAAW8B,KAAjB,MAA4B,IAA5B,IAAoCsC,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACE,eAAtE,MAA2F,IAA3F,IAAmGD,EAAE,KAAK,KAAK,CAA/G,GAAmH,KAAK,CAAxH,GAA4HA,EAAE,CAAC9E,OAAtI;AACH,KALqD;AAMtDM,IAAAA,UAAU,EAAE,KAN0C;AAOtDC,IAAAA,YAAY,EAAE;AAPwC,GAA1D;AASAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,WAAvC,EAAoD;AAChD;AACAC,IAAAA,GAAG,EAAE,YAAY;AACb,UAAIwE,EAAJ;;AACA,aAAO,CAAC,CAACA,EAAE,GAAG,KAAKpE,KAAL,CAAW8B,KAAjB,MAA4B,IAA5B,IAAoCsC,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACrC,SAAjE,KAA+E,KAAtF;AACH,KAL+C;AAMhDlC,IAAAA,UAAU,EAAE,KANoC;AAOhDC,IAAAA,YAAY,EAAE;AAPkC,GAApD;AASAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,MAAvC,EAA+C;AAC3C;AACR;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,KAAL,CAAWuE,IAAlB;AACH,KAP0C;AAQ3C1E,IAAAA,UAAU,EAAE,KAR+B;AAS3CC,IAAAA,YAAY,EAAE;AAT6B,GAA/C;AAWAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,WAAvC,EAAoD;AAChD;AACR;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,KAAL,CAAWwE,SAAlB;AACH,KAP+C;AAQhD3E,IAAAA,UAAU,EAAE,KARoC;AAShDC,IAAAA,YAAY,EAAE;AATkC,GAApD;AAWAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,aAAvC,EAAsD;AAClD;AACAC,IAAAA,GAAG,EAAE,YAAY;AACb;AACA,aAAOb,WAAW,CAACkD,QAAZ,CAAqB,KAAKjC,KAAL,CAAWoC,WAAhC,CAAP;AACH,KALiD;AAMlDvC,IAAAA,UAAU,EAAE,KANsC;AAOlDC,IAAAA,YAAY,EAAE;AAPoC,GAAtD;AASAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBG,KAAK,CAACkB,SAA5B,EAAuC,QAAvC,EAAiD;AAC7C;AACR;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,UAAIwE,EAAJ,EAAQC,EAAR;;AACA,aAAO,CAAC,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKpE,KAAL,CAAWyE,gBAAjB,MAAuC,IAAvC,IAA+CL,EAAE,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,EAAE,CAACM,MAAjF,MAA6F,IAA7F,IAAqGL,EAAE,KAAK,KAAK,CAAjH,GAAqHA,EAArH,GAA0H,CAA3H,IAAgI,CAAvI;AACH,KAR4C;AAS7CxE,IAAAA,UAAU,EAAE,KATiC;AAU7CC,IAAAA,YAAY,EAAE;AAV+B,GAAjD;AAYA;AACJ;AACA;;AACIrB,EAAAA,KAAK,CAACkB,SAAN,CAAgBgF,MAAhB,GAAyB,YAAY;AACjC;AACA;AACA,QAAIC,SAAS,GAAG;AACZnE,MAAAA,OAAO,EAAE,KAAKA,OADF;AAEZsD,MAAAA,WAAW,EAAE,KAAKA,WAFN;AAGZC,MAAAA,IAAI,EAAE,KAAKA,IAHC;AAIZC,MAAAA,UAAU,EAAE,KAAKA,UAJL;AAKZE,MAAAA,UAAU,EAAE,KAAKA,UALL;AAMZpC,MAAAA,SAAS,EAAE,KAAKA,SANJ;AAOZwC,MAAAA,IAAI,EAAE,KAAKA,IAPC;AAQZM,MAAAA,MAAM,EAAE,KAAKA;AARD,KAAhB,CAHiC,CAajC;;AACA,QAAI,KAAKP,eAAT,EAA0B;AACtBM,MAAAA,SAAS,CAAC,iBAAD,CAAT,GAA+B,KAAKN,eAApC;AACH;;AACD,QAAI,KAAKE,SAAT,EAAoB;AAChBI,MAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,KAAKJ,SAA9B;AACH;;AACD,QAAI,KAAKpC,WAAT,EAAsB;AAClBwC,MAAAA,SAAS,CAAC,aAAD,CAAT,GAA2B,KAAKxC,WAAhC;AACH;;AACD,WAAOwC,SAAP;AACH,GAxBD;AAyBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInG,EAAAA,KAAK,CAACkB,SAAN,CAAgBmF,eAAhB,GAAkC,UAAUC,aAAV,EAAyB;AACvD,QAAI9E,KAAK,GAAG,IAAZ;;AACA,QAAImE,EAAJ,EAAQC,EAAR;;AACA,QAAI,CAAC,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKpE,KAAL,CAAWyE,gBAAjB,MAAuC,IAAvC,IAA+CL,EAAE,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,EAAE,CAACM,MAAjF,MAA6F,IAA7F,IAAqGL,EAAE,KAAK,KAAK,CAAjH,GAAqHA,EAArH,GAA0H,CAA3H,IAAgI,CAApI,EAAuI;AACnI;AACA;AACA;AACA,aAAO,KAAK5E,MAAL,CAAYa,eAAZ,CAA4B,KAAKN,KAAL,CAAWyE,gBAAX,CAA4B,CAA5B,CAA5B,EAA4D;AAAEO,QAAAA,IAAI,EAAE,IAAR;AAAcD,QAAAA,aAAa,EAAEA;AAA7B,OAA5D,EACF5E,IADE,CACG,UAAUI,aAAV,EAAyB;AAC/BN,QAAAA,KAAK,CAACD,KAAN,GAAcvB,KAAK,CAACmF,gBAAN,CAAuBrD,aAAvB,CAAd;AACH,OAHM,CAAP;AAIH;;AACD,WAAOkC,OAAO,CAACC,OAAR,EAAP;AACH,GAbD;;AAcAjE,EAAAA,KAAK,CAACmF,gBAAN,GAAyB,UAAU5D,KAAV,EAAiB;AACtC,QAAI,CAAClB,SAAS,CAACM,eAAV,CAA0BY,KAA1B,CAAD,IACA,CAAClB,SAAS,CAACmG,gBAAV,CAA2BjF,KAAK,CAAC8D,IAAjC,CADD,IAEA,CAAChF,SAAS,CAACmG,gBAAV,CAA2BjF,KAAK,CAACiE,UAAjC,CAFD,IAGA,CAACnF,SAAS,CAACmG,gBAAV,CAA2BjF,KAAK,CAACmE,UAAjC,CAHD,IAIA,CAACrF,SAAS,CAACmG,gBAAV,CAA2BjF,KAAK,CAAC+D,WAAjC,CAJD,IAKA,CAACjF,SAAS,CAACmG,gBAAV,CAA2BjF,KAAK,CAACuE,IAAjC,CALL,EAK6C;AACzC,YAAM,IAAIrF,wBAAwB,CAACiC,4BAA7B,CAA0D,yBAA1D,EAAqF,6BAA6BC,IAAI,CAACC,SAAL,CAAerB,KAAf,CAAlH,CAAN;AACH;;AACD,QAAIkF,QAAQ,GAAGnG,WAAW,CAACkD,QAAZ,CAAqBjC,KAArB,CAAf,CATsC,CAUtC;AACA;;AACA,QAAIA,KAAK,CAACoC,WAAN,IACA,CAACtD,SAAS,CAACmG,gBAAV,CAA2BjF,KAAK,CAACoC,WAAN,CAAkBC,YAA7C,CADD,IAEA,CAACvD,SAAS,CAACmG,gBAAV,CAA2BjF,KAAK,CAACoC,WAAN,CAAkB+C,WAA7C,CAFL,EAEgE;AAC5D;AACA,aAAOD,QAAQ,CAAC9C,WAAhB;AACH,KAjBqC,CAkBtC;;;AACA,QAAI8C,QAAQ,CAAC,OAAD,CAAZ,EAAuB;AACnB,aAAOA,QAAQ,CAAC,OAAD,CAAf;AACH;;AACD,WAAOA,QAAP;AACH,GAvBD;;AAwBA,SAAOzG,KAAP;AACH,CA/L0B,EAA3B;;AAgMAF,OAAO,CAACE,KAAR,GAAgBA,KAAhB;;AACA,SAASoF,cAAT,CAAwBuB,YAAxB,EAAsC;AAClC,SAAOA,YAAY,CAACC,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,EAAP;AACH","sourcesContent":["/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Model = exports.MachineLearning = void 0;\nvar index_1 = require(\"../storage/index\");\nvar error_1 = require(\"../utils/error\");\nvar validator = require(\"../utils/validator\");\nvar deep_copy_1 = require(\"../utils/deep-copy\");\nvar utils = require(\"../utils\");\nvar machine_learning_api_client_1 = require(\"./machine-learning-api-client\");\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\n/**\n * The Firebase `MachineLearning` service interface.\n */\nvar MachineLearning = /** @class */ (function () {\n    /**\n     * @param app - The app for this ML service.\n     * @constructor\n     * @internal\n     */\n    function MachineLearning(app) {\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseError({\n                code: 'machine-learning/invalid-argument',\n                message: 'First argument passed to admin.machineLearning() must be a ' +\n                    'valid Firebase app instance.',\n            });\n        }\n        this.appInternal = app;\n        this.client = new machine_learning_api_client_1.MachineLearningApiClient(app);\n    }\n    Object.defineProperty(MachineLearning.prototype, \"app\", {\n        /**\n         *  The {@link firebase-admin.app#App} associated with the current `MachineLearning`\n         *  service instance.\n         */\n        get: function () {\n            return this.appInternal;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Creates a model in the current Firebase project.\n     *\n     * @param model - The model to create.\n     *\n     * @returns A Promise fulfilled with the created model.\n     */\n    MachineLearning.prototype.createModel = function (model) {\n        var _this = this;\n        return this.signUrlIfPresent(model)\n            .then(function (modelContent) { return _this.client.createModel(modelContent); })\n            .then(function (operation) { return _this.client.handleOperation(operation); })\n            .then(function (modelResponse) { return new Model(modelResponse, _this.client); });\n    };\n    /**\n     * Updates a model's metadata or model file.\n     *\n     * @param modelId - The ID of the model to update.\n     * @param model - The model fields to update.\n     *\n     * @returns A Promise fulfilled with the updated model.\n     */\n    MachineLearning.prototype.updateModel = function (modelId, model) {\n        var _this = this;\n        var updateMask = utils.generateUpdateMask(model);\n        return this.signUrlIfPresent(model)\n            .then(function (modelContent) { return _this.client.updateModel(modelId, modelContent, updateMask); })\n            .then(function (operation) { return _this.client.handleOperation(operation); })\n            .then(function (modelResponse) { return new Model(modelResponse, _this.client); });\n    };\n    /**\n     * Publishes a Firebase ML model.\n     *\n     * A published model can be downloaded to client apps.\n     *\n     * @param modelId - The ID of the model to publish.\n     *\n     * @returns A Promise fulfilled with the published model.\n     */\n    MachineLearning.prototype.publishModel = function (modelId) {\n        return this.setPublishStatus(modelId, true);\n    };\n    /**\n     * Unpublishes a Firebase ML model.\n     *\n     * @param modelId - The ID of the model to unpublish.\n     *\n     * @returns A Promise fulfilled with the unpublished model.\n     */\n    MachineLearning.prototype.unpublishModel = function (modelId) {\n        return this.setPublishStatus(modelId, false);\n    };\n    /**\n     * Gets the model specified by the given ID.\n     *\n     * @param modelId - The ID of the model to get.\n     *\n     * @returns A Promise fulfilled with the model object.\n     */\n    MachineLearning.prototype.getModel = function (modelId) {\n        var _this = this;\n        return this.client.getModel(modelId)\n            .then(function (modelResponse) { return new Model(modelResponse, _this.client); });\n    };\n    /**\n     * Lists the current project's models.\n     *\n     * @param options - The listing options.\n     *\n     * @returns A promise that\n     *     resolves with the current (filtered) list of models and the next page\n     *     token. For the last page, an empty list of models and no page token\n     *     are returned.\n     */\n    MachineLearning.prototype.listModels = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        return this.client.listModels(options)\n            .then(function (resp) {\n            if (!validator.isNonNullObject(resp)) {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid ListModels response: \" + JSON.stringify(resp));\n            }\n            var models = [];\n            if (resp.models) {\n                models = resp.models.map(function (rs) { return new Model(rs, _this.client); });\n            }\n            var result = { models: models };\n            if (resp.nextPageToken) {\n                result.pageToken = resp.nextPageToken;\n            }\n            return result;\n        });\n    };\n    /**\n     * Deletes a model from the current project.\n     *\n     * @param modelId - The ID of the model to delete.\n     */\n    MachineLearning.prototype.deleteModel = function (modelId) {\n        return this.client.deleteModel(modelId);\n    };\n    MachineLearning.prototype.setPublishStatus = function (modelId, publish) {\n        var _this = this;\n        var updateMask = ['state.published'];\n        var options = { state: { published: publish } };\n        return this.client.updateModel(modelId, options, updateMask)\n            .then(function (operation) { return _this.client.handleOperation(operation); })\n            .then(function (modelResponse) { return new Model(modelResponse, _this.client); });\n    };\n    MachineLearning.prototype.signUrlIfPresent = function (options) {\n        var modelOptions = deep_copy_1.deepCopy(options);\n        if (machine_learning_api_client_1.isGcsTfliteModelOptions(modelOptions)) {\n            return this.signUrl(modelOptions.tfliteModel.gcsTfliteUri)\n                .then(function (uri) {\n                modelOptions.tfliteModel.gcsTfliteUri = uri;\n                return modelOptions;\n            })\n                .catch(function (err) {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('internal-error', \"Error during signing upload url: \" + err.message);\n            });\n        }\n        return Promise.resolve(modelOptions);\n    };\n    MachineLearning.prototype.signUrl = function (unsignedUrl) {\n        var MINUTES_IN_MILLIS = 60 * 1000;\n        var URL_VALID_DURATION = 10 * MINUTES_IN_MILLIS;\n        var gcsRegex = /^gs:\\/\\/([a-z0-9_.-]{3,63})\\/(.+)$/;\n        var matches = gcsRegex.exec(unsignedUrl);\n        if (!matches) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid unsigned url: \" + unsignedUrl);\n        }\n        var bucketName = matches[1];\n        var blobName = matches[2];\n        var bucket = index_1.getStorage(this.app).bucket(bucketName);\n        var blob = bucket.file(blobName);\n        return blob.getSignedUrl({\n            action: 'read',\n            expires: Date.now() + URL_VALID_DURATION,\n        }).then(function (signUrl) { return signUrl[0]; });\n    };\n    return MachineLearning;\n}());\nexports.MachineLearning = MachineLearning;\n/**\n * A Firebase ML Model output object.\n */\nvar Model = /** @class */ (function () {\n    /**\n     * @internal\n     */\n    function Model(model, client) {\n        this.model = Model.validateAndClone(model);\n        this.client = client;\n    }\n    Object.defineProperty(Model.prototype, \"modelId\", {\n        /** The ID of the model. */\n        get: function () {\n            return extractModelId(this.model.name);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"displayName\", {\n        /**\n         * The model's name. This is the name you use from your app to load the\n         * model.\n         */\n        get: function () {\n            return this.model.displayName;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"tags\", {\n        /**\n         * The model's tags, which can be used to group or filter models in list\n         * operations.\n         */\n        get: function () {\n            return this.model.tags || [];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"createTime\", {\n        /** The timestamp of the model's creation. */\n        get: function () {\n            return new Date(this.model.createTime).toUTCString();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"updateTime\", {\n        /** The timestamp of the model's most recent update. */\n        get: function () {\n            return new Date(this.model.updateTime).toUTCString();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"validationError\", {\n        /** Error message when model validation fails. */\n        get: function () {\n            var _a, _b;\n            return (_b = (_a = this.model.state) === null || _a === void 0 ? void 0 : _a.validationError) === null || _b === void 0 ? void 0 : _b.message;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"published\", {\n        /** True if the model is published. */\n        get: function () {\n            var _a;\n            return ((_a = this.model.state) === null || _a === void 0 ? void 0 : _a.published) || false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"etag\", {\n        /**\n         * The ETag identifier of the current version of the model. This value\n         * changes whenever you update any of the model's properties.\n         */\n        get: function () {\n            return this.model.etag;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"modelHash\", {\n        /**\n         * The hash of the model's `tflite` file. This value changes only when\n         * you upload a new TensorFlow Lite model.\n         */\n        get: function () {\n            return this.model.modelHash;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"tfliteModel\", {\n        /** Metadata about the model's TensorFlow Lite model file. */\n        get: function () {\n            // Make a copy so people can't directly modify the private this.model object.\n            return deep_copy_1.deepCopy(this.model.tfliteModel);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"locked\", {\n        /**\n         * True if the model is locked by a server-side operation. You can't make\n         * changes to a locked model. See {@link Model.waitForUnlocked}.\n         */\n        get: function () {\n            var _a, _b;\n            return ((_b = (_a = this.model.activeOperations) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Return the model as a JSON object.\n     */\n    Model.prototype.toJSON = function () {\n        // We can't just return this.model because it has extra fields and\n        // different formats etc. So we build the expected model object.\n        var jsonModel = {\n            modelId: this.modelId,\n            displayName: this.displayName,\n            tags: this.tags,\n            createTime: this.createTime,\n            updateTime: this.updateTime,\n            published: this.published,\n            etag: this.etag,\n            locked: this.locked,\n        };\n        // Also add possibly undefined fields if they exist.\n        if (this.validationError) {\n            jsonModel['validationError'] = this.validationError;\n        }\n        if (this.modelHash) {\n            jsonModel['modelHash'] = this.modelHash;\n        }\n        if (this.tfliteModel) {\n            jsonModel['tfliteModel'] = this.tfliteModel;\n        }\n        return jsonModel;\n    };\n    /**\n     * Wait for the model to be unlocked.\n     *\n     * @param maxTimeMillis - The maximum time in milliseconds to wait.\n     *     If not specified, a default maximum of 2 minutes is used.\n     *\n     * @returns A promise that resolves when the model is unlocked\n     *   or the maximum wait time has passed.\n     */\n    Model.prototype.waitForUnlocked = function (maxTimeMillis) {\n        var _this = this;\n        var _a, _b;\n        if (((_b = (_a = this.model.activeOperations) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {\n            // The client will always be defined on Models that have activeOperations\n            // because models with active operations came back from the server and\n            // were constructed with a non-empty client.\n            return this.client.handleOperation(this.model.activeOperations[0], { wait: true, maxTimeMillis: maxTimeMillis })\n                .then(function (modelResponse) {\n                _this.model = Model.validateAndClone(modelResponse);\n            });\n        }\n        return Promise.resolve();\n    };\n    Model.validateAndClone = function (model) {\n        if (!validator.isNonNullObject(model) ||\n            !validator.isNonEmptyString(model.name) ||\n            !validator.isNonEmptyString(model.createTime) ||\n            !validator.isNonEmptyString(model.updateTime) ||\n            !validator.isNonEmptyString(model.displayName) ||\n            !validator.isNonEmptyString(model.etag)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Invalid Model response: \" + JSON.stringify(model));\n        }\n        var tmpModel = deep_copy_1.deepCopy(model);\n        // If tflite Model is specified, it must have a source consisting of\n        // oneof {gcsTfliteUri, automlModel}\n        if (model.tfliteModel &&\n            !validator.isNonEmptyString(model.tfliteModel.gcsTfliteUri) &&\n            !validator.isNonEmptyString(model.tfliteModel.automlModel)) {\n            // If we have some other source, ignore the whole tfliteModel.\n            delete tmpModel.tfliteModel;\n        }\n        // Remove '@type' field. We don't need it.\n        if (tmpModel['@type']) {\n            delete tmpModel['@type'];\n        }\n        return tmpModel;\n    };\n    return Model;\n}());\nexports.Model = Model;\nfunction extractModelId(resourceName) {\n    return resourceName.split('/').pop();\n}\n"]},"metadata":{},"sourceType":"script"}