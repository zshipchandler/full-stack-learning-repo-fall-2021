{"ast":null,"code":"// Note: since nyc uses this module to output coverage, any lines\n// that are in the direct sync flow of nyc's outputCoverage are\n// ignored, since we can never get coverage for them.\n// grab a reference to node's real process object right away\nvar process = global.process; // some kind of non-node environment, just no-op\n\nif (typeof process !== 'object' || !process) {\n  module.exports = function () {};\n} else {\n  var assert = require('assert');\n\n  var signals = require('./signals.js');\n\n  var isWin = /^win/i.test(process.platform);\n\n  var EE = require('events');\n  /* istanbul ignore if */\n\n\n  if (typeof EE !== 'function') {\n    EE = EE.EventEmitter;\n  }\n\n  var emitter;\n\n  if (process.__signal_exit_emitter__) {\n    emitter = process.__signal_exit_emitter__;\n  } else {\n    emitter = process.__signal_exit_emitter__ = new EE();\n    emitter.count = 0;\n    emitter.emitted = {};\n  } // Because this emitter is a global, we have to check to see if a\n  // previous version of this library failed to enable infinite listeners.\n  // I know what you're about to say.  But literally everything about\n  // signal-exit is a compromise with evil.  Get used to it.\n\n\n  if (!emitter.infinite) {\n    emitter.setMaxListeners(Infinity);\n    emitter.infinite = true;\n  }\n\n  module.exports = function (cb, opts) {\n    if (global.process !== process) {\n      return;\n    }\n\n    assert.equal(typeof cb, 'function', 'a callback must be provided for exit handler');\n\n    if (loaded === false) {\n      load();\n    }\n\n    var ev = 'exit';\n\n    if (opts && opts.alwaysLast) {\n      ev = 'afterexit';\n    }\n\n    var remove = function () {\n      emitter.removeListener(ev, cb);\n\n      if (emitter.listeners('exit').length === 0 && emitter.listeners('afterexit').length === 0) {\n        unload();\n      }\n    };\n\n    emitter.on(ev, cb);\n    return remove;\n  };\n\n  var unload = function unload() {\n    if (!loaded || global.process !== process) {\n      return;\n    }\n\n    loaded = false;\n    signals.forEach(function (sig) {\n      try {\n        process.removeListener(sig, sigListeners[sig]);\n      } catch (er) {}\n    });\n    process.emit = originalProcessEmit;\n    process.reallyExit = originalProcessReallyExit;\n    emitter.count -= 1;\n  };\n\n  module.exports.unload = unload;\n\n  var emit = function emit(event, code, signal) {\n    if (emitter.emitted[event]) {\n      return;\n    }\n\n    emitter.emitted[event] = true;\n    emitter.emit(event, code, signal);\n  }; // { <signal>: <listener fn>, ... }\n\n\n  var sigListeners = {};\n  signals.forEach(function (sig) {\n    sigListeners[sig] = function listener() {\n      if (process !== global.process) {\n        return;\n      } // If there are no other listeners, an exit is coming!\n      // Simplest way: remove us and then re-send the signal.\n      // We know that this will kill the process, so we can\n      // safely emit now.\n\n\n      var listeners = process.listeners(sig);\n\n      if (listeners.length === emitter.count) {\n        unload();\n        emit('exit', null, sig);\n        /* istanbul ignore next */\n\n        emit('afterexit', null, sig);\n        /* istanbul ignore next */\n\n        if (isWin && sig === 'SIGHUP') {\n          // \"SIGHUP\" throws an `ENOSYS` error on Windows,\n          // so use a supported signal instead\n          sig = 'SIGINT';\n        }\n\n        process.kill(process.pid, sig);\n      }\n    };\n  });\n\n  module.exports.signals = function () {\n    return signals;\n  };\n\n  var loaded = false;\n\n  var load = function load() {\n    if (loaded || process !== global.process) {\n      return;\n    }\n\n    loaded = true; // This is the number of onSignalExit's that are in play.\n    // It's important so that we can count the correct number of\n    // listeners on signals, and don't wait for the other one to\n    // handle it instead of us.\n\n    emitter.count += 1;\n    signals = signals.filter(function (sig) {\n      try {\n        process.on(sig, sigListeners[sig]);\n        return true;\n      } catch (er) {\n        return false;\n      }\n    });\n    process.emit = processEmit;\n    process.reallyExit = processReallyExit;\n  };\n\n  module.exports.load = load;\n  var originalProcessReallyExit = process.reallyExit;\n\n  var processReallyExit = function processReallyExit(code) {\n    if (process !== global.process) {\n      return;\n    }\n\n    process.exitCode = code || 0;\n    emit('exit', process.exitCode, null);\n    /* istanbul ignore next */\n\n    emit('afterexit', process.exitCode, null);\n    /* istanbul ignore next */\n\n    originalProcessReallyExit.call(process, process.exitCode);\n  };\n\n  var originalProcessEmit = process.emit;\n\n  var processEmit = function processEmit(ev, arg) {\n    if (ev === 'exit' && process === global.process) {\n      if (arg !== undefined) {\n        process.exitCode = arg;\n      }\n\n      var ret = originalProcessEmit.apply(this, arguments);\n      emit('exit', process.exitCode, null);\n      /* istanbul ignore next */\n\n      emit('afterexit', process.exitCode, null);\n      return ret;\n    } else {\n      return originalProcessEmit.apply(this, arguments);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/node_modules/signal-exit/index.js"],"names":["process","global","module","exports","assert","require","signals","isWin","test","platform","EE","EventEmitter","emitter","__signal_exit_emitter__","count","emitted","infinite","setMaxListeners","Infinity","cb","opts","equal","loaded","load","ev","alwaysLast","remove","removeListener","listeners","length","unload","on","forEach","sig","sigListeners","er","emit","originalProcessEmit","reallyExit","originalProcessReallyExit","event","code","signal","listener","kill","pid","filter","processEmit","processReallyExit","exitCode","call","arg","undefined","ret","apply","arguments"],"mappings":"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","sourcesContent":["// Note: since nyc uses this module to output coverage, any lines\n// that are in the direct sync flow of nyc's outputCoverage are\n// ignored, since we can never get coverage for them.\n// grab a reference to node's real process object right away\nvar process = global.process\n// some kind of non-node environment, just no-op\nif (typeof process !== 'object' || !process) {\n  module.exports = function () {}\n} else {\n  var assert = require('assert')\n  var signals = require('./signals.js')\n  var isWin = /^win/i.test(process.platform)\n\n  var EE = require('events')\n  /* istanbul ignore if */\n  if (typeof EE !== 'function') {\n    EE = EE.EventEmitter\n  }\n\n  var emitter\n  if (process.__signal_exit_emitter__) {\n    emitter = process.__signal_exit_emitter__\n  } else {\n    emitter = process.__signal_exit_emitter__ = new EE()\n    emitter.count = 0\n    emitter.emitted = {}\n  }\n\n  // Because this emitter is a global, we have to check to see if a\n  // previous version of this library failed to enable infinite listeners.\n  // I know what you're about to say.  But literally everything about\n  // signal-exit is a compromise with evil.  Get used to it.\n  if (!emitter.infinite) {\n    emitter.setMaxListeners(Infinity)\n    emitter.infinite = true\n  }\n\n  module.exports = function (cb, opts) {\n    if (global.process !== process) {\n      return\n    }\n    assert.equal(typeof cb, 'function', 'a callback must be provided for exit handler')\n\n    if (loaded === false) {\n      load()\n    }\n\n    var ev = 'exit'\n    if (opts && opts.alwaysLast) {\n      ev = 'afterexit'\n    }\n\n    var remove = function () {\n      emitter.removeListener(ev, cb)\n      if (emitter.listeners('exit').length === 0 &&\n          emitter.listeners('afterexit').length === 0) {\n        unload()\n      }\n    }\n    emitter.on(ev, cb)\n\n    return remove\n  }\n\n  var unload = function unload () {\n    if (!loaded || global.process !== process) {\n      return\n    }\n    loaded = false\n\n    signals.forEach(function (sig) {\n      try {\n        process.removeListener(sig, sigListeners[sig])\n      } catch (er) {}\n    })\n    process.emit = originalProcessEmit\n    process.reallyExit = originalProcessReallyExit\n    emitter.count -= 1\n  }\n  module.exports.unload = unload\n\n  var emit = function emit (event, code, signal) {\n    if (emitter.emitted[event]) {\n      return\n    }\n    emitter.emitted[event] = true\n    emitter.emit(event, code, signal)\n  }\n\n  // { <signal>: <listener fn>, ... }\n  var sigListeners = {}\n  signals.forEach(function (sig) {\n    sigListeners[sig] = function listener () {\n      if (process !== global.process) {\n        return\n      }\n      // If there are no other listeners, an exit is coming!\n      // Simplest way: remove us and then re-send the signal.\n      // We know that this will kill the process, so we can\n      // safely emit now.\n      var listeners = process.listeners(sig)\n      if (listeners.length === emitter.count) {\n        unload()\n        emit('exit', null, sig)\n        /* istanbul ignore next */\n        emit('afterexit', null, sig)\n        /* istanbul ignore next */\n        if (isWin && sig === 'SIGHUP') {\n          // \"SIGHUP\" throws an `ENOSYS` error on Windows,\n          // so use a supported signal instead\n          sig = 'SIGINT'\n        }\n        process.kill(process.pid, sig)\n      }\n    }\n  })\n\n  module.exports.signals = function () {\n    return signals\n  }\n\n  var loaded = false\n\n  var load = function load () {\n    if (loaded || process !== global.process) {\n      return\n    }\n    loaded = true\n\n    // This is the number of onSignalExit's that are in play.\n    // It's important so that we can count the correct number of\n    // listeners on signals, and don't wait for the other one to\n    // handle it instead of us.\n    emitter.count += 1\n\n    signals = signals.filter(function (sig) {\n      try {\n        process.on(sig, sigListeners[sig])\n        return true\n      } catch (er) {\n        return false\n      }\n    })\n\n    process.emit = processEmit\n    process.reallyExit = processReallyExit\n  }\n  module.exports.load = load\n\n  var originalProcessReallyExit = process.reallyExit\n  var processReallyExit = function processReallyExit (code) {\n    if (process !== global.process) {\n      return\n    }\n    process.exitCode = code || 0\n    emit('exit', process.exitCode, null)\n    /* istanbul ignore next */\n    emit('afterexit', process.exitCode, null)\n    /* istanbul ignore next */\n    originalProcessReallyExit.call(process, process.exitCode)\n  }\n\n  var originalProcessEmit = process.emit\n  var processEmit = function processEmit (ev, arg) {\n    if (ev === 'exit' && process === global.process) {\n      if (arg !== undefined) {\n        process.exitCode = arg\n      }\n      var ret = originalProcessEmit.apply(this, arguments)\n      emit('exit', process.exitCode, null)\n      /* istanbul ignore next */\n      emit('afterexit', process.exitCode, null)\n      return ret\n    } else {\n      return originalProcessEmit.apply(this, arguments)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}