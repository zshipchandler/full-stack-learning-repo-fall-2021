{"ast":null,"code":"/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInstanceId = exports.InstanceId = void 0;\n/**\n * Firebase Instance ID service.\n *\n * @packageDocumentation\n */\n\nvar index_1 = require(\"../app/index\");\n\nvar instance_id_1 = require(\"./instance-id\");\n\nObject.defineProperty(exports, \"InstanceId\", {\n  enumerable: true,\n  get: function () {\n    return instance_id_1.InstanceId;\n  }\n});\n/**\n * Gets the {@link InstanceId} service for the default app or a given app.\n *\n * This API is deprecated. Developers are advised to use the\n * {@link firebase-admin.installations#getInstallations}\n * API to delete their instance IDs and Firebase installation IDs.\n *\n * `getInstanceId()` can be called with no arguments to access the default\n * app's `InstanceId` service or as `getInstanceId(app)` to access the\n * `InstanceId` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Instance ID service for the default app\n * const defaultInstanceId = getInstanceId();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Instance ID service for a given app\n * const otherInstanceId = getInstanceId(otherApp);\n *```\n *\n * This API is deprecated. Developers are advised to use the `admin.installations()`\n * API to delete their instance IDs and Firebase installation IDs.\n *\n * @param app - Optional app whose `InstanceId` service to\n *   return. If not provided, the default `InstanceId` service will be\n *   returned.\n *\n * @returns The default `InstanceId` service if\n *   no app is provided or the `InstanceId` service associated with the\n *   provided app.\n *\n * @deprecated Use {@link firebase-admin.installations#getInstallations} instead.\n */\n\nfunction getInstanceId(app) {\n  if (typeof app === 'undefined') {\n    app = index_1.getApp();\n  }\n\n  var firebaseApp = app;\n  return firebaseApp.getOrInitService('instanceId', function (app) {\n    return new instance_id_1.InstanceId(app);\n  });\n}\n\nexports.getInstanceId = getInstanceId;","map":{"version":3,"sources":["/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/node_modules/firebase-admin/lib/instance-id/index.js"],"names":["Object","defineProperty","exports","value","getInstanceId","InstanceId","index_1","require","instance_id_1","enumerable","get","app","getApp","firebaseApp","getOrInitService"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAACG,UAAR,GAAqB,KAAK,CAAlD;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,eAAD,CAA3B;;AACAP,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEO,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,YAAY;AAAE,WAAOF,aAAa,CAACH,UAArB;AAAkC;AAAzE,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,aAAT,CAAuBO,GAAvB,EAA4B;AACxB,MAAI,OAAOA,GAAP,KAAe,WAAnB,EAAgC;AAC5BA,IAAAA,GAAG,GAAGL,OAAO,CAACM,MAAR,EAAN;AACH;;AACD,MAAIC,WAAW,GAAGF,GAAlB;AACA,SAAOE,WAAW,CAACC,gBAAZ,CAA6B,YAA7B,EAA2C,UAAUH,GAAV,EAAe;AAAE,WAAO,IAAIH,aAAa,CAACH,UAAlB,CAA6BM,GAA7B,CAAP;AAA2C,GAAvG,CAAP;AACH;;AACDT,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getInstanceId = exports.InstanceId = void 0;\n/**\n * Firebase Instance ID service.\n *\n * @packageDocumentation\n */\nvar index_1 = require(\"../app/index\");\nvar instance_id_1 = require(\"./instance-id\");\nObject.defineProperty(exports, \"InstanceId\", { enumerable: true, get: function () { return instance_id_1.InstanceId; } });\n/**\n * Gets the {@link InstanceId} service for the default app or a given app.\n *\n * This API is deprecated. Developers are advised to use the\n * {@link firebase-admin.installations#getInstallations}\n * API to delete their instance IDs and Firebase installation IDs.\n *\n * `getInstanceId()` can be called with no arguments to access the default\n * app's `InstanceId` service or as `getInstanceId(app)` to access the\n * `InstanceId` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Instance ID service for the default app\n * const defaultInstanceId = getInstanceId();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Instance ID service for a given app\n * const otherInstanceId = getInstanceId(otherApp);\n *```\n *\n * This API is deprecated. Developers are advised to use the `admin.installations()`\n * API to delete their instance IDs and Firebase installation IDs.\n *\n * @param app - Optional app whose `InstanceId` service to\n *   return. If not provided, the default `InstanceId` service will be\n *   returned.\n *\n * @returns The default `InstanceId` service if\n *   no app is provided or the `InstanceId` service associated with the\n *   provided app.\n *\n * @deprecated Use {@link firebase-admin.installations#getInstallations} instead.\n */\nfunction getInstanceId(app) {\n    if (typeof app === 'undefined') {\n        app = index_1.getApp();\n    }\n    var firebaseApp = app;\n    return firebaseApp.getOrInitService('instanceId', function (app) { return new instance_id_1.InstanceId(app); });\n}\nexports.getInstanceId = getInstanceId;\n"]},"metadata":{},"sourceType":"script"}