{"ast":null,"code":"/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearGlobalAppDefaultCred = exports.refreshToken = exports.cert = exports.applicationDefault = void 0;\n\nvar credential_internal_1 = require(\"./credential-internal\");\n\nvar globalAppDefaultCred;\nvar globalCertCreds = {};\nvar globalRefreshTokenCreds = {};\n/**\n * Returns a credential created from the\n * {@link https://developers.google.com/identity/protocols/application-default-credentials |\n * Google Application Default Credentials}\n * that grants admin access to Firebase services. This credential can be used\n * in the call to {@link firebase-admin.app#initializeApp}.\n *\n * Google Application Default Credentials are available on any Google\n * infrastructure, such as Google App Engine and Google Compute Engine.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * initializeApp({\n *   credential: applicationDefault(),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via Google\n *   Application Default Credentials that can be used to initialize an app.\n */\n\nfunction applicationDefault(httpAgent) {\n  if (typeof globalAppDefaultCred === 'undefined') {\n    globalAppDefaultCred = credential_internal_1.getApplicationDefault(httpAgent);\n  }\n\n  return globalAppDefaultCred;\n}\n\nexports.applicationDefault = applicationDefault;\n/**\n * Returns a credential created from the provided service account that grants\n * admin access to Firebase services. This credential can be used in the call\n * to {@link firebase-admin.app#initializeApp}.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a service account key JSON file\n * const serviceAccount = require(\"path/to/serviceAccountKey.json\");\n * initializeApp({\n *   credential: cert(serviceAccount),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @example\n * ```javascript\n * // Providing a service account object inline\n * initializeApp({\n *   credential: cert({\n *     projectId: \"<PROJECT_ID>\",\n *     clientEmail: \"foo@<PROJECT_ID>.iam.gserviceaccount.com\",\n *     privateKey: \"-----BEGIN PRIVATE KEY-----<KEY>-----END PRIVATE KEY-----\\n\"\n *   }),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param serviceAccountPathOrObject - The path to a service\n *   account key JSON file or an object representing a service account key.\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\n\nfunction cert(serviceAccountPathOrObject, httpAgent) {\n  var stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\n\n  if (!(stringifiedServiceAccount in globalCertCreds)) {\n    globalCertCreds[stringifiedServiceAccount] = new credential_internal_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\n  }\n\n  return globalCertCreds[stringifiedServiceAccount];\n}\n\nexports.cert = cert;\n/**\n * Returns a credential created from the provided refresh token that grants\n * admin access to Firebase services. This credential can be used in the call\n * to {@link firebase-admin.app#initializeApp}.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a refresh token JSON file\n * const refreshToken = require(\"path/to/refreshToken.json\");\n * initializeApp({\n *   credential: refreshToken(refreshToken),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param refreshTokenPathOrObject - The path to a Google\n *   OAuth2 refresh token JSON file or an object representing a Google OAuth2\n *   refresh token.\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\n\nfunction refreshToken(refreshTokenPathOrObject, httpAgent) {\n  var stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\n\n  if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\n    globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_internal_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\n  }\n\n  return globalRefreshTokenCreds[stringifiedRefreshToken];\n}\n\nexports.refreshToken = refreshToken;\n/**\n * Clears the global ADC cache. Exported for testing.\n */\n\nfunction clearGlobalAppDefaultCred() {\n  globalAppDefaultCred = undefined;\n}\n\nexports.clearGlobalAppDefaultCred = clearGlobalAppDefaultCred;","map":{"version":3,"sources":["/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/node_modules/firebase-admin/lib/app/credential-factory.js"],"names":["Object","defineProperty","exports","value","clearGlobalAppDefaultCred","refreshToken","cert","applicationDefault","credential_internal_1","require","globalAppDefaultCred","globalCertCreds","globalRefreshTokenCreds","httpAgent","getApplicationDefault","serviceAccountPathOrObject","stringifiedServiceAccount","JSON","stringify","ServiceAccountCredential","refreshTokenPathOrObject","stringifiedRefreshToken","RefreshTokenCredential","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,yBAAR,GAAoCF,OAAO,CAACG,YAAR,GAAuBH,OAAO,CAACI,IAAR,GAAeJ,OAAO,CAACK,kBAAR,GAA6B,KAAK,CAA5G;;AACA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,uBAAD,CAAnC;;AACA,IAAIC,oBAAJ;AACA,IAAIC,eAAe,GAAG,EAAtB;AACA,IAAIC,uBAAuB,GAAG,EAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASL,kBAAT,CAA4BM,SAA5B,EAAuC;AACnC,MAAI,OAAOH,oBAAP,KAAgC,WAApC,EAAiD;AAC7CA,IAAAA,oBAAoB,GAAGF,qBAAqB,CAACM,qBAAtB,CAA4CD,SAA5C,CAAvB;AACH;;AACD,SAAOH,oBAAP;AACH;;AACDR,OAAO,CAACK,kBAAR,GAA6BA,kBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,IAAT,CAAcS,0BAAd,EAA0CF,SAA1C,EAAqD;AACjD,MAAIG,yBAAyB,GAAGC,IAAI,CAACC,SAAL,CAAeH,0BAAf,CAAhC;;AACA,MAAI,EAAEC,yBAAyB,IAAIL,eAA/B,CAAJ,EAAqD;AACjDA,IAAAA,eAAe,CAACK,yBAAD,CAAf,GAA6C,IAAIR,qBAAqB,CAACW,wBAA1B,CAAmDJ,0BAAnD,EAA+EF,SAA/E,CAA7C;AACH;;AACD,SAAOF,eAAe,CAACK,yBAAD,CAAtB;AACH;;AACDd,OAAO,CAACI,IAAR,GAAeA,IAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,YAAT,CAAsBe,wBAAtB,EAAgDP,SAAhD,EAA2D;AACvD,MAAIQ,uBAAuB,GAAGJ,IAAI,CAACC,SAAL,CAAeE,wBAAf,CAA9B;;AACA,MAAI,EAAEC,uBAAuB,IAAIT,uBAA7B,CAAJ,EAA2D;AACvDA,IAAAA,uBAAuB,CAACS,uBAAD,CAAvB,GAAmD,IAAIb,qBAAqB,CAACc,sBAA1B,CAAiDF,wBAAjD,EAA2EP,SAA3E,CAAnD;AACH;;AACD,SAAOD,uBAAuB,CAACS,uBAAD,CAA9B;AACH;;AACDnB,OAAO,CAACG,YAAR,GAAuBA,YAAvB;AACA;AACA;AACA;;AACA,SAASD,yBAAT,GAAqC;AACjCM,EAAAA,oBAAoB,GAAGa,SAAvB;AACH;;AACDrB,OAAO,CAACE,yBAAR,GAAoCA,yBAApC","sourcesContent":["/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clearGlobalAppDefaultCred = exports.refreshToken = exports.cert = exports.applicationDefault = void 0;\nvar credential_internal_1 = require(\"./credential-internal\");\nvar globalAppDefaultCred;\nvar globalCertCreds = {};\nvar globalRefreshTokenCreds = {};\n/**\n * Returns a credential created from the\n * {@link https://developers.google.com/identity/protocols/application-default-credentials |\n * Google Application Default Credentials}\n * that grants admin access to Firebase services. This credential can be used\n * in the call to {@link firebase-admin.app#initializeApp}.\n *\n * Google Application Default Credentials are available on any Google\n * infrastructure, such as Google App Engine and Google Compute Engine.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * initializeApp({\n *   credential: applicationDefault(),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via Google\n *   Application Default Credentials that can be used to initialize an app.\n */\nfunction applicationDefault(httpAgent) {\n    if (typeof globalAppDefaultCred === 'undefined') {\n        globalAppDefaultCred = credential_internal_1.getApplicationDefault(httpAgent);\n    }\n    return globalAppDefaultCred;\n}\nexports.applicationDefault = applicationDefault;\n/**\n * Returns a credential created from the provided service account that grants\n * admin access to Firebase services. This credential can be used in the call\n * to {@link firebase-admin.app#initializeApp}.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a service account key JSON file\n * const serviceAccount = require(\"path/to/serviceAccountKey.json\");\n * initializeApp({\n *   credential: cert(serviceAccount),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @example\n * ```javascript\n * // Providing a service account object inline\n * initializeApp({\n *   credential: cert({\n *     projectId: \"<PROJECT_ID>\",\n *     clientEmail: \"foo@<PROJECT_ID>.iam.gserviceaccount.com\",\n *     privateKey: \"-----BEGIN PRIVATE KEY-----<KEY>-----END PRIVATE KEY-----\\n\"\n *   }),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param serviceAccountPathOrObject - The path to a service\n *   account key JSON file or an object representing a service account key.\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\nfunction cert(serviceAccountPathOrObject, httpAgent) {\n    var stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\n    if (!(stringifiedServiceAccount in globalCertCreds)) {\n        globalCertCreds[stringifiedServiceAccount] = new credential_internal_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\n    }\n    return globalCertCreds[stringifiedServiceAccount];\n}\nexports.cert = cert;\n/**\n * Returns a credential created from the provided refresh token that grants\n * admin access to Firebase services. This credential can be used in the call\n * to {@link firebase-admin.app#initializeApp}.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a refresh token JSON file\n * const refreshToken = require(\"path/to/refreshToken.json\");\n * initializeApp({\n *   credential: refreshToken(refreshToken),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param refreshTokenPathOrObject - The path to a Google\n *   OAuth2 refresh token JSON file or an object representing a Google OAuth2\n *   refresh token.\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\nfunction refreshToken(refreshTokenPathOrObject, httpAgent) {\n    var stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\n    if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\n        globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_internal_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\n    }\n    return globalRefreshTokenCreds[stringifiedRefreshToken];\n}\nexports.refreshToken = refreshToken;\n/**\n * Clears the global ADC cache. Exported for testing.\n */\nfunction clearGlobalAppDefaultCred() {\n    globalAppDefaultCred = undefined;\n}\nexports.clearGlobalAppDefaultCred = clearGlobalAppDefaultCred;\n"]},"metadata":{},"sourceType":"script"}