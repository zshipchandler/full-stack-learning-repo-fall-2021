{"ast":null,"code":"/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FIREBASE_CONFIG_VAR = exports.deleteApp = exports.getApps = exports.getApp = exports.initializeApp = exports.defaultAppStore = exports.AppStore = void 0;\n\nvar fs = require(\"fs\");\n\nvar validator = require(\"../utils/validator\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar credential_internal_1 = require(\"./credential-internal\");\n\nvar firebase_app_1 = require(\"./firebase-app\");\n\nvar DEFAULT_APP_NAME = '[DEFAULT]';\n\nvar AppStore =\n/** @class */\nfunction () {\n  function AppStore() {\n    this.appStore = new Map();\n  }\n\n  AppStore.prototype.initializeApp = function (options, appName) {\n    if (appName === void 0) {\n      appName = DEFAULT_APP_NAME;\n    }\n\n    if (typeof options === 'undefined') {\n      options = loadOptionsFromEnvVar();\n      options.credential = credential_internal_1.getApplicationDefault();\n    }\n\n    if (typeof appName !== 'string' || appName === '') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n    } else if (this.appStore.has(appName)) {\n      if (appName === DEFAULT_APP_NAME) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, 'The default Firebase app already exists. This means you called initializeApp() ' + 'more than once without providing an app name as the second argument. In most cases ' + 'you only need to call initializeApp() once. But if you do want to initialize ' + 'multiple apps, pass a second argument to initializeApp() to give each app a unique ' + 'name.');\n      } else {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, \"Firebase app named \\\"\" + appName + \"\\\" already exists. This means you called initializeApp() \" + 'more than once with the same app name as the second argument. Make sure you provide a ' + 'unique name every time you call initializeApp().');\n      }\n    }\n\n    var app = new firebase_app_1.FirebaseApp(options, appName, this);\n    this.appStore.set(app.name, app);\n    return app;\n  };\n\n  AppStore.prototype.getApp = function (appName) {\n    if (appName === void 0) {\n      appName = DEFAULT_APP_NAME;\n    }\n\n    if (typeof appName !== 'string' || appName === '') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n    } else if (!this.appStore.has(appName)) {\n      var errorMessage = appName === DEFAULT_APP_NAME ? 'The default Firebase app does not exist. ' : \"Firebase app named \\\"\" + appName + \"\\\" does not exist. \";\n      errorMessage += 'Make sure you call initializeApp() before using any of the Firebase services.';\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NO_APP, errorMessage);\n    }\n\n    return this.appStore.get(appName);\n  };\n\n  AppStore.prototype.getApps = function () {\n    // Return a copy so the caller cannot mutate the array\n    return Array.from(this.appStore.values());\n  };\n\n  AppStore.prototype.deleteApp = function (app) {\n    if (typeof app !== 'object' || app === null || !('options' in app)) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'Invalid app argument.');\n    } // Make sure the given app already exists.\n\n\n    var existingApp = getApp(app.name); // Delegate delete operation to the App instance itself. That will also remove the App\n    // instance from the AppStore.\n\n    return existingApp.delete();\n  };\n\n  AppStore.prototype.clearAllApps = function () {\n    var _this = this;\n\n    var promises = [];\n    this.getApps().forEach(function (app) {\n      promises.push(_this.deleteApp(app));\n    });\n    return Promise.all(promises).then();\n  };\n  /**\n   * Removes the specified App instance from the store. This is currently called by the\n   * {@link FirebaseApp.delete} method. Can be removed once the app deletion is handled\n   * entirely by the {@link deleteApp} top-level function.\n   */\n\n\n  AppStore.prototype.removeApp = function (appName) {\n    this.appStore.delete(appName);\n  };\n\n  return AppStore;\n}();\n\nexports.AppStore = AppStore;\nexports.defaultAppStore = new AppStore();\n\nfunction initializeApp(options, appName) {\n  if (appName === void 0) {\n    appName = DEFAULT_APP_NAME;\n  }\n\n  return exports.defaultAppStore.initializeApp(options, appName);\n}\n\nexports.initializeApp = initializeApp;\n\nfunction getApp(appName) {\n  if (appName === void 0) {\n    appName = DEFAULT_APP_NAME;\n  }\n\n  return exports.defaultAppStore.getApp(appName);\n}\n\nexports.getApp = getApp;\n\nfunction getApps() {\n  return exports.defaultAppStore.getApps();\n}\n\nexports.getApps = getApps;\n/**\n * Renders this given `App` unusable and frees the resources of\n * all associated services (though it does *not* clean up any backend\n * resources). When running the SDK locally, this method\n * must be called to ensure graceful termination of the process.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n */\n\nfunction deleteApp(app) {\n  return exports.defaultAppStore.deleteApp(app);\n}\n\nexports.deleteApp = deleteApp;\n/**\n * Constant holding the environment variable name with the default config.\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n * otherwise it will be assumed to be pointing to a file.\n */\n\nexports.FIREBASE_CONFIG_VAR = 'FIREBASE_CONFIG';\n/**\n * Parse the file pointed to by the FIREBASE_CONFIG_VAR, if it exists.\n * Or if the FIREBASE_CONFIG_ENV contains a valid JSON object, parse it directly.\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n * otherwise it will be assumed to be pointing to a file.\n */\n\nfunction loadOptionsFromEnvVar() {\n  var config = process.env[exports.FIREBASE_CONFIG_VAR];\n\n  if (!validator.isNonEmptyString(config)) {\n    return {};\n  }\n\n  try {\n    var contents = config.startsWith('{') ? config : fs.readFileSync(config, 'utf8');\n    return JSON.parse(contents);\n  } catch (error) {\n    // Throw a nicely formed error message if the file contents cannot be parsed\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Failed to parse app options file: ' + error);\n  }\n}","map":{"version":3,"sources":["/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/node_modules/firebase-admin/lib/app/lifecycle.js"],"names":["Object","defineProperty","exports","value","FIREBASE_CONFIG_VAR","deleteApp","getApps","getApp","initializeApp","defaultAppStore","AppStore","fs","require","validator","error_1","credential_internal_1","firebase_app_1","DEFAULT_APP_NAME","appStore","Map","prototype","options","appName","loadOptionsFromEnvVar","credential","getApplicationDefault","FirebaseAppError","AppErrorCodes","INVALID_APP_NAME","has","DUPLICATE_APP","app","FirebaseApp","set","name","errorMessage","NO_APP","get","Array","from","values","INVALID_ARGUMENT","existingApp","delete","clearAllApps","_this","promises","forEach","push","Promise","all","then","removeApp","config","process","env","isNonEmptyString","contents","startsWith","readFileSync","JSON","parse","error","INVALID_APP_OPTIONS"],"mappings":"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","sourcesContent":["/*! firebase-admin v10.0.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FIREBASE_CONFIG_VAR = exports.deleteApp = exports.getApps = exports.getApp = exports.initializeApp = exports.defaultAppStore = exports.AppStore = void 0;\nvar fs = require(\"fs\");\nvar validator = require(\"../utils/validator\");\nvar error_1 = require(\"../utils/error\");\nvar credential_internal_1 = require(\"./credential-internal\");\nvar firebase_app_1 = require(\"./firebase-app\");\nvar DEFAULT_APP_NAME = '[DEFAULT]';\nvar AppStore = /** @class */ (function () {\n    function AppStore() {\n        this.appStore = new Map();\n    }\n    AppStore.prototype.initializeApp = function (options, appName) {\n        if (appName === void 0) { appName = DEFAULT_APP_NAME; }\n        if (typeof options === 'undefined') {\n            options = loadOptionsFromEnvVar();\n            options.credential = credential_internal_1.getApplicationDefault();\n        }\n        if (typeof appName !== 'string' || appName === '') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n        }\n        else if (this.appStore.has(appName)) {\n            if (appName === DEFAULT_APP_NAME) {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, 'The default Firebase app already exists. This means you called initializeApp() ' +\n                    'more than once without providing an app name as the second argument. In most cases ' +\n                    'you only need to call initializeApp() once. But if you do want to initialize ' +\n                    'multiple apps, pass a second argument to initializeApp() to give each app a unique ' +\n                    'name.');\n            }\n            else {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, \"Firebase app named \\\"\" + appName + \"\\\" already exists. This means you called initializeApp() \" +\n                    'more than once with the same app name as the second argument. Make sure you provide a ' +\n                    'unique name every time you call initializeApp().');\n            }\n        }\n        var app = new firebase_app_1.FirebaseApp(options, appName, this);\n        this.appStore.set(app.name, app);\n        return app;\n    };\n    AppStore.prototype.getApp = function (appName) {\n        if (appName === void 0) { appName = DEFAULT_APP_NAME; }\n        if (typeof appName !== 'string' || appName === '') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n        }\n        else if (!this.appStore.has(appName)) {\n            var errorMessage = (appName === DEFAULT_APP_NAME)\n                ? 'The default Firebase app does not exist. ' : \"Firebase app named \\\"\" + appName + \"\\\" does not exist. \";\n            errorMessage += 'Make sure you call initializeApp() before using any of the Firebase services.';\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NO_APP, errorMessage);\n        }\n        return this.appStore.get(appName);\n    };\n    AppStore.prototype.getApps = function () {\n        // Return a copy so the caller cannot mutate the array\n        return Array.from(this.appStore.values());\n    };\n    AppStore.prototype.deleteApp = function (app) {\n        if (typeof app !== 'object' || app === null || !('options' in app)) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'Invalid app argument.');\n        }\n        // Make sure the given app already exists.\n        var existingApp = getApp(app.name);\n        // Delegate delete operation to the App instance itself. That will also remove the App\n        // instance from the AppStore.\n        return existingApp.delete();\n    };\n    AppStore.prototype.clearAllApps = function () {\n        var _this = this;\n        var promises = [];\n        this.getApps().forEach(function (app) {\n            promises.push(_this.deleteApp(app));\n        });\n        return Promise.all(promises).then();\n    };\n    /**\n     * Removes the specified App instance from the store. This is currently called by the\n     * {@link FirebaseApp.delete} method. Can be removed once the app deletion is handled\n     * entirely by the {@link deleteApp} top-level function.\n     */\n    AppStore.prototype.removeApp = function (appName) {\n        this.appStore.delete(appName);\n    };\n    return AppStore;\n}());\nexports.AppStore = AppStore;\nexports.defaultAppStore = new AppStore();\nfunction initializeApp(options, appName) {\n    if (appName === void 0) { appName = DEFAULT_APP_NAME; }\n    return exports.defaultAppStore.initializeApp(options, appName);\n}\nexports.initializeApp = initializeApp;\nfunction getApp(appName) {\n    if (appName === void 0) { appName = DEFAULT_APP_NAME; }\n    return exports.defaultAppStore.getApp(appName);\n}\nexports.getApp = getApp;\nfunction getApps() {\n    return exports.defaultAppStore.getApps();\n}\nexports.getApps = getApps;\n/**\n * Renders this given `App` unusable and frees the resources of\n * all associated services (though it does *not* clean up any backend\n * resources). When running the SDK locally, this method\n * must be called to ensure graceful termination of the process.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n */\nfunction deleteApp(app) {\n    return exports.defaultAppStore.deleteApp(app);\n}\nexports.deleteApp = deleteApp;\n/**\n * Constant holding the environment variable name with the default config.\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n * otherwise it will be assumed to be pointing to a file.\n */\nexports.FIREBASE_CONFIG_VAR = 'FIREBASE_CONFIG';\n/**\n * Parse the file pointed to by the FIREBASE_CONFIG_VAR, if it exists.\n * Or if the FIREBASE_CONFIG_ENV contains a valid JSON object, parse it directly.\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n * otherwise it will be assumed to be pointing to a file.\n */\nfunction loadOptionsFromEnvVar() {\n    var config = process.env[exports.FIREBASE_CONFIG_VAR];\n    if (!validator.isNonEmptyString(config)) {\n        return {};\n    }\n    try {\n        var contents = config.startsWith('{') ? config : fs.readFileSync(config, 'utf8');\n        return JSON.parse(contents);\n    }\n    catch (error) {\n        // Throw a nicely formed error message if the file contents cannot be parsed\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Failed to parse app options file: ' + error);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}