{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\n\nconst status_1 = require(\"./status\");\n\nconst protobuf = require(\"protobufjs\");\n\nclass GoogleError extends Error {\n  // Parse details field in google.rpc.status wire over gRPC medatadata.\n  // Promote google.rpc.ErrorInfo if exist.\n  static parseGRPCStatusDetails(err) {\n    const decoder = new GoogleErrorDecoder();\n\n    try {\n      if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n        const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n\n        if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n          err.statusDetails = statusDetailsObj.details;\n        }\n\n        if (statusDetailsObj && statusDetailsObj.errorInfo) {\n          err.reason = statusDetailsObj.errorInfo.reason;\n          err.domain = statusDetailsObj.errorInfo.domain;\n          err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n        }\n      }\n    } catch (decodeErr) {// ignoring the error\n    }\n\n    return err;\n  } // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static parseHttpError(json) {\n    const error = Object.assign(new GoogleError(json['error']['message']), json.error); // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n    // Rename \"detials\" to \"statusDetails\".\n\n    error.statusDetails = json['error']['details'];\n    delete error.details; // Promote the ErrorInfo fields as error's top-level.\n\n    const errorInfo = !json['error']['details'] ? undefined : json['error']['details'].find(item => item['@type'] === 'type.googleapis.com/google.rpc.ErrorInfo');\n\n    if (errorInfo) {\n      error.reason = errorInfo.reason;\n      error.domain = errorInfo.domain; // error.metadata has been occupied for gRPC metadata, so we use\n      // errorInfoMetadat to represent ErrorInfo' metadata field. Keep\n      // consistency with gRPC ErrorInfo metadata field name.\n\n      error.errorInfoMetadata = errorInfo.metadata;\n    }\n\n    return error;\n  }\n\n}\n\nexports.GoogleError = GoogleError;\n\nclass GoogleErrorDecoder {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const errorProtoJson = require('../../protos/status.json');\n\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n  }\n\n  decodeProtobufAny(anyValue) {\n    const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n\n    if (!match) {\n      throw new Error(\"Unknown type encoded in google.protobuf.any: \".concat(anyValue.type_url));\n    }\n\n    const typeName = match[1];\n    const type = this.root.lookupType(typeName);\n\n    if (!type) {\n      throw new Error(\"Cannot lookup type \".concat(typeName));\n    }\n\n    return type.decode(anyValue.value);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n\n  decodeRpcStatus(buffer) {\n    const uint8array = new Uint8Array(buffer);\n    const status = this.statusType.decode(uint8array); // google.rpc.Status contains an array of google.protobuf.Any\n    // which need a special treatment\n\n    const details = [];\n    let errorInfo;\n\n    for (const detail of status.details) {\n      try {\n        const decodedDetail = this.decodeProtobufAny(detail);\n        details.push(decodedDetail);\n\n        if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n          errorInfo = decodedDetail;\n        }\n      } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n      }\n    }\n\n    const result = {\n      code: status.code,\n      message: status.message,\n      statusDetails: details,\n      reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,\n      domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,\n      errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata\n    };\n    return result;\n  } // Construct an Error from a StatusObject.\n  // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n\n\n  callErrorFromStatus(status) {\n    status.message = \"\".concat(status.code, \" \").concat(status_1.Status[status.code], \": \").concat(status.message);\n    return Object.assign(new GoogleError(status.message), status);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n  // and puts it into the object similar to gRPC ServiceError object.\n\n\n  decodeErrorFromBuffer(buffer) {\n    return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n  } // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n\n\n  decodeGRPCStatusDetails(bufferArr) {\n    const details = [];\n    let errorInfo;\n    bufferArr.forEach(buffer => {\n      const uint8array = new Uint8Array(buffer);\n      const rpcStatus = this.statusType.decode(uint8array);\n\n      for (const detail of rpcStatus.details) {\n        try {\n          const decodedDetail = this.decodeProtobufAny(detail);\n          details.push(decodedDetail);\n\n          if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n            errorInfo = decodedDetail;\n          }\n        } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n        }\n      }\n    });\n    const result = {\n      details,\n      errorInfo\n    };\n    return result;\n  }\n\n}\n\nexports.GoogleErrorDecoder = GoogleErrorDecoder;","map":{"version":3,"sources":["../../src/googleError.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\nconst status_1 = require(\"./status\");\nconst protobuf = require(\"protobufjs\");\nclass GoogleError extends Error {\n    // Parse details field in google.rpc.status wire over gRPC medatadata.\n    // Promote google.rpc.ErrorInfo if exist.\n    static parseGRPCStatusDetails(err) {\n        const decoder = new GoogleErrorDecoder();\n        try {\n            if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n                const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n                if (statusDetailsObj &&\n                    statusDetailsObj.details &&\n                    statusDetailsObj.details.length > 0) {\n                    err.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    err.reason = statusDetailsObj.errorInfo.reason;\n                    err.domain = statusDetailsObj.errorInfo.domain;\n                    err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            }\n        }\n        catch (decodeErr) {\n            // ignoring the error\n        }\n        return err;\n    }\n    // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static parseHttpError(json) {\n        const error = Object.assign(new GoogleError(json['error']['message']), json.error);\n        // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n        // Rename \"detials\" to \"statusDetails\".\n        error.statusDetails = json['error']['details'];\n        delete error.details;\n        // Promote the ErrorInfo fields as error's top-level.\n        const errorInfo = !json['error']['details']\n            ? undefined\n            : json['error']['details'].find((item) => item['@type'] === 'type.googleapis.com/google.rpc.ErrorInfo');\n        if (errorInfo) {\n            error.reason = errorInfo.reason;\n            error.domain = errorInfo.domain;\n            // error.metadata has been occupied for gRPC metadata, so we use\n            // errorInfoMetadat to represent ErrorInfo' metadata field. Keep\n            // consistency with gRPC ErrorInfo metadata field name.\n            error.errorInfoMetadata = errorInfo.metadata;\n        }\n        return error;\n    }\n}\nexports.GoogleError = GoogleError;\nclass GoogleErrorDecoder {\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const errorProtoJson = require('../../protos/status.json');\n        this.root = protobuf.Root.fromJSON(errorProtoJson);\n        this.anyType = this.root.lookupType('google.protobuf.Any');\n        this.statusType = this.root.lookupType('google.rpc.Status');\n    }\n    decodeProtobufAny(anyValue) {\n        const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n        if (!match) {\n            throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n        }\n        const typeName = match[1];\n        const type = this.root.lookupType(typeName);\n        if (!type) {\n            throw new Error(`Cannot lookup type ${typeName}`);\n        }\n        return type.decode(anyValue.value);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n    decodeRpcStatus(buffer) {\n        const uint8array = new Uint8Array(buffer);\n        const status = this.statusType.decode(uint8array);\n        // google.rpc.Status contains an array of google.protobuf.Any\n        // which need a special treatment\n        const details = [];\n        let errorInfo;\n        for (const detail of status.details) {\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                    errorInfo = decodedDetail;\n                }\n            }\n            catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        const result = {\n            code: status.code,\n            message: status.message,\n            statusDetails: details,\n            reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,\n            domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,\n            errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata,\n        };\n        return result;\n    }\n    // Construct an Error from a StatusObject.\n    // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n    callErrorFromStatus(status) {\n        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n        return Object.assign(new GoogleError(status.message), status);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n    // and puts it into the object similar to gRPC ServiceError object.\n    decodeErrorFromBuffer(buffer) {\n        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n    }\n    // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n    decodeGRPCStatusDetails(bufferArr) {\n        const details = [];\n        let errorInfo;\n        bufferArr.forEach(buffer => {\n            const uint8array = new Uint8Array(buffer);\n            const rpcStatus = this.statusType.decode(uint8array);\n            for (const detail of rpcStatus.details) {\n                try {\n                    const decodedDetail = this.decodeProtobufAny(detail);\n                    details.push(decodedDetail);\n                    if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                        errorInfo = decodedDetail;\n                    }\n                }\n                catch (err) {\n                    // cannot decode detail, likely because of the unknown type - just skip it\n                }\n            }\n        });\n        const result = {\n            details,\n            errorInfo,\n        };\n        return result;\n    }\n}\nexports.GoogleErrorDecoder = GoogleErrorDecoder;\n//# sourceMappingURL=googleError.js.map"]},"metadata":{},"sourceType":"script"}