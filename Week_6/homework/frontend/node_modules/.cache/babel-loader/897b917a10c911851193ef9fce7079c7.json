{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bucket = exports.AvailableServiceObjectMethods = exports.BucketActionToHTTPMethod = void 0;\n\nconst common_1 = require(\"@google-cloud/common\");\n\nconst paginator_1 = require(\"@google-cloud/paginator\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n\nconst extend = require(\"extend\");\n\nconst fs = require(\"fs\");\n\nconst mime = require(\"mime-types\");\n\nconst path = require(\"path\");\n\nconst pLimit = require(\"p-limit\");\n\nconst util_1 = require(\"util\");\n\nconst retry = require(\"async-retry\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst snakeize = require('snakeize');\n\nconst acl_1 = require(\"./acl\");\n\nconst file_1 = require(\"./file\");\n\nconst iam_1 = require(\"./iam\");\n\nconst notification_1 = require(\"./notification\");\n\nconst storage_1 = require(\"./storage\");\n\nconst signer_1 = require(\"./signer\");\n\nvar BucketActionToHTTPMethod;\n\n(function (BucketActionToHTTPMethod) {\n  BucketActionToHTTPMethod[\"list\"] = \"GET\";\n})(BucketActionToHTTPMethod = exports.BucketActionToHTTPMethod || (exports.BucketActionToHTTPMethod = {}));\n\nvar AvailableServiceObjectMethods;\n\n(function (AvailableServiceObjectMethods) {\n  AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"setMetadata\"] = 0] = \"setMetadata\";\n  AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"delete\"] = 1] = \"delete\";\n})(AvailableServiceObjectMethods = exports.AvailableServiceObjectMethods || (exports.AvailableServiceObjectMethods = {}));\n/**\n * The size of a file (in bytes) must be greater than this number to\n * automatically trigger a resumable upload.\n *\n * @const {number}\n * @private\n */\n\n\nconst RESUMABLE_THRESHOLD = 5000000;\n/**\n * Get and set IAM policies for your bucket.\n *\n * @name Bucket#iam\n * @mixes Iam\n *\n * See {@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}\n * See {@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}\n * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * //-\n * // Get the IAM policy for your bucket.\n * //-\n * bucket.iam.getPolicy(function(err, policy) {\n *   console.log(policy);\n * });\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * bucket.iam.getPolicy().then(function(data) {\n *   const policy = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_view_bucket_iam_members\n * Example of retrieving a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_add_bucket_iam_member\n * Example of adding to a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_remove_bucket_iam_member\n * Example of removing from a bucket's IAM policy:\n */\n\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against\n * an object or bucket (for example, `READ` or `WRITE`); the entity defines\n * who the permission applies to (for example, a specific user or group of\n * users).\n *\n * The `acl` object on a Bucket instance provides methods to get you a list of\n * the ACLs defined on your bucket, as well as set, update, and delete them.\n *\n * Buckets also have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. Default ACLs specify permissions that all new\n * objects added to the bucket will inherit by default. You can add, delete,\n * get, and update entities and permissions for these as well with\n * {@link Bucket#acl.default}.\n *\n * See {@link http://goo.gl/6qBBPO| About Access Control Lists}\n * See {@link https://cloud.google.com/storage/docs/access-control/lists#default| Default ACLs}\n *\n * @name Bucket#acl\n * @mixes Acl\n * @property {Acl} default Cloud Storage Buckets have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. You can add, delete, get, and update entities and\n * permissions for these as well. The method signatures and examples are all\n * the same, after only prefixing the method call with `default`.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n *\n * //-\n * // Make a bucket's contents publicly readable.\n * //-\n * const myBucket = storage.bucket('my-bucket');\n *\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * myBucket.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myBucket.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl\n * Example of printing a bucket's ACL:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl_for_user\n * Example of printing a bucket's ACL for a specific user:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_owner\n * Example of adding an owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_owner\n * Example of removing an owner from a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_default_owner\n * Example of adding a default owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_default_owner\n * Example of removing a default owner from a bucket:\n */\n\n/**\n * The API-formatted resource description of the bucket.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Bucket#metadata\n * @type {object}\n */\n\n/**\n * The bucket's name.\n * @name Bucket#name\n * @type {string}\n */\n\n/**\n * Get {@link File} objects for the files currently in the bucket as a\n * readable object stream.\n *\n * @method Bucket#getFilesStream\n * @param {GetFilesOptions} [query] Query object for listing files.\n * @returns {ReadableStream} A readable stream that emits {@link File} instances.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * bucket.getFilesStream()\n *   .on('error', console.error)\n *   .on('data', function(file) {\n *     // file is a File object.\n *   })\n *   .on('end', function() {\n *     // All files retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * bucket.getFilesStream()\n *   .on('data', function(file) {\n *     this.end();\n *   });\n *\n * //-\n * // If you're filtering files with a delimiter, you should use\n * // {@link Bucket#getFiles} and set `autoPaginate: false` in order to\n * // preserve the `apiResponse` argument.\n * //-\n * const prefixes = [];\n *\n * function callback(err, files, nextQuery, apiResponse) {\n *   prefixes = prefixes.concat(apiResponse.prefixes);\n *\n *   if (nextQuery) {\n *     bucket.getFiles(nextQuery, callback);\n *   } else {\n *     // prefixes = The finished array of prefixes.\n *   }\n * }\n *\n * bucket.getFiles({\n *   autoPaginate: false,\n *   delimiter: '/'\n * }, callback);\n * ```\n */\n\n/**\n * Create a Bucket object to interact with a Cloud Storage bucket.\n *\n * @class\n * @hideconstructor\n *\n * @param {Storage} storage A {@link Storage} instance.\n * @param {string} name The name of the bucket.\n * @param {object} [options] Configuration object.\n * @param {string} [options.userProject] User project.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n * ```\n */\n\nclass Bucket extends common_1.ServiceObject {\n  constructor(storage, name, options) {\n    var _a, _b, _c, _d;\n\n    options = options || {}; // Allow for \"gs://\"-style input, and strip any trailing slashes.\n\n    name = name.replace(/^gs:\\/\\//, '').replace(/\\/+$/, '');\n    const requestQueryObject = {};\n\n    if ((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) {\n      requestQueryObject.ifGenerationMatch = options.preconditionOpts.ifGenerationMatch;\n    }\n\n    if ((_b = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationNotMatch) {\n      requestQueryObject.ifGenerationNotMatch = options.preconditionOpts.ifGenerationNotMatch;\n    }\n\n    if ((_c = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _c === void 0 ? void 0 : _c.ifMetagenerationMatch) {\n      requestQueryObject.ifMetagenerationMatch = options.preconditionOpts.ifMetagenerationMatch;\n    }\n\n    if ((_d = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _d === void 0 ? void 0 : _d.ifMetagenerationNotMatch) {\n      requestQueryObject.ifMetagenerationNotMatch = options.preconditionOpts.ifMetagenerationNotMatch;\n    }\n\n    const userProject = options.userProject;\n\n    if (typeof userProject === 'string') {\n      requestQueryObject.userProject = userProject;\n    }\n\n    const methods = {\n      /**\n       * Create a bucket.\n       *\n       * @method Bucket#create\n       * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n       * @param {CreateBucketCallback} [callback] Callback function.\n       * @returns {Promise<CreateBucketResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       * bucket.create(function(err, bucket, apiResponse) {\n       *   if (!err) {\n       *     // The bucket was created successfully.\n       *   }\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.create().then(function(data) {\n       *   const bucket = data[0];\n       *   const apiResponse = data[1];\n       * });\n       * ```\n       */\n      create: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\n       * @typedef {object} DeleteBucketOptions Configuration options.\n       * @property {boolean} [ignoreNotFound = false] Ignore an error if\n       *     the bucket does not exist.\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n\n      /**\n       * @typedef {array} DeleteBucketResponse\n       * @property {object} 0 The full API response.\n       */\n\n      /**\n       * @callback DeleteBucketCallback\n       * @param {?Error} err Request error, if any.\n       * @param {object} apiResponse The full API response.\n       */\n\n      /**\n       * Delete the bucket.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/delete| Buckets: delete API Documentation}\n       *\n       * @method Bucket#delete\n       * @param {DeleteBucketOptions} [options] Configuration options.\n       * @param {boolean} [options.ignoreNotFound = false] Ignore an error if\n       *     the bucket does not exist.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {DeleteBucketCallback} [callback] Callback function.\n       * @returns {Promise<DeleteBucketResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       * bucket.delete(function(err, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.delete().then(function(data) {\n       *   const apiResponse = data[0];\n       * });\n       *\n       * ```\n       * @example <caption>include:samples/buckets.js</caption>\n       * region_tag:storage_delete_bucket\n       * Another example:\n       */\n      delete: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\n       * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n\n      /**\n       * @typedef {array} BucketExistsResponse\n       * @property {boolean} 0 Whether the {@link Bucket} exists.\n       */\n\n      /**\n       * @callback BucketExistsCallback\n       * @param {?Error} err Request error, if any.\n       * @param {boolean} exists Whether the {@link Bucket} exists.\n       */\n\n      /**\n       * Check if the bucket exists.\n       *\n       * @method Bucket#exists\n       * @param {BucketExistsOptions} [options] Configuration options.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {BucketExistsCallback} [callback] Callback function.\n       * @returns {Promise<BucketExistsResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * bucket.exists(function(err, exists) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.exists().then(function(data) {\n       *   const exists = data[0];\n       * });\n       * ```\n       */\n      exists: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\n       * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()\n       * @property {boolean} [autoCreate] Automatically create the object if\n       *     it does not exist. Default: `false`\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n\n      /**\n       * @typedef {array} GetBucketResponse\n       * @property {Bucket} 0 The {@link Bucket}.\n       * @property {object} 1 The full API response.\n       */\n\n      /**\n       * @callback GetBucketCallback\n       * @param {?Error} err Request error, if any.\n       * @param {Bucket} bucket The {@link Bucket}.\n       * @param {object} apiResponse The full API response.\n       */\n\n      /**\n       * Get a bucket if it exists.\n       *\n       * You may optionally use this to \"get or create\" an object by providing\n       * an object with `autoCreate` set to `true`. Any extra configuration that\n       * is normally required for the `create` method must be contained within\n       * this object as well.\n       *\n       * @method Bucket#get\n       * @param {GetBucketOptions} [options] Configuration options.\n       * @param {boolean} [options.autoCreate] Automatically create the object if\n       *     it does not exist. Default: `false`\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {GetBucketCallback} [callback] Callback function.\n       * @returns {Promise<GetBucketResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * bucket.get(function(err, bucket, apiResponse) {\n       *   // `bucket.metadata` has been populated.\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.get().then(function(data) {\n       *   const bucket = data[0];\n       *   const apiResponse = data[1];\n       * });\n       * ```\n       */\n      get: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\n       * @typedef {array} GetBucketMetadataResponse\n       * @property {object} 0 The bucket metadata.\n       * @property {object} 1 The full API response.\n       */\n\n      /**\n       * @callback GetBucketMetadataCallback\n       * @param {?Error} err Request error, if any.\n       * @param {object} metadata The bucket metadata.\n       * @param {object} apiResponse The full API response.\n       */\n\n      /**\n       * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n\n      /**\n       * Get the bucket's metadata.\n       *\n       * To set metadata, see {@link Bucket#setMetadata}.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/get| Buckets: get API Documentation}\n       *\n       * @method Bucket#getMetadata\n       * @param {GetBucketMetadataOptions} [options] Configuration options.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {GetBucketMetadataCallback} [callback] Callback function.\n       * @returns {Promise<GetBucketMetadataResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * bucket.getMetadata(function(err, metadata, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.getMetadata().then(function(data) {\n       *   const metadata = data[0];\n       *   const apiResponse = data[1];\n       * });\n       *\n       * ```\n       * @example <caption>include:samples/requesterPays.js</caption>\n       * region_tag:storage_get_requester_pays_status\n       * Example of retrieving the requester pays status of a bucket:\n       */\n      getMetadata: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\n       * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n\n      /**\n       * @typedef {array} SetBucketMetadataResponse\n       * @property {object} apiResponse The full API response.\n       */\n\n      /**\n       * @callback SetBucketMetadataCallback\n       * @param {?Error} err Request error, if any.\n       * @param {object} metadata The bucket metadata.\n       */\n\n      /**\n       * Set the bucket's metadata.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n       *\n       * @method Bucket#setMetadata\n       * @param {object<string, *>} metadata The metadata you wish to set.\n       * @param {SetBucketMetadataOptions} [options] Configuration options.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {SetBucketMetadataCallback} [callback] Callback function.\n       * @returns {Promise<SetBucketMetadataResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * //-\n       * // Set website metadata field on the bucket.\n       * //-\n       * const metadata = {\n       *   website: {\n       *     mainPageSuffix: 'http://example.com',\n       *     notFoundPage: 'http://example.com/404.html'\n       *   }\n       * };\n       *\n       * bucket.setMetadata(metadata, function(err, apiResponse) {});\n       *\n       * //-\n       * // Enable versioning for your bucket.\n       * //-\n       * bucket.setMetadata({\n       *   versioning: {\n       *     enabled: true\n       *   }\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // Enable KMS encryption for objects within this bucket.\n       * //-\n       * bucket.setMetadata({\n       *   encryption: {\n       *     defaultKmsKeyName: 'projects/grape-spaceship-123/...'\n       *   }\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // Set the default event-based hold value for new objects in this\n       * // bucket.\n       * //-\n       * bucket.setMetadata({\n       *   defaultEventBasedHold: true\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // Remove object lifecycle rules.\n       * //-\n       * bucket.setMetadata({\n       *   lifecycle: null\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.setMetadata(metadata).then(function(data) {\n       *   const apiResponse = data[0];\n       * });\n       * ```\n       */\n      setMetadata: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      }\n    };\n    super({\n      parent: storage,\n      baseUrl: '/b',\n      id: name,\n      createMethod: storage.createBucket.bind(storage),\n      methods\n    });\n    this.name = name;\n    this.storage = storage;\n    this.userProject = options.userProject;\n    this.acl = new acl_1.Acl({\n      request: this.request.bind(this),\n      pathPrefix: '/acl'\n    });\n    this.acl.default = new acl_1.Acl({\n      request: this.request.bind(this),\n      pathPrefix: '/defaultObjectAcl'\n    });\n    this.iam = new iam_1.Iam(this);\n    this.getFilesStream = paginator_1.paginator.streamify('getFiles');\n    this.instanceRetryValue = storage.retryOptions.autoRetry;\n    this.instancePreconditionOpts = options === null || options === void 0 ? void 0 : options.preconditionOpts;\n  }\n  /**\n   * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().\n   * @property {boolean} [append=true] The new rules will be appended to any\n   *     pre-existing rules.\n   */\n\n  /**\n   *\n   * @typedef {object} LifecycleRule The new lifecycle rule to be added to objects\n   *     in this bucket.\n   * @property {string|object} action The action to be taken upon matching of\n   *     all the conditions 'delete' or 'setStorageClass'.\n   *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n   *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n   * @property {object} condition Condition a bucket must meet before the\n   *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n   * @property {string} [storageClass] When using the `setStorageClass`\n   *     action, provide this option to dictate which storage class the object\n   *     should update to. Please see\n   *     [SetStorageClass option documentation]{@link https://cloud.google.com/storage/docs/lifecycle#setstorageclass} for supported transitions.\n   */\n\n  /**\n   * Add an object lifecycle management rule to the bucket.\n   *\n   * By default, an Object Lifecycle Management rule provided to this method\n   * will be included to the existing policy. To replace all existing rules,\n   * supply the `options` argument, setting `append` to `false`.\n   *\n   * See {@link https://cloud.google.com/storage/docs/lifecycle| Object Lifecycle Management}\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n   *\n   * @param {LifecycleRule} rule The new lifecycle rule to be added to objects\n   *     in this bucket.\n   * @param {string|object} rule.action The action to be taken upon matching of\n   *     all the conditions 'delete' or 'setStorageClass'.\n   *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n   *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n   * @param {object} rule.condition Condition a bucket must meet before the\n   *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n   * @param {string} [rule.storageClass] When using the `setStorageClass`\n   *     action, provide this option to dictate which storage class the object\n   *     should update to.\n   * @param {AddLifecycleRuleOptions} [options] Configuration object.\n   * @param {boolean} [options.append=true] Append the new rule to the existing\n   *     policy.\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Automatically have an object deleted from this bucket once it is 3 years\n   * // of age.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     age: 365 * 3 // Specified in days.\n   *   }\n   * }, function(err, apiResponse) {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   const lifecycleRules = bucket.metadata.lifecycle.rule;\n   *\n   *   // Iterate over the Object Lifecycle Management rules on this bucket.\n   *   lifecycleRules.forEach(lifecycleRule => {});\n   * });\n   *\n   * //-\n   * // By default, the rule you provide will be added to the existing policy.\n   * // Optionally, you can disable this behavior to replace all of the\n   * // pre-existing rules.\n   * //-\n   * const options = {\n   *   append: false\n   * };\n   *\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     age: 365 * 3 // Specified in days.\n   *   }\n   * }, options, function(err, apiResponse) {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   // All rules have been replaced with the new \"delete\" rule.\n   *\n   *   // Iterate over the Object Lifecycle Management rules on this bucket.\n   *   lifecycleRules.forEach(lifecycleRule => {});\n   * });\n   *\n   * //-\n   * // For objects created before 2018, \"downgrade\" the storage class.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'setStorageClass',\n   *   storageClass: 'COLDLINE',\n   *   condition: {\n   *     createdBefore: new Date('2018')\n   *   }\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete objects created before 2016 which have the Coldline storage\n   * // class.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     matchesStorageClass: [\n   *       'COLDLINE'\n   *     ],\n   *     createdBefore: new Date('2016')\n   *   }\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete object that has a noncurrent timestamp that is at least 100 days.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     daysSinceNoncurrentTime: 100\n   *   }\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete object that has a noncurrent timestamp before 2020-01-01.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     noncurrentTimeBefore: new Date('2020-01-01')\n   *   }\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete object that has a customTime that is at least 100 days.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     daysSinceCustomTime: 100\n   *   }\n   * }, function(err, apiResponse) ());\n   *\n   * //-\n   * // Delete object that has a customTime before 2020-01-01.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     customTimeBefore: new Date('2020-01-01')\n   *   }\n   * }, function(err, apiResponse) {});\n   * ```\n   */\n\n\n  addLifecycleRule(rule, optionsOrCallback, callback) {\n    let options;\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    const newLifecycleRules = arrify(rule).map(rule => {\n      if (typeof rule.action === 'object') {\n        // This is a raw-formatted rule object, the way the API expects.\n        // Just pass it through as-is.\n        return rule;\n      }\n\n      const apiFormattedRule = {};\n      apiFormattedRule.condition = {};\n      apiFormattedRule.action = {\n        type: rule.action.charAt(0).toUpperCase() + rule.action.slice(1)\n      };\n\n      if (rule.storageClass) {\n        apiFormattedRule.action.storageClass = rule.storageClass;\n      }\n\n      for (const condition in rule.condition) {\n        if (rule.condition[condition] instanceof Date) {\n          apiFormattedRule.condition[condition] = rule.condition[condition].toISOString().replace(/T.+$/, '');\n        } else {\n          apiFormattedRule.condition[condition] = rule.condition[condition];\n        }\n      }\n\n      return apiFormattedRule;\n    });\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n\n    if (options.append === false) {\n      this.setMetadata({\n        lifecycle: {\n          rule: newLifecycleRules\n        }\n      }, callback);\n      this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n      return;\n    } // The default behavior appends the previously-defined lifecycle rules with\n    // the new ones just passed in by the user.\n\n\n    this.getMetadata((err, metadata) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const currentLifecycleRules = arrify(metadata.lifecycle && metadata.lifecycle.rule);\n      this.setMetadata({\n        lifecycle: {\n          rule: currentLifecycleRules.concat(newLifecycleRules)\n        }\n      }, callback);\n    });\n    this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n  }\n  /**\n   * @typedef {object} CombineOptions\n   * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of\n   *     the form\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n   *     that will be used to encrypt the object. Overwrites the object\n   * metadata's `kms_key_name` value, if any.\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * @callback CombineCallback\n   * @param {?Error} err Request error, if any.\n   * @param {File} newFile The new {@link File}.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * @typedef {array} CombineResponse\n   * @property {File} 0 The new {@link File}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * Combine multiple files into one new file.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/compose| Objects: compose API Documentation}\n   *\n   * @throws {Error} if a non-array is provided as sources argument.\n   * @throws {Error} if no sources are provided.\n   * @throws {Error} if no destination is provided.\n   *\n   * @param {string[]|File[]} sources The source files that will be\n   *     combined.\n   * @param {string|File} destination The file you would like the\n   *     source files combined into.\n   * @param {CombineOptions} [options] Configuration options.\n   * @param {string} [options.kmsKeyName] Resource name of the Cloud KMS key, of\n   *     the form\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n   *     that will be used to encrypt the object. Overwrites the object\n   * metadata's `kms_key_name` value, if any.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n      * @param {CombineCallback} [callback] Callback function.\n   * @returns {Promise<CombineResponse>}\n   *\n   * @example\n   * ```\n   * const logBucket = storage.bucket('log-bucket');\n   *\n   * const sources = [\n   *   logBucket.file('2013-logs.txt'),\n   *   logBucket.file('2014-logs.txt')\n   * ];\n   *\n   * const allLogs = logBucket.file('all-logs.txt');\n   *\n   * logBucket.combine(sources, allLogs, function(err, newFile, apiResponse) {\n   *   // newFile === allLogs\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * logBucket.combine(sources, allLogs).then(function(data) {\n   *   const newFile = data[0];\n   *   const apiResponse = data[1];\n   * });\n   * ```\n   */\n\n\n  combine(sources, destination, optionsOrCallback, callback) {\n    if (!Array.isArray(sources) || sources.length === 0) {\n      throw new Error('You must provide at least one source file.');\n    }\n\n    if (!destination) {\n      throw new Error('A destination file must be specified.');\n    }\n\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    const convertToFile = file => {\n      if (file instanceof file_1.File) {\n        return file;\n      }\n\n      return this.file(file);\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    sources = sources.map(convertToFile);\n    const destinationFile = convertToFile(destination);\n    callback = callback || common_1.util.noop;\n\n    if (!destinationFile.metadata.contentType) {\n      const destinationContentType = mime.contentType(destinationFile.name);\n\n      if (destinationContentType) {\n        destinationFile.metadata.contentType = destinationContentType;\n      }\n    }\n\n    let maxRetries = this.storage.retryOptions.maxRetries;\n    sources.forEach(source => {\n      var _a;\n\n      if (((_a = source === null || source === void 0 ? void 0 : source.instancePreconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined && this.storage.retryOptions.idempotencyStrategy === storage_1.IdempotencyStrategy.RetryConditional || this.storage.retryOptions.idempotencyStrategy === storage_1.IdempotencyStrategy.RetryNever) {\n        maxRetries = 0;\n      }\n    });\n    Object.assign(options, this.instancePreconditionOpts, options); // Make the request from the destination File object.\n\n    destinationFile.request({\n      method: 'POST',\n      uri: '/compose',\n      maxRetries,\n      json: {\n        destination: {\n          contentType: destinationFile.metadata.contentType\n        },\n        sourceObjects: sources.map(source => {\n          var _a, _b, _c, _d;\n\n          const sourceObject = {\n            name: source.name\n          };\n\n          if (((_a = source === null || source === void 0 ? void 0 : source.metadata) === null || _a === void 0 ? void 0 : _a.generation) || ((_b = source === null || source === void 0 ? void 0 : source.instancePreconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch)) {\n            sourceObject.generation = ((_c = source === null || source === void 0 ? void 0 : source.metadata) === null || _c === void 0 ? void 0 : _c.generation) || ((_d = source === null || source === void 0 ? void 0 : source.instancePreconditionOpts) === null || _d === void 0 ? void 0 : _d.ifGenerationMatch);\n          }\n\n          return sourceObject;\n        })\n      },\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      callback(null, destinationFile, resp);\n    });\n  }\n  /**\n   * See a {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll request body}.\n   *\n   * @typedef {object} CreateChannelConfig\n   * @property {string} address The address where notifications are\n   *     delivered for this channel.\n   * @property {string} [delimiter] Returns results in a directory-like mode.\n   * @property {number} [maxResults] Maximum number of `items` plus `prefixes`\n   *     to return in a single page of responses.\n   * @property {string} [pageToken] A previously-returned page token\n   *     representing part of the larger set of results to view.\n   * @property {string} [prefix] Filter results to objects whose names begin\n   *     with this prefix.\n   * @property {string} [projection=noAcl] Set of properties to return.\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   * @property {boolean} [versions=false] If `true`, lists all versions of an object\n   *     as distinct results.\n   */\n\n  /**\n   * @typedef {object} CreateChannelOptions\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * @typedef {array} CreateChannelResponse\n   * @property {Channel} 0 The new {@link Channel}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback CreateChannelCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Channel} channel The new {@link Channel}.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Create a channel that will be notified when objects in this bucket changes.\n   *\n   * @throws {Error} If an ID is not provided.\n   * @throws {Error} If an address is not provided.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll API Documentation}\n   *\n   * @param {string} id The ID of the channel to create.\n   * @param {CreateChannelConfig} config Configuration for creating channel.\n   * @param {string} config.address The address where notifications are\n   *     delivered for this channel.\n   * @param {string} [config.delimiter] Returns results in a directory-like mode.\n   * @param {number} [config.maxResults] Maximum number of `items` plus `prefixes`\n   *     to return in a single page of responses.\n   * @param {string} [config.pageToken] A previously-returned page token\n   *     representing part of the larger set of results to view.\n   * @param {string} [config.prefix] Filter results to objects whose names begin\n   *     with this prefix.\n   * @param {string} [config.projection=noAcl] Set of properties to return.\n   * @param {string} [config.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {boolean} [config.versions=false] If `true`, lists all versions of an object\n   *     as distinct results.\n   * @param {CreateChannelOptions} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {CreateChannelCallback} [callback] Callback function.\n   * @returns {Promise<CreateChannelResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   * const id = 'new-channel-id';\n   *\n   * const config = {\n   *   address: 'https://...'\n   * };\n   *\n   * bucket.createChannel(id, config, function(err, channel, apiResponse) {\n   *   if (!err) {\n   *     // Channel created successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.createChannel(id, config).then(function(data) {\n   *   const channel = data[0];\n   *   const apiResponse = data[1];\n   * });\n   * ```\n   */\n\n\n  createChannel(id, config, optionsOrCallback, callback) {\n    if (typeof id !== 'string') {\n      throw new Error('An ID is required to create a channel.');\n    }\n\n    if (typeof config.address !== 'string') {\n      throw new Error('An address is required to create a channel.');\n    }\n\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '/o/watch',\n      json: Object.assign({\n        id,\n        type: 'web_hook'\n      }, config),\n      qs: options\n    }, (err, apiResponse) => {\n      if (err) {\n        callback(err, null, apiResponse);\n        return;\n      }\n\n      const resourceId = apiResponse.resourceId;\n      const channel = this.storage.channel(id, resourceId);\n      channel.metadata = apiResponse;\n      callback(null, channel, apiResponse);\n    });\n  }\n  /**\n   * Metadata to set for the Notification.\n   *\n   * @typedef {object} CreateNotificationOptions\n   * @property {object} [customAttributes] An optional list of additional\n   *     attributes to attach to each Cloud PubSub message published for this\n   *     notification subscription.\n   * @property {string[]} [eventTypes] If present, only send notifications about\n   *     listed event types. If empty, sent notifications for all event types.\n   * @property {string} [objectNamePrefix] If present, only apply this\n   *     notification configuration to object names that begin with this prefix.\n   * @property {string} [payloadFormat] The desired content of the Payload.\n   * Defaults to `JSON_API_V1`.\n   *\n   * Acceptable values are:\n   * - `JSON_API_V1`\n   *\n   * - `NONE`\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * @callback CreateNotificationCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Notification} notification The new {@link Notification}.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * @typedef {array} CreateNotificationResponse\n   * @property {Notification} 0 The new {@link Notification}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * Creates a notification subscription for the bucket.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n   *\n   * @param {Topic|string} topic The Cloud PubSub topic to which this\n   * subscription publishes. If the project ID is omitted, the current\n   * project ID will be used.\n   *\n   * Acceptable formats are:\n   * - `projects/grape-spaceship-123/topics/my-topic`\n   *\n   * - `my-topic`\n   * @param {CreateNotificationOptions} [options] Metadata to set for the\n   *     notification.\n   * @param {object} [options.customAttributes] An optional list of additional\n   *     attributes to attach to each Cloud PubSub message published for this\n   *     notification subscription.\n   * @param {string[]} [options.eventTypes] If present, only send notifications about\n   *     listed event types. If empty, sent notifications for all event types.\n   * @param {string} [options.objectNamePrefix] If present, only apply this\n   *     notification configuration to object names that begin with this prefix.\n   * @param {string} [options.payloadFormat] The desired content of the Payload.\n   * Defaults to `JSON_API_V1`.\n   *\n   * Acceptable values are:\n   * - `JSON_API_V1`\n   *\n   * - `NONE`\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {CreateNotificationCallback} [callback] Callback function.\n   * @returns {Promise<CreateNotificationResponse>}\n   * @throws {Error} If a valid topic is not provided.\n   * @see Notification#create\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   *\n   * const callback = function(err, notification, apiResponse) {\n   *   if (!err) {\n   *     // The notification was created successfully.\n   *   }\n   * };\n   *\n   * myBucket.createNotification('my-topic', callback);\n   *\n   * //-\n   * // Configure the nofiication by providing Notification metadata.\n   * //-\n   * const metadata = {\n   *   objectNamePrefix: 'prefix-'\n   * };\n   *\n   * myBucket.createNotification('my-topic', metadata, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * myBucket.createNotification('my-topic').then(function(data) {\n   *   const notification = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/createNotification.js</caption>\n   * region_tag:storage_create_bucket_notifications\n   * Another example:\n   */\n\n\n  createNotification(topic, optionsOrCallback, callback) {\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    const topicIsObject = topic !== null && typeof topic === 'object';\n\n    if (topicIsObject && common_1.util.isCustomType(topic, 'pubsub/topic')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      topic = topic.name;\n    }\n\n    if (typeof topic !== 'string') {\n      throw new Error('A valid topic name is required.');\n    }\n\n    const body = Object.assign({\n      topic\n    }, options);\n\n    if (body.topic.indexOf('projects') !== 0) {\n      body.topic = 'projects/{{projectId}}/topics/' + body.topic;\n    }\n\n    body.topic = '//pubsub.googleapis.com/' + body.topic;\n\n    if (!body.payloadFormat) {\n      body.payloadFormat = 'JSON_API_V1';\n    }\n\n    const query = {};\n\n    if (body.userProject) {\n      query.userProject = body.userProject;\n      delete body.userProject;\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '/notificationConfigs',\n      json: snakeize(body),\n      qs: query,\n      maxRetries: 0\n    }, (err, apiResponse) => {\n      if (err) {\n        callback(err, null, apiResponse);\n        return;\n      }\n\n      const notification = this.notification(apiResponse.id);\n      notification.metadata = apiResponse;\n      callback(null, notification, apiResponse);\n    });\n  }\n  /**\n   * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}\n   *     for all of the supported properties.\n   * @property {boolean} [force] Suppress errors until all files have been\n   *     processed.\n   */\n\n  /**\n   * @callback DeleteFilesCallback\n   * @param {?Error|?Error[]} err Request error, if any, or array of errors from\n   *     files that were not able to be deleted.\n   * @param {object} [apiResponse] The full API response.\n   */\n\n  /**\n   * Iterate over the bucket's files, calling `file.delete()` on each.\n   *\n   * <strong>This is not an atomic request.</strong> A delete attempt will be\n   * made for each file individually. Any one can fail, in which case only a\n   * portion of the files you intended to be deleted would have.\n   *\n   * Operations are performed in parallel, up to 10 at once. The first error\n   * breaks the loop and will execute the provided callback with it. Specify\n   * `{ force: true }` to suppress the errors until all files have had a chance\n   * to be processed.\n   *\n   * The `query` object passed as the first argument will also be passed to\n   * {@link Bucket#getFiles}.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete| Objects: delete API Documentation}\n   *\n   * @param {DeleteFilesOptions} [query] Query object. See {@link Bucket#getFiles}\n   * @param {boolean} [query.force] Suppress errors until all files have been\n   *     processed.\n   * @param {DeleteFilesCallback} [callback] Callback function.\n   * @returns {Promise}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Delete all of the files in the bucket.\n   * //-\n   * bucket.deleteFiles(function(err) {});\n   *\n   * //-\n   * // By default, if a file cannot be deleted, this method will stop deleting\n   * // files from your bucket. You can override this setting with `force:\n   * // true`.\n   * //-\n   * bucket.deleteFiles({\n   *   force: true\n   * }, function(errors) {\n   *   // `errors`:\n   *   //    Array of errors if any occurred, otherwise null.\n   * });\n   *\n   * //-\n   * // The first argument to this method acts as a query to\n   * // {@link Bucket#getFiles}. As an example, you can delete files\n   * // which match a prefix.\n   * //-\n   * bucket.deleteFiles({\n   *   prefix: 'images/'\n   * }, function(err) {\n   *   if (!err) {\n   *     // All files in the `images` directory have been deleted.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.deleteFiles().then(function() {});\n   * ```\n   */\n\n\n  deleteFiles(queryOrCallback, callback) {\n    let query = {};\n\n    if (typeof queryOrCallback === 'function') {\n      callback = queryOrCallback;\n    } else if (queryOrCallback) {\n      query = queryOrCallback;\n    }\n\n    const MAX_PARALLEL_LIMIT = 10;\n    const errors = [];\n\n    const deleteFile = file => {\n      return file.delete(query).catch(err => {\n        if (!query.force) {\n          throw err;\n        }\n\n        errors.push(err);\n      });\n    };\n\n    this.getFiles(query).then(_ref => {\n      let [files] = _ref;\n      const limit = pLimit(MAX_PARALLEL_LIMIT);\n      const promises = files.map(file => {\n        return limit(() => deleteFile(file));\n      });\n      return Promise.all(promises);\n    }).then(() => callback(errors.length > 0 ? errors : null), callback);\n  }\n  /**\n   * @typedef {array} DeleteLabelsResponse\n   * @property {object} 0 The full API response.\n   */\n\n  /**\n   * @callback DeleteLabelsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} metadata Bucket's metadata.\n   */\n\n  /**\n   * Delete one or more labels from this bucket.\n   *\n   * @param {string|string[]} [labels] The labels to delete. If no labels are\n   *     provided, all of the labels are removed.\n   * @param {DeleteLabelsCallback} [callback] Callback function.\n   * @returns {Promise<DeleteLabelsResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Delete all of the labels from this bucket.\n   * //-\n   * bucket.deleteLabels(function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete a single label.\n   * //-\n   * bucket.deleteLabels('labelone', function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete a specific set of labels.\n   * //-\n   * bucket.deleteLabels([\n   *   'labelone',\n   *   'labeltwo'\n   * ], function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.deleteLabels().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n\n\n  deleteLabels(labelsOrCallback, callback) {\n    let labels = new Array();\n\n    if (typeof labelsOrCallback === 'function') {\n      callback = labelsOrCallback;\n    } else if (labelsOrCallback) {\n      labels = arrify(labelsOrCallback);\n    }\n\n    const deleteLabels = labels => {\n      const nullLabelMap = labels.reduce((nullLabelMap, labelKey) => {\n        nullLabelMap[labelKey] = null;\n        return nullLabelMap;\n      }, {});\n      this.setLabels(nullLabelMap, callback);\n    };\n\n    if (labels.length === 0) {\n      this.getLabels((err, labels) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        deleteLabels(Object.keys(labels));\n      });\n    } else {\n      deleteLabels(labels);\n    }\n  }\n  /**\n   * @typedef {array} DisableRequesterPaysResponse\n   * @property {object} 0 The full API response.\n   */\n\n  /**\n   * @callback DisableRequesterPaysCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * <div class=\"notice\">\n   *   <strong>Early Access Testers Only</strong>\n   *   <p>\n   *     This feature is not yet widely-available.\n   *   </p>\n   * </div>\n   *\n   * Disable `requesterPays` functionality from this bucket.\n   *\n   * @param {DisableRequesterPaysCallback} [callback] Callback function.\n   * @returns {Promise<DisableRequesterPaysCallback>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.disableRequesterPays(function(err, apiResponse) {\n   *   if (!err) {\n   *     // requesterPays functionality disabled successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.disableRequesterPays().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/requesterPays.js</caption>\n   * region_tag:storage_disable_requester_pays\n   * Example of disabling requester pays:\n   */\n\n\n  disableRequesterPays(callback) {\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n    this.setMetadata({\n      billing: {\n        requesterPays: false\n      }\n    }, callback || common_1.util.noop);\n    this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n  }\n  /**\n   * Configuration object for enabling logging.\n   *\n   * @typedef {object} EnableLoggingOptions\n   * @property {string|Bucket} [bucket] The bucket for the log entries. By\n   *     default, the current bucket is used.\n   * @property {string} prefix A unique prefix for log object names.\n   */\n\n  /**\n   * Enable logging functionality for this bucket. This will make two API\n   * requests, first to grant Cloud Storage WRITE permission to the bucket, then\n   * to set the appropriate configuration on the Bucket's metadata.\n   *\n   * @param {EnableLoggingOptions} config Configuration options.\n   * @param {string|Bucket} [config.bucket] The bucket for the log entries. By\n   *     default, the current bucket is used.\n   * @param {string} config.prefix A unique prefix for log object names.\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * const config = {\n   *   prefix: 'log'\n   * };\n   *\n   * bucket.enableLogging(config, function(err, apiResponse) {\n   *   if (!err) {\n   *     // Logging functionality enabled successfully.\n   *   }\n   * });\n   *\n   * ```\n   * @example\n   * Optionally, provide a destination bucket.\n   * ```\n   * const config = {\n   *   prefix: 'log',\n   *   bucket: 'destination-bucket'\n   * };\n   *\n   * bucket.enableLogging(config, function(err, apiResponse) {});\n   * ```\n   *\n   * @example\n   * If the callback is omitted, we'll return a Promise.\n   * ```\n   * bucket.enableLogging(config).then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n\n\n  enableLogging(config, callback) {\n    if (!config || typeof config === 'function' || typeof config.prefix === 'undefined') {\n      throw new Error('A configuration object with a prefix is required.');\n    }\n\n    const logBucket = config.bucket ? config.bucket.id || config.bucket : this.id;\n\n    (async () => {\n      let setMetadataResponse;\n\n      try {\n        const [policy] = await this.iam.getPolicy();\n        policy.bindings.push({\n          members: ['group:cloud-storage-analytics@google.com'],\n          role: 'roles/storage.objectCreator'\n        });\n        await this.iam.setPolicy(policy);\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n        [setMetadataResponse] = await this.setMetadata({\n          logging: {\n            logBucket,\n            logObjectPrefix: config.prefix\n          }\n        });\n      } catch (e) {\n        callback(e);\n        return;\n      } finally {\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n      }\n\n      callback(null, setMetadataResponse);\n    })();\n  }\n  /**\n   * @typedef {array} EnableRequesterPaysResponse\n   * @property {object} 0 The full API response.\n   */\n\n  /**\n   * @callback EnableRequesterPaysCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * <div class=\"notice\">\n   *   <strong>Early Access Testers Only</strong>\n   *   <p>\n   *     This feature is not yet widely-available.\n   *   </p>\n   * </div>\n   *\n   * Enable `requesterPays` functionality for this bucket. This enables you, the\n   * bucket owner, to have the requesting user assume the charges for the access\n   * to your bucket and its contents.\n   *\n   * @param {EnableRequesterPaysCallback} [callback] Callback function.\n   * @returns {Promise<EnableRequesterPaysResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.enableRequesterPays(function(err, apiResponse) {\n   *   if (!err) {\n   *     // requesterPays functionality enabled successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.enableRequesterPays().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/requesterPays.js</caption>\n   * region_tag:storage_enable_requester_pays\n   * Example of enabling requester pays:\n   */\n\n\n  enableRequesterPays(callback) {\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n    this.setMetadata({\n      billing: {\n        requesterPays: true\n      }\n    }, callback || common_1.util.noop);\n    this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n  }\n  /**\n   * Create a {@link File} object. See {@link File} to see how to handle\n   * the different use cases you may have.\n   *\n   * @param {string} name The name of the file in this bucket.\n   * @param {FileOptions} [options] Configuration options.\n   * @param {string|number} [options.generation] Only use a specific revision of\n   *     this file.\n   * @param {string} [options.encryptionKey] A custom encryption key. See\n   *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n   * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n   *     be used to encrypt the object. Must be in the format:\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n   *     KMS key ring must use the same location as the bucket.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for all requests made from File object.\n   * @returns {File}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   * const file = bucket.file('my-existing-file.png');\n   * ```\n   */\n\n\n  file(name, options) {\n    if (!name) {\n      throw Error('A file name must be specified.');\n    }\n\n    return new file_1.File(this, name, options);\n  }\n  /**\n   * @typedef {array} GetFilesResponse\n   * @property {File[]} 0 Array of {@link File} instances.\n   * @param {object} nextQuery 1 A query object to receive more results.\n   * @param {object} apiResponse 2 The full API response.\n   */\n\n  /**\n   * @callback GetFilesCallback\n   * @param {?Error} err Request error, if any.\n   * @param {File[]} files Array of {@link File} instances.\n   * @param {object} nextQuery A query object to receive more results.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Query object for listing files.\n   *\n   * @typedef {object} GetFilesOptions\n   * @property {boolean} [autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @property {string} [delimiter] Results will contain only objects whose\n   *     names, aside from the prefix, do not contain delimiter. Objects whose\n   *     names, aside from the prefix, contain delimiter will have their name\n   *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n   *     Duplicate prefixes are omitted.\n   * @deprecated @property {string} [directory] Filter results based on a directory name, or\n   *     more technically, a \"prefix\". Assumes delimeter to be '/'. Deprecated. Use prefix instead.\n   * @property {string} [endOffset] Filter results to objects whose names are\n   * lexicographically before endOffset. If startOffset is also set, the objects\n   * listed have names between startOffset (inclusive) and endOffset (exclusive).\n   * @property {boolean} [includeTrailingDelimiter] If true, objects that end in\n   * exactly one instance of delimiter have their metadata included in items[]\n   * in addition to the relevant part of the object name appearing in prefixes[].\n   * @property {string} [prefix] Filter results to objects whose names begin\n   *     with this prefix.\n   * @property {number} [maxApiCalls] Maximum number of API calls to make.\n   * @property {number} [maxResults] Maximum number of items plus prefixes to\n   *     return per call.\n   *     Note: By default will handle pagination automatically\n   *     if more than 1 page worth of results are requested per call.\n   *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n   *     or 1 page of results will be returned per call.\n   * @property {string} [pageToken] A previously-returned page token\n   *     representing part of the larger set of results to view.\n   * @property {string} [startOffset] Filter results to objects whose names are\n   * lexicographically equal to or after startOffset. If endOffset is also set,\n   * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   * @property {boolean} [versions] If true, returns File objects scoped to\n   *     their versions.\n   */\n\n  /**\n   * Get {@link File} objects for the files currently in the bucket.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/list| Objects: list API Documentation}\n   *\n   * @param {GetFilesOptions} [query] Query object for listing files.\n   * @param {boolean} [query.autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @param {string} [query.delimiter] Results will contain only objects whose\n   *     names, aside from the prefix, do not contain delimiter. Objects whose\n   *     names, aside from the prefix, contain delimiter will have their name\n   *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n   *     Duplicate prefixes are omitted.\n   * @deprecated @param {string} [query.directory] Filter results based on a directory name, or\n   *     more technically, a \"prefix\". Assumes delimeter to be '/'. Deprecated. Use query.prefix instead.\n   * @param {string} [query.endOffset] Filter results to objects whose names are\n   * lexicographically before endOffset. If startOffset is also set, the objects\n   * listed have names between startOffset (inclusive) and endOffset (exclusive).\n   * @param {boolean} [query.includeTrailingDelimiter] If true, objects that end in\n   * exactly one instance of delimiter have their metadata included in items[]\n   * in addition to the relevant part of the object name appearing in prefixes[].\n   * @param {string} [query.prefix] Filter results to objects whose names begin\n   *     with this prefix.\n   * @param {number} [query.maxApiCalls] Maximum number of API calls to make.\n   * @param {number} [query.maxResults] Maximum number of items plus prefixes to\n   *     return per call.\n   *     Note: By default will handle pagination automatically\n   *     if more than 1 page worth of results are requested per call.\n   *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n   *     or 1 page of results will be returned per call.\n   * @param {string} [query.pageToken] A previously-returned page token\n   *     representing part of the larger set of results to view.\n   * @param {string} [query.startOffset] Filter results to objects whose names are\n   * lexicographically equal to or after startOffset. If endOffset is also set,\n   * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n   * @param {string} [query.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {boolean} [query.versions] If true, returns File objects scoped to\n   *     their versions.\n   * @param {GetFilesCallback} [callback] Callback function.\n   * @returns {Promise<GetFilesResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.getFiles(function(err, files) {\n   *   if (!err) {\n   *     // files is an array of File objects.\n   *   }\n   * });\n   *\n   * //-\n   * // If your bucket has versioning enabled, you can get all of your files\n   * // scoped to their generation.\n   * //-\n   * bucket.getFiles({\n   *   versions: true\n   * }, function(err, files) {\n   *   // Each file is scoped to its generation.\n   * });\n   *\n   * //-\n   * // To control how many API requests are made and page through the results\n   * // manually, set `autoPaginate` to `false`.\n   * //-\n   * const callback = function(err, files, nextQuery, apiResponse) {\n   *   if (nextQuery) {\n   *     // More results exist.\n   *     bucket.getFiles(nextQuery, callback);\n   *   }\n   *\n   *   // The `metadata` property is populated for you with the metadata at the\n   *   // time of fetching.\n   *   files[0].metadata;\n   *\n   *   // However, in cases where you are concerned the metadata could have\n   *   // changed, use the `getMetadata` method.\n   *   files[0].getMetadata(function(err, metadata) {});\n   * };\n   *\n   * bucket.getFiles({\n   *   autoPaginate: false\n   * }, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.getFiles().then(function(data) {\n   *   const files = data[0];\n   * });\n   *\n   * ```\n   * @example\n   * <h6>Simulating a File System</h6><p>With `autoPaginate: false`, it's possible to iterate over files which incorporate a common structure using a delimiter.</p><p>Consider the following remote objects:</p><ol><li>\"a\"</li><li>\"a/b/c/d\"</li><li>\"b/d/e\"</li></ol><p>Using a delimiter of `/` will return a single file, \"a\".</p><p>`apiResponse.prefixes` will return the \"sub-directories\" that were found:</p><ol><li>\"a/\"</li><li>\"b/\"</li></ol>\n   * ```\n   * bucket.getFiles({\n   *   autoPaginate: false,\n   *   delimiter: '/'\n   * }, function(err, files, nextQuery, apiResponse) {\n   *   // files = [\n   *   //   {File} // File object for file \"a\"\n   *   // ]\n   *\n   *   // apiResponse.prefixes = [\n   *   //   'a/',\n   *   //   'b/'\n   *   // ]\n   * });\n   * ```\n   *\n   * @example\n   * Using prefixes, it's now possible to simulate a file system with follow-up requests.\n   * ```\n   * bucket.getFiles({\n   *   autoPaginate: false,\n   *   delimiter: '/',\n   *   prefix: 'a/'\n   * }, function(err, files, nextQuery, apiResponse) {\n   *   // No files found within \"directory\" a.\n   *   // files = []\n   *\n   *   // However, a \"sub-directory\" was found.\n   *   // This prefix can be used to continue traversing the \"file system\".\n   *   // apiResponse.prefixes = [\n   *   //   'a/b/'\n   *   // ]\n   * });\n   * ```\n   *\n   * @example <caption>include:samples/files.js</caption>\n   * region_tag:storage_list_files\n   * Another example:\n   *\n   * @example <caption>include:samples/files.js</caption>\n   * region_tag:storage_list_files_with_prefix\n   * Example of listing files, filtered by a prefix:\n   */\n\n\n  getFiles(queryOrCallback, callback) {\n    let query = typeof queryOrCallback === 'object' ? queryOrCallback : {};\n\n    if (!callback) {\n      callback = queryOrCallback;\n    }\n\n    query = Object.assign({}, query);\n\n    if (query.directory) {\n      query.prefix = \"\".concat(query.directory, \"/\").replace(/\\/*$/, '/');\n      delete query.directory;\n    }\n\n    this.request({\n      uri: '/o',\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const files = arrify(resp.items).map(file => {\n        const options = {};\n\n        if (query.versions) {\n          options.generation = file.generation;\n        }\n\n        if (file.kmsKeyName) {\n          options.kmsKeyName = file.kmsKeyName;\n        }\n\n        const fileInstance = this.file(file.name, options);\n        fileInstance.metadata = file;\n        return fileInstance;\n      });\n      let nextQuery = null;\n\n      if (resp.nextPageToken) {\n        nextQuery = Object.assign({}, query, {\n          pageToken: resp.nextPageToken\n        });\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      callback(null, files, nextQuery, resp);\n    });\n  }\n  /**\n   * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().\n   * @param {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * @typedef {array} GetLabelsResponse\n   * @property {object} 0 Object of labels currently set on this bucket.\n   */\n\n  /**\n   * @callback GetLabelsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} labels Object of labels currently set on this bucket.\n   */\n\n  /**\n   * Get the labels currently set on this bucket.\n   *\n   * @param {object} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {GetLabelsCallback} [callback] Callback function.\n   * @returns {Promise<GetLabelsCallback>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.getLabels(function(err, labels) {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   // labels = {\n   *   //   label: 'labelValue',\n   *   //   ...\n   *   // }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.getLabels().then(function(data) {\n   *   const labels = data[0];\n   * });\n   * ```\n   */\n\n\n  getLabels(optionsOrCallback, callback) {\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    this.getMetadata(options, (err, metadata) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      callback(null, metadata.labels || {});\n    });\n  }\n  /**\n   * @typedef {object} GetNotificationsOptions Configuration options for Bucket#getNotification().\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * @callback GetNotificationsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Notification[]} notifications Array of {@link Notification}\n   *     instances.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * @typedef {array} GetNotificationsResponse\n   * @property {Notification[]} 0 Array of {@link Notification} instances.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * Retrieves a list of notification subscriptions for a given bucket.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/list| Notifications: list}\n   *\n   * @param {GetNotificationsOptions} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {GetNotificationsCallback} [callback] Callback function.\n   * @returns {Promise<GetNotificationsResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * bucket.getNotifications(function(err, notifications, apiResponse) {\n   *   if (!err) {\n   *     // notifications is an array of Notification objects.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.getNotifications().then(function(data) {\n   *   const notifications = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/listNotifications.js</caption>\n   * region_tag:storage_list_bucket_notifications\n   * Another example:\n   */\n\n\n  getNotifications(optionsOrCallback, callback) {\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    this.request({\n      uri: '/notificationConfigs',\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      const notifications = arrify(resp.items).map(notification => {\n        const notificationInstance = this.notification(notification.id);\n        notificationInstance.metadata = notification;\n        return notificationInstance;\n      });\n      callback(null, notifications, resp);\n    });\n  }\n  /**\n   * @typedef {array} GetSignedUrlResponse\n   * @property {object} 0 The signed URL.\n   */\n\n  /**\n   * @callback GetSignedUrlCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} url The signed URL.\n   */\n\n  /**\n   * @typedef {object} GetBucketSignedUrlConfig\n   * @property {string} action Currently only supports \"list\" (HTTP: GET).\n   * @property {*} expires A timestamp when this link will expire. Any value\n   *     given is passed to `new Date()`.\n   *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n   * @property {string} [version='v2'] The signing version to use, either\n   *     'v2' or 'v4'.\n   * @property {boolean} [virtualHostedStyle=false] Use virtual hosted-style\n   *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n   *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n   *     should generally be preferred instaed of path-style URL.\n   *     Currently defaults to `false` for path-style, although this may change in a\n   *     future major-version release.\n   * @property {string} [cname] The cname for this bucket, i.e.,\n   *     \"https://cdn.example.com\".\n   *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n   * @property {object} [extensionHeaders] If these headers are used, the\n   * server will check to make sure that the client provides matching\n   * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n   * for the requirements of this feature, most notably:\n   * - The header name must be prefixed with `x-goog-`\n   * - The header name must be all lowercase\n   *\n   * Note: Multi-valued header passed as an array in the extensionHeaders\n   *       object is converted into a string, delimited by `,` with\n   *       no space. Requests made using the signed URL will need to\n   *       delimit multi-valued headers using a single `,` as well, or\n   *       else the server will report a mismatched signature.\n   * @property {object} [queryParams] Additional query parameters to include\n   *     in the signed URL.\n   */\n\n  /**\n   * Get a signed URL to allow limited time access to a bucket.\n   *\n   * In Google Cloud Platform environments, such as Cloud Functions and App\n   * Engine, you usually don't provide a `keyFilename` or `credentials` during\n   * instantiation. In those environments, we call the\n   * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n   * to create a signed URL. That API requires either the\n   * `https://www.googleapis.com/auth/iam` or\n   * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n   * enabled.\n   *\n   * See {@link https://cloud.google.com/storage/docs/access-control/signed-urls| Signed URLs Reference}\n   *\n   * @throws {Error} if an expiration timestamp from the past is given.\n   *\n   * @param {GetBucketSignedUrlConfig} config Configuration object.\n   * @param {string} config.action Currently only supports \"list\" (HTTP: GET).\n   * @param {*} config.expires A timestamp when this link will expire. Any value\n   *     given is passed to `new Date()`.\n   *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n   * @param {string} [config.version='v2'] The signing version to use, either\n   *     'v2' or 'v4'.\n   * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\n   *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n   *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n   *     should generally be preferred instaed of path-style URL.\n   *     Currently defaults to `false` for path-style, although this may change in a\n   *     future major-version release.\n   * @param {string} [config.cname] The cname for this bucket, i.e.,\n   *     \"https://cdn.example.com\".\n   *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n   * @param {object} [config.extensionHeaders] If these headers are used, the\n   * server will check to make sure that the client provides matching\n   * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n   * for the requirements of this feature, most notably:\n   * - The header name must be prefixed with `x-goog-`\n   * - The header name must be all lowercase\n   *\n   * Note: Multi-valued header passed as an array in the extensionHeaders\n   *       object is converted into a string, delimited by `,` with\n   *       no space. Requests made using the signed URL will need to\n   *       delimit multi-valued headers using a single `,` as well, or\n   *       else the server will report a mismatched signature.\n   * @property {object} [config.queryParams] Additional query parameters to include\n   *     in the signed URL.\n   * @param {GetSignedUrlCallback} [callback] Callback function.\n   * @returns {Promise<GetSignedUrlResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   *\n   * //-\n   * // Generate a URL that allows temporary access to list files in a bucket.\n   * //-\n   * const request = require('request');\n   *\n   * const config = {\n   *   action: 'list',\n   *   expires: '03-17-2025'\n   * };\n   *\n   * bucket.getSignedUrl(config, function(err, url) {\n   *   if (err) {\n   *     console.error(err);\n   *     return;\n   *   }\n   *\n   *   // The bucket is now available to be listed from this URL.\n   *   request(url, function(err, resp) {\n   *     // resp.statusCode = 200\n   *   });\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.getSignedUrl(config).then(function(data) {\n   *   const url = data[0];\n   * });\n   * ```\n   */\n\n\n  getSignedUrl(cfg, callback) {\n    const method = BucketActionToHTTPMethod[cfg.action];\n\n    if (!method) {\n      throw new Error('The action is not provided or invalid.');\n    }\n\n    const signConfig = {\n      method,\n      expires: cfg.expires,\n      version: cfg.version,\n      cname: cfg.cname,\n      extensionHeaders: cfg.extensionHeaders || {},\n      queryParams: cfg.queryParams || {}\n    };\n\n    if (!this.signer) {\n      this.signer = new signer_1.URLSigner(this.storage.authClient, this);\n    }\n\n    this.signer.getSignedUrl(signConfig).then(signedUrl => callback(null, signedUrl), callback);\n  }\n  /**\n   * @callback BucketLockCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Lock a previously-defined retention policy. This will prevent changes to\n   * the policy.\n   *\n   * @throws {Error} if a metageneration is not provided.\n   *\n   * @param {number|string} metageneration The bucket's metageneration. This is\n   *     accesssible from calling {@link File#getMetadata}.\n   * @param {BucketLockCallback} [callback] Callback function.\n   * @returns {Promise<BucketLockResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const bucket = storage.bucket('albums');\n   *\n   * const metageneration = 2;\n   *\n   * bucket.lock(metageneration, function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.lock(metageneration).then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n\n\n  lock(metageneration, callback) {\n    const metatype = typeof metageneration;\n\n    if (metatype !== 'number' && metatype !== 'string') {\n      throw new Error('A metageneration must be provided.');\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '/lockRetentionPolicy',\n      qs: {\n        ifMetagenerationMatch: metageneration\n      }\n    }, callback);\n  }\n  /**\n   * @typedef {array} MakeBucketPrivateResponse\n   * @property {File[]} 0 List of files made private.\n   */\n\n  /**\n   * @callback MakeBucketPrivateCallback\n   * @param {?Error} err Request error, if any.\n   * @param {File[]} files List of files made private.\n   */\n\n  /**\n   * @typedef {object} MakeBucketPrivateOptions\n   * @property {boolean} [includeFiles=false] Make each file in the bucket\n   *     private.\n   * @property {Metadata} [metadata] Define custom metadata properties to define\n   *     along with the operation.\n   * @property {boolean} [force] Queue errors occurred while making files\n   *     private until all files have been processed.\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * Make the bucket listing private.\n   *\n   * You may also choose to make the contents of the bucket private by\n   * specifying `includeFiles: true`. This will automatically run\n   * {@link File#makePrivate} for every file in the bucket.\n   *\n   * When specifying `includeFiles: true`, use `force: true` to delay execution\n   * of your callback until all files have been processed. By default, the\n   * callback is executed after the first error. Use `force` to queue such\n   * errors until all files have been processed, after which they will be\n   * returned as an array as the first argument to your callback.\n   *\n   * NOTE: This may cause the process to be long-running and use a high number\n   * of requests. Use with caution.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n   *\n   * @param {MakeBucketPrivateOptions} [options] Configuration options.\n   * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n   *     private.\n   * @param {Metadata} [options.metadata] Define custom metadata properties to define\n   *     along with the operation.\n   * @param {boolean} [options.force] Queue errors occurred while making files\n   *     private until all files have been processed.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {MakeBucketPrivateCallback} [callback] Callback function.\n   * @returns {Promise<MakeBucketPrivateResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Make the bucket private.\n   * //-\n   * bucket.makePrivate(function(err) {});\n   *\n   * //-\n   * // Make the bucket and its contents private.\n   * //-\n   * const opts = {\n   *   includeFiles: true\n   * };\n   *\n   * bucket.makePrivate(opts, function(err, files) {\n   *   // `err`:\n   *   //    The first error to occur, otherwise null.\n   *   //\n   *   // `files`:\n   *   //    Array of files successfully made private in the bucket.\n   * });\n   *\n   * //-\n   * // Make the bucket and its contents private, using force to suppress errors\n   * // until all files have been processed.\n   * //-\n   * const opts = {\n   *   includeFiles: true,\n   *   force: true\n   * };\n   *\n   * bucket.makePrivate(opts, function(errors, files) {\n   *   // `errors`:\n   *   //    Array of errors if any occurred, otherwise null.\n   *   //\n   *   // `files`:\n   *   //    Array of files successfully made private in the bucket.\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.makePrivate(opts).then(function(data) {\n   *   const files = data[0];\n   * });\n   * ```\n   */\n\n\n  makePrivate(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    options.private = true;\n    const query = {\n      predefinedAcl: 'projectPrivate'\n    };\n\n    if (options.userProject) {\n      query.userProject = options.userProject;\n    }\n\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata); // You aren't allowed to set both predefinedAcl & acl properties on a bucket\n    // so acl must explicitly be nullified.\n\n    const metadata = extend({}, options.metadata, {\n      acl: null\n    });\n    this.setMetadata(metadata, query).then(() => {\n      if (options.includeFiles) {\n        return util_1.promisify(this.makeAllFilesPublicPrivate_).call(this, options);\n      }\n\n      return [];\n    }).then(files => callback(null, files), callback).finally(() => {\n      this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    });\n  }\n  /**\n   * @typedef {object} MakeBucketPublicOptions\n   * @property {boolean} [includeFiles=false] Make each file in the bucket\n   *     private.\n   * @property {boolean} [force] Queue errors occurred while making files\n   *     private until all files have been processed.\n   */\n\n  /**\n   * @callback MakeBucketPublicCallback\n   * @param {?Error} err Request error, if any.\n   * @param {File[]} files List of files made public.\n   */\n\n  /**\n   * @typedef {array} MakeBucketPublicResponse\n   * @property {File[]} 0 List of files made public.\n   */\n\n  /**\n   * Make the bucket publicly readable.\n   *\n   * You may also choose to make the contents of the bucket publicly readable by\n   * specifying `includeFiles: true`. This will automatically run\n   * {@link File#makePublic} for every file in the bucket.\n   *\n   * When specifying `includeFiles: true`, use `force: true` to delay execution\n   * of your callback until all files have been processed. By default, the\n   * callback is executed after the first error. Use `force` to queue such\n   * errors until all files have been processed, after which they will be\n   * returned as an array as the first argument to your callback.\n   *\n   * NOTE: This may cause the process to be long-running and use a high number\n   * of requests. Use with caution.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n   *\n   * @param {MakeBucketPublicOptions} [options] Configuration options.\n   * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n   *     private.\n   * @param {boolean} [options.force] Queue errors occurred while making files\n   *     private until all files have been processed.\n   * @param {MakeBucketPublicCallback} [callback] Callback function.\n   * @returns {Promise<MakeBucketPublicResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Make the bucket publicly readable.\n   * //-\n   * bucket.makePublic(function(err) {});\n   *\n   * //-\n   * // Make the bucket and its contents publicly readable.\n   * //-\n   * const opts = {\n   *   includeFiles: true\n   * };\n   *\n   * bucket.makePublic(opts, function(err, files) {\n   *   // `err`:\n   *   //    The first error to occur, otherwise null.\n   *   //\n   *   // `files`:\n   *   //    Array of files successfully made public in the bucket.\n   * });\n   *\n   * //-\n   * // Make the bucket and its contents publicly readable, using force to\n   * // suppress errors until all files have been processed.\n   * //-\n   * const opts = {\n   *   includeFiles: true,\n   *   force: true\n   * };\n   *\n   * bucket.makePublic(opts, function(errors, files) {\n   *   // `errors`:\n   *   //    Array of errors if any occurred, otherwise null.\n   *   //\n   *   // `files`:\n   *   //    Array of files successfully made public in the bucket.\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.makePublic(opts).then(function(data) {\n   *   const files = data[0];\n   * });\n   * ```\n   */\n\n\n  makePublic(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    const req = extend(true, {\n      public: true\n    }, options);\n    this.acl.add({\n      entity: 'allUsers',\n      role: 'READER'\n    }).then(() => {\n      return this.acl.default.add({\n        entity: 'allUsers',\n        role: 'READER'\n      });\n    }).then(() => {\n      if (req.includeFiles) {\n        return util_1.promisify(this.makeAllFilesPublicPrivate_).call(this, req);\n      }\n\n      return [];\n    }).then(files => callback(null, files), callback);\n  }\n  /**\n   * Get a reference to a Cloud Pub/Sub Notification.\n   *\n   * @param {string} id ID of notification.\n   * @returns {Notification}\n   * @see Notification\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   * const notification = bucket.notification('1');\n   * ```\n   */\n\n\n  notification(id) {\n    if (!id) {\n      throw new Error('You must supply a notification ID.');\n    }\n\n    return new notification_1.Notification(this, id);\n  }\n  /**\n   * Remove an already-existing retention policy from this bucket, if it is not\n   * locked.\n   *\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.removeRetentionPeriod(function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.removeRetentionPeriod().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n\n\n  removeRetentionPeriod(callback) {\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n    this.setMetadata({\n      retentionPolicy: null\n    }, callback);\n    this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n  }\n  /**\n   * Makes request and applies userProject query parameter if necessary.\n   *\n   * @private\n   *\n   * @param {object} reqOpts - The request options.\n   * @param {function} callback - The callback function.\n   */\n\n\n  request(reqOpts, callback) {\n    if (this.userProject && (!reqOpts.qs || !reqOpts.qs.userProject)) {\n      reqOpts.qs = extend(reqOpts.qs, {\n        userProject: this.userProject\n      });\n    }\n\n    return super.request(reqOpts, callback);\n  }\n  /**\n   * @typedef {array} SetLabelsResponse\n   * @property {object} 0 The bucket metadata.\n   */\n\n  /**\n   * @callback SetLabelsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} metadata The bucket metadata.\n   */\n\n  /**\n   * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * Set labels on the bucket.\n   *\n   * This makes an underlying call to {@link Bucket#setMetadata}, which\n   * is a PATCH request. This means an individual label can be overwritten, but\n   * unmentioned labels will not be touched.\n   *\n   * @param {object<string, string>} labels Labels to set on the bucket.\n   * @param {SetLabelsOptions} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {SetLabelsCallback} [callback] Callback function.\n   * @returns {Promise<SetLabelsResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * const labels = {\n   *   labelone: 'labelonevalue',\n   *   labeltwo: 'labeltwovalue'\n   * };\n   *\n   * bucket.setLabels(labels, function(err, metadata) {\n   *   if (!err) {\n   *     // Labels set successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.setLabels(labels).then(function(data) {\n   *   const metadata = data[0];\n   * });\n   * ```\n   */\n\n\n  setLabels(labels, optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    callback = callback || common_1.util.noop;\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n    this.setMetadata({\n      labels\n    }, options, callback);\n    this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n  }\n  /**\n   * Lock all objects contained in the bucket, based on their creation time. Any\n   * attempt to overwrite or delete objects younger than the retention period\n   * will result in a `PERMISSION_DENIED` error.\n   *\n   * An unlocked retention policy can be modified or removed from the bucket via\n   * {@link File#removeRetentionPeriod} and {@link File#setRetentionPeriod}. A\n   * locked retention policy cannot be removed or shortened in duration for the\n   * lifetime of the bucket. Attempting to remove or decrease period of a locked\n   * retention policy will result in a `PERMISSION_DENIED` error. You can still\n   * increase the policy.\n   *\n   * @param {*} duration In seconds, the minimum retention time for all objects\n   *     contained in this bucket.\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const bucket = storage.bucket('albums');\n   *\n   * const DURATION_SECONDS = 15780000; // 6 months.\n   *\n   * //-\n   * // Lock the objects in this bucket for 6 months.\n   * //-\n   * bucket.setRetentionPeriod(DURATION_SECONDS, function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.setRetentionPeriod(DURATION_SECONDS).then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n\n\n  setRetentionPeriod(duration, callback) {\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n    this.setMetadata({\n      retentionPolicy: {\n        retentionPeriod: duration\n      }\n    }, callback);\n    this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n  }\n  /**\n   *\n   * @typedef {object} Cors\n   * @property {number} [maxAgeSeconds] The number of seconds the browser is\n   *     allowed to make requests before it must repeat the preflight request.\n   * @property {string[]} [method] HTTP method allowed for cross origin resource\n   *     sharing with this bucket.\n   * @property {string[]} [origin] an origin allowed for cross origin resource\n   *     sharing with this bucket.\n   * @property {string[]} [responseHeader] A header allowed for cross origin\n   *     resource sharing with this bucket.\n   */\n\n  /**\n   * This can be used to set the CORS configuration on the bucket.\n   *\n   * The configuration will be overwritten with the value passed into this.\n   *\n   * @param {Cors[]} corsConfiguration The new CORS configuration to set\n   * @param {number} [corsConfiguration.maxAgeSeconds] The number of seconds the browser is\n   *     allowed to make requests before it must repeat the preflight request.\n   * @param {string[]} [corsConfiguration.method] HTTP method allowed for cross origin resource\n   *     sharing with this bucket.\n   * @param {string[]} [corsConfiguration.origin] an origin allowed for cross origin resource\n   *     sharing with this bucket.\n   * @param {string[]} [corsConfiguration.responseHeader] A header allowed for cross origin\n   *     resource sharing with this bucket.\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const bucket = storage.bucket('albums');\n   *\n   * const corsConfiguration = [{maxAgeSeconds: 3600}]; // 1 hour\n   * bucket.setCorsConfiguration(corsConfiguration);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.setCorsConfiguration(corsConfiguration).then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n\n\n  setCorsConfiguration(corsConfiguration, callback) {\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n    this.setMetadata({\n      cors: corsConfiguration\n    }, callback);\n    this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n  }\n  /**\n   * @typedef {object} SetBucketStorageClassOptions\n   * @property {string} [userProject] - The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * @callback SetBucketStorageClassCallback\n   * @param {?Error} err Request error, if any.\n   */\n\n  /**\n   * Set the default storage class for new files in this bucket.\n   *\n   * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\n   *\n   * @param {string} storageClass The new storage class. (`standard`,\n   *     `nearline`, `coldline`, or `archive`).\n   *     **Note:** The storage classes `multi_regional`, `regional`, and\n   *     `durable_reduced_availability` are now legacy and will be deprecated in\n   *     the future.\n   * @param {object} [options] Configuration options.\n   * @param {string} [options.userProject] - The ID of the project which will be\n   *     billed for the request.\n   * @param {SetStorageClassCallback} [callback] Callback function.\n   * @returns {Promise}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.setStorageClass('nearline', function(err, apiResponse) {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   // The storage class was updated successfully.\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.setStorageClass('nearline').then(function() {});\n   * ```\n   */\n\n\n  setStorageClass(storageClass, optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata); // In case we get input like `storageClass`, convert to `storage_class`.\n\n    storageClass = storageClass.replace(/-/g, '_').replace(/([a-z])([A-Z])/g, (_, low, up) => {\n      return low + '_' + up;\n    }).toUpperCase();\n    this.setMetadata({\n      storageClass\n    }, options, callback);\n    this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n  }\n  /**\n   * Set a user project to be billed for all requests made from this Bucket\n   * object and any files referenced from this Bucket object.\n   *\n   * @param {string} userProject The user project.\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.setUserProject('grape-spaceship-123');\n   * ```\n   */\n\n\n  setUserProject(userProject) {\n    this.userProject = userProject;\n    const methods = ['create', 'delete', 'exists', 'get', 'getMetadata', 'setMetadata'];\n    methods.forEach(method => {\n      const methodConfig = this.methods[method];\n\n      if (typeof methodConfig === 'object') {\n        if (typeof methodConfig.reqOpts === 'object') {\n          extend(methodConfig.reqOpts.qs, {\n            userProject\n          });\n        } else {\n          methodConfig.reqOpts = {\n            qs: {\n              userProject\n            }\n          };\n        }\n      }\n    });\n  }\n  /**\n   * @typedef {object} UploadOptions Configuration options for Bucket#upload().\n   * @property {string|File} [destination] The place to save\n   *     your file. If given a string, the file will be uploaded to the bucket\n   *     using the string as a filename. When given a File object, your local\n   * file will be uploaded to the File object's bucket and under the File\n   * object's name. Lastly, when this argument is omitted, the file is uploaded\n   * to your bucket using the name of the local file.\n   * @property {string} [encryptionKey] A custom encryption key. See\n   *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n   * @property {boolean} [gzip] Automatically gzip the file. This will set\n   *     `options.metadata.contentEncoding` to `gzip`.\n   * @property {string} [kmsKeyName] The name of the Cloud KMS key that will\n   *     be used to encrypt the object. Must be in the format:\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n   * @property {object} [metadata] See an\n   *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n   * @property {string} [offset] The starting byte of the upload stream, for\n   *     resuming an interrupted upload. Defaults to 0.\n   * @property {string} [predefinedAcl] Apply a predefined set of access\n   * controls to this object.\n   *\n   * Acceptable values are:\n   * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n   *       `allAuthenticatedUsers` get `READER` access.\n   *\n   * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n   *       project team owners get `OWNER` access.\n   *\n   * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n   *       team owners get `READER` access.\n   *\n   * - **`private`** - Object owner gets `OWNER` access.\n   *\n   * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n   *       team members get access according to their roles.\n   *\n   * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n   *       get `READER` access.\n   * @property {boolean} [private] Make the uploaded file private. (Alias for\n   *     `options.predefinedAcl = 'private'`)\n   * @property {boolean} [public] Make the uploaded file public. (Alias for\n   *     `options.predefinedAcl = 'publicRead'`)\n   * @property {boolean} [resumable] Force a resumable upload. (default:\n   *     true for files larger than 5 MB).\n   * @property {number} [timeout=60000] Set the HTTP request timeout in\n   *     milliseconds. This option is not available for resumable uploads.\n   *     Default: `60000`\n   * @property {string} [uri] The URI for an already-created resumable\n   *     upload. See {@link File#createResumableUpload}.\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   * @property {string|boolean} [validation] Possible values: `\"md5\"`,\n   *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n   *     MD5 checksum for maximum reliability. CRC32c will provide better\n   *     performance with less reliability. You may also choose to skip\n   * validation completely, however this is **not recommended**.\n   */\n\n  /**\n   * @typedef {array} UploadResponse\n   * @property {object} 0 The uploaded {@link File}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback UploadCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} file The uploaded {@link File}.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Upload a file to the bucket. This is a convenience method that wraps\n   * {@link File#createWriteStream}.\n   *\n   * You can specify whether or not an upload is resumable by setting\n   * `options.resumable`. *Resumable uploads are enabled by default if your\n   * input file is larger than 5 MB.*\n   *\n   * For faster crc32c computation, you must manually install\n   * {@link https://www.npmjs.com/package/fast-crc32c| `fast-crc32c`}:\n   *\n   *     $ npm install --save fast-crc32c\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads| Upload Options (Simple or Resumable)}\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert| Objects: insert API Documentation}\n   *\n   * @param {string} pathString The fully qualified path to the file you\n   *     wish to upload to your bucket.\n   * @param {UploadOptions} [options] Configuration options.\n   * @param {string|File} [options.destination] The place to save\n   *     your file. If given a string, the file will be uploaded to the bucket\n   *     using the string as a filename. When given a File object, your local\n   * file will be uploaded to the File object's bucket and under the File\n   * object's name. Lastly, when this argument is omitted, the file is uploaded\n   * to your bucket using the name of the local file.\n   * @param {string} [options.encryptionKey] A custom encryption key. See\n   *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n   * @param {boolean} [options.gzip] Automatically gzip the file. This will set\n   *     `options.metadata.contentEncoding` to `gzip`.\n   * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n   *     be used to encrypt the object. Must be in the format:\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n   * @param {object} [options.metadata] See an\n   *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n   * @param {string} [options.offset] The starting byte of the upload stream, for\n   *     resuming an interrupted upload. Defaults to 0.\n   * @param {string} [options.predefinedAcl] Apply a predefined set of access\n   * controls to this object.\n   * Acceptable values are:\n   * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n   *   `allAuthenticatedUsers` get `READER` access.\n   *\n   * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n   *   project team owners get `OWNER` access.\n   *\n   * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n   *   team owners get `READER` access.\n   *\n   * - **`private`** - Object owner gets `OWNER` access.\n   *\n   * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n   *   team members get access according to their roles.\n   *\n   * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n   *   get `READER` access.\n   * @param {boolean} [options.private] Make the uploaded file private. (Alias for\n   *     `options.predefinedAcl = 'private'`)\n   * @param {boolean} [options.public] Make the uploaded file public. (Alias for\n   *     `options.predefinedAcl = 'publicRead'`)\n   * @param {boolean} [options.resumable] Force a resumable upload. (default:\n   *     true for files larger than 5 MB).\n   * @param {number} [options.timeout=60000] Set the HTTP request timeout in\n   *     milliseconds. This option is not available for resumable uploads.\n   *     Default: `60000`\n   * @param {string} [options.uri] The URI for an already-created resumable\n   *     upload. See {@link File#createResumableUpload}.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {string|boolean} [options.validation] Possible values: `\"md5\"`,\n   *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n   *     MD5 checksum for maximum reliability. CRC32c will provide better\n   *     performance with less reliability. You may also choose to skip\n   * validation completely, however this is **not recommended**.\n   * @param {UploadCallback} [callback] Callback function.\n   * @returns {Promise<UploadResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Upload a file from a local path.\n   * //-\n   * bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\n   *   // Your bucket now contains:\n   *   // - \"image.png\" (with the contents of `/local/path/image.png')\n   *\n   *   // `file` is an instance of a File object that refers to your new file.\n   * });\n   *\n   *\n   * //-\n   * // It's not always that easy. You will likely want to specify the filename\n   * // used when your new file lands in your bucket.\n   * //\n   * // You may also want to set metadata or customize other options.\n   * //-\n   * const options = {\n   *   destination: 'new-image.png',\n   *   resumable: true,\n   *   validation: 'crc32c',\n   *   metadata: {\n   *     metadata: {\n   *       event: 'Fall trip to the zoo'\n   *     }\n   *   }\n   * };\n   *\n   * bucket.upload('local-image.png', options, function(err, file) {\n   *   // Your bucket now contains:\n   *   // - \"new-image.png\" (with the contents of `local-image.png')\n   *\n   *   // `file` is an instance of a File object that refers to your new file.\n   * });\n   *\n   * //-\n   * // You can also have a file gzip'd on the fly.\n   * //-\n   * bucket.upload('index.html', { gzip: true }, function(err, file) {\n   *   // Your bucket now contains:\n   *   // - \"index.html\" (automatically compressed with gzip)\n   *\n   *   // Downloading the file with `file.download` will automatically decode\n   * the\n   *   // file.\n   * });\n   *\n   * //-\n   * // You may also re-use a File object, {File}, that references\n   * // the file you wish to create or overwrite.\n   * //-\n   * const options = {\n   *   destination: bucket.file('existing-file.png'),\n   *   resumable: false\n   * };\n   *\n   * bucket.upload('local-img.png', options, function(err, newFile) {\n   *   // Your bucket now contains:\n   *   // - \"existing-file.png\" (with the contents of `local-img.png')\n   *\n   *   // Note:\n   *   // The `newFile` parameter is equal to `file`.\n   * });\n   *\n   * //-\n   * // To use\n   * // <a\n   * href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">\n   * // Customer-supplied Encryption Keys</a>, provide the `encryptionKey`\n   * option.\n   * //-\n   * const crypto = require('crypto');\n   * const encryptionKey = crypto.randomBytes(32);\n   *\n   * bucket.upload('img.png', {\n   *   encryptionKey: encryptionKey\n   * }, function(err, newFile) {\n   *   // `img.png` was uploaded with your custom encryption key.\n   *\n   *   // `newFile` is already configured to use the encryption key when making\n   *   // operations on the remote object.\n   *\n   *   // However, to use your encryption key later, you must create a `File`\n   *   // instance with the `key` supplied:\n   *   const file = bucket.file('img.png', {\n   *     encryptionKey: encryptionKey\n   *   });\n   *\n   *   // Or with `file#setEncryptionKey`:\n   *   const file = bucket.file('img.png');\n   *   file.setEncryptionKey(encryptionKey);\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.upload('local-image.png').then(function(data) {\n   *   const file = data[0];\n   * });\n   *\n   * To upload a file from a URL, use {@link File#createWriteStream}.\n   *\n   * ```\n   * @example <caption>include:samples/files.js</caption>\n   * region_tag:storage_upload_file\n   * Another example:\n   *\n   * @example <caption>include:samples/encryption.js</caption>\n   * region_tag:storage_upload_encrypted_file\n   * Example of uploading an encrypted file:\n   */\n\n\n  upload(pathString, optionsOrCallback, callback) {\n    var _a, _b;\n\n    const upload = numberOfRetries => {\n      const returnValue = retry(async bail => {\n        await new Promise((resolve, reject) => {\n          var _a, _b;\n\n          if (numberOfRetries === 0 && ((_b = (_a = newFile === null || newFile === void 0 ? void 0 : newFile.storage) === null || _a === void 0 ? void 0 : _a.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry)) {\n            newFile.storage.retryOptions.autoRetry = false;\n          }\n\n          const writable = newFile.createWriteStream(options);\n\n          if (options.onUploadProgress) {\n            writable.on('progress', options.onUploadProgress);\n          }\n\n          fs.createReadStream(pathString).pipe(writable).on('error', err => {\n            if (this.storage.retryOptions.autoRetry && this.storage.retryOptions.retryableErrorFn(err)) {\n              return reject(err);\n            } else {\n              return bail(err);\n            }\n          }).on('finish', () => {\n            return resolve();\n          });\n        });\n      }, {\n        retries: numberOfRetries,\n        factor: this.storage.retryOptions.retryDelayMultiplier,\n        maxTimeout: this.storage.retryOptions.maxRetryDelay * 1000,\n        maxRetryTime: this.storage.retryOptions.totalTimeout * 1000\n      });\n\n      if (!callback) {\n        return returnValue;\n      } else {\n        return returnValue.then(() => {\n          if (callback) {\n            return callback(null, newFile, newFile.metadata);\n          }\n        }).catch(callback);\n      }\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    if (global['GCLOUD_SANDBOX_ENV']) {\n      return;\n    }\n\n    let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    options = Object.assign({\n      metadata: {}\n    }, options); // Do not retry if precondition option ifMetagenerationMatch is not set\n\n    let maxRetries = this.storage.retryOptions.maxRetries;\n\n    if (((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifMetagenerationMatch) === undefined && ((_b = this.instancePreconditionOpts) === null || _b === void 0 ? void 0 : _b.ifMetagenerationMatch) === undefined && this.storage.retryOptions.idempotencyStrategy === storage_1.IdempotencyStrategy.RetryConditional || this.storage.retryOptions.idempotencyStrategy === storage_1.IdempotencyStrategy.RetryNever) {\n      maxRetries = 0;\n    }\n\n    let newFile;\n\n    if (options.destination instanceof file_1.File) {\n      newFile = options.destination;\n    } else if (options.destination !== null && typeof options.destination === 'string') {\n      // Use the string as the name of the file.\n      newFile = this.file(options.destination, {\n        encryptionKey: options.encryptionKey,\n        kmsKeyName: options.kmsKeyName,\n        preconditionOpts: this.instancePreconditionOpts\n      });\n    } else {\n      // Resort to using the name of the incoming file.\n      const destination = path.basename(pathString);\n      newFile = this.file(destination, {\n        encryptionKey: options.encryptionKey,\n        kmsKeyName: options.kmsKeyName,\n        preconditionOpts: this.instancePreconditionOpts\n      });\n    }\n\n    if (options.resumable !== null && typeof options.resumable === 'boolean') {\n      upload(maxRetries);\n    } else {\n      // Determine if the upload should be resumable if it's over the threshold.\n      fs.stat(pathString, (err, fd) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        if (fd.size <= RESUMABLE_THRESHOLD) {\n          // Only disable resumable uploads so createWriteStream still attempts them and falls back to simple upload.\n          options.resumable = false;\n        }\n\n        upload(maxRetries);\n      });\n    }\n  }\n  /**\n   * @private\n   *\n   * @typedef {object} MakeAllFilesPublicPrivateOptions\n   * @property {boolean} [force] Suppress errors until all files have been\n   *     processed.\n   * @property {boolean} [private] Make files private.\n   * @property {boolean} [public] Make files public.\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * @private\n   *\n   * @callback SetBucketMetadataCallback\n   * @param {?Error} err Request error, if any.\n   * @param {File[]} files Files that were updated.\n   */\n\n  /**\n   * @typedef {array} MakeAllFilesPublicPrivateResponse\n   * @property {File[]} 0 List of files affected.\n   */\n\n  /**\n   * Iterate over all of a bucket's files, calling `file.makePublic()` (public)\n   * or `file.makePrivate()` (private) on each.\n   *\n   * Operations are performed in parallel, up to 10 at once. The first error\n   * breaks the loop, and will execute the provided callback with it. Specify\n   * `{ force: true }` to suppress the errors.\n   *\n   * @private\n   *\n   * @param {MakeAllFilesPublicPrivateOptions} [options] Configuration options.\n   * @param {boolean} [options.force] Suppress errors until all files have been\n   *     processed.\n   * @param {boolean} [options.private] Make files private.\n   * @param {boolean} [options.public] Make files public.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n      * @param {MakeAllFilesPublicPrivateCallback} callback Callback function.\n   *\n   * @return {Promise<MakeAllFilesPublicPrivateResponse>}\n   */\n\n\n  makeAllFilesPublicPrivate_(optionsOrCallback, callback) {\n    const MAX_PARALLEL_LIMIT = 10;\n    const errors = [];\n    const updatedFiles = [];\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n\n    const processFile = async file => {\n      try {\n        await (options.public ? file.makePublic() : file.makePrivate(options));\n        updatedFiles.push(file);\n      } catch (e) {\n        if (!options.force) {\n          throw e;\n        }\n\n        errors.push(e);\n      }\n    };\n\n    this.getFiles(options).then(_ref2 => {\n      let [files] = _ref2;\n      const limit = pLimit(MAX_PARALLEL_LIMIT);\n      const promises = files.map(file => {\n        return limit(() => processFile(file));\n      });\n      return Promise.all(promises);\n    }).then(() => callback(errors.length > 0 ? errors : null, updatedFiles), err => callback(err, updatedFiles));\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  disableAutoRetryConditionallyIdempotent_( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  coreOpts, methodType) {\n    var _a, _b;\n\n    if (typeof coreOpts === 'object' && ((_b = (_a = coreOpts === null || coreOpts === void 0 ? void 0 : coreOpts.reqOpts) === null || _a === void 0 ? void 0 : _a.qs) === null || _b === void 0 ? void 0 : _b.ifMetagenerationMatch) === undefined && (methodType === AvailableServiceObjectMethods.setMetadata || methodType === AvailableServiceObjectMethods.delete) && this.storage.retryOptions.idempotencyStrategy === storage_1.IdempotencyStrategy.RetryConditional) {\n      this.storage.retryOptions.autoRetry = false;\n    } else if (this.storage.retryOptions.idempotencyStrategy === storage_1.IdempotencyStrategy.RetryNever) {\n      this.storage.retryOptions.autoRetry = false;\n    }\n  }\n\n}\n\nexports.Bucket = Bucket;\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\n\npaginator_1.paginator.extend(Bucket, 'getFiles');\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Bucket, {\n  exclude: ['request', 'file', 'notification']\n});","map":{"version":3,"sources":["/Users/zarashipchandler/git_dir/TPEO/Week_6/homework/frontend/node_modules/@google-cloud/storage/build/src/bucket.js"],"names":["Object","defineProperty","exports","value","Bucket","AvailableServiceObjectMethods","BucketActionToHTTPMethod","common_1","require","paginator_1","promisify_1","arrify","extend","fs","mime","path","pLimit","util_1","retry","snakeize","acl_1","file_1","iam_1","notification_1","storage_1","signer_1","RESUMABLE_THRESHOLD","ServiceObject","constructor","storage","name","options","_a","_b","_c","_d","replace","requestQueryObject","preconditionOpts","ifGenerationMatch","ifGenerationNotMatch","ifMetagenerationMatch","ifMetagenerationNotMatch","userProject","methods","create","reqOpts","qs","delete","exists","get","getMetadata","setMetadata","parent","baseUrl","id","createMethod","createBucket","bind","acl","Acl","request","pathPrefix","default","iam","Iam","getFilesStream","paginator","streamify","instanceRetryValue","retryOptions","autoRetry","instancePreconditionOpts","addLifecycleRule","rule","optionsOrCallback","callback","newLifecycleRules","map","action","apiFormattedRule","condition","type","charAt","toUpperCase","slice","storageClass","Date","toISOString","disableAutoRetryConditionallyIdempotent_","append","lifecycle","err","metadata","currentLifecycleRules","concat","combine","sources","destination","Array","isArray","length","Error","convertToFile","file","File","destinationFile","util","noop","contentType","destinationContentType","maxRetries","forEach","source","undefined","idempotencyStrategy","IdempotencyStrategy","RetryConditional","RetryNever","assign","method","uri","json","sourceObjects","sourceObject","generation","resp","createChannel","config","address","apiResponse","resourceId","channel","createNotification","topic","topicIsObject","isCustomType","body","indexOf","payloadFormat","query","notification","deleteFiles","queryOrCallback","MAX_PARALLEL_LIMIT","errors","deleteFile","catch","force","push","getFiles","then","files","limit","promises","Promise","all","deleteLabels","labelsOrCallback","labels","nullLabelMap","reduce","labelKey","setLabels","getLabels","keys","disableRequesterPays","billing","requesterPays","enableLogging","prefix","logBucket","bucket","setMetadataResponse","policy","getPolicy","bindings","members","role","setPolicy","logging","logObjectPrefix","e","enableRequesterPays","directory","items","versions","kmsKeyName","fileInstance","nextQuery","nextPageToken","pageToken","getNotifications","notifications","notificationInstance","getSignedUrl","cfg","signConfig","expires","version","cname","extensionHeaders","queryParams","signer","URLSigner","authClient","signedUrl","lock","metageneration","metatype","makePrivate","private","predefinedAcl","includeFiles","promisify","makeAllFilesPublicPrivate_","call","finally","makePublic","req","public","add","entity","Notification","removeRetentionPeriod","retentionPolicy","setRetentionPeriod","duration","retentionPeriod","setCorsConfiguration","corsConfiguration","cors","setStorageClass","_","low","up","setUserProject","methodConfig","upload","pathString","numberOfRetries","returnValue","bail","resolve","reject","newFile","writable","createWriteStream","onUploadProgress","on","createReadStream","pipe","retryableErrorFn","retries","factor","retryDelayMultiplier","maxTimeout","maxRetryDelay","maxRetryTime","totalTimeout","global","encryptionKey","basename","resumable","stat","fd","size","updatedFiles","processFile","getId","coreOpts","methodType","promisifyAll","exclude"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYW,MAAAA,MAAM,EAAE;AACJF,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEV;AADC;AADL,OAnFI;;AAwFZ;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYY,MAAAA,MAAM,EAAE;AACJH,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEV;AADC;AADL,OAhII;;AAqIZ;AACZ;AACA;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYa,MAAAA,GAAG,EAAE;AACDJ,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEV;AADC;AADR,OA3LO;;AAgMZ;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYc,MAAAA,WAAW,EAAE;AACTL,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEV;AADC;AADA,OAnPD;;AAwPZ;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYe,MAAAA,WAAW,EAAE;AACTN,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEV;AADC;AADA;AA9UD,KAAhB;AAoVA,UAAM;AACFgB,MAAAA,MAAM,EAAExB,OADN;AAEFyB,MAAAA,OAAO,EAAE,IAFP;AAGFC,MAAAA,EAAE,EAAEzB,IAHF;AAIF0B,MAAAA,YAAY,EAAE3B,OAAO,CAAC4B,YAAR,CAAqBC,IAArB,CAA0B7B,OAA1B,CAJZ;AAKFe,MAAAA;AALE,KAAN;AAOA,SAAKd,IAAL,GAAYA,IAAZ;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKc,WAAL,GAAmBZ,OAAO,CAACY,WAA3B;AACA,SAAKgB,GAAL,GAAW,IAAIvC,KAAK,CAACwC,GAAV,CAAc;AACrBC,MAAAA,OAAO,EAAE,KAAKA,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CADY;AAErBI,MAAAA,UAAU,EAAE;AAFS,KAAd,CAAX;AAIA,SAAKH,GAAL,CAASI,OAAT,GAAmB,IAAI3C,KAAK,CAACwC,GAAV,CAAc;AAC7BC,MAAAA,OAAO,EAAE,KAAKA,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CADoB;AAE7BI,MAAAA,UAAU,EAAE;AAFiB,KAAd,CAAnB;AAIA,SAAKE,GAAL,GAAW,IAAI1C,KAAK,CAAC2C,GAAV,CAAc,IAAd,CAAX;AACA,SAAKC,cAAL,GAAsBzD,WAAW,CAAC0D,SAAZ,CAAsBC,SAAtB,CAAgC,UAAhC,CAAtB;AACA,SAAKC,kBAAL,GAA0BxC,OAAO,CAACyC,YAAR,CAAqBC,SAA/C;AACA,SAAKC,wBAAL,GAAgCzC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACO,gBAA1F;AACH;AACD;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACImC,EAAAA,gBAAgB,CAACC,IAAD,EAAOC,iBAAP,EAA0BC,QAA1B,EAAoC;AAChD,QAAI7C,OAAJ;;AACA,QAAI,OAAO4C,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,MAAAA,QAAQ,GAAGD,iBAAX;AACH,KAFD,MAGK,IAAIA,iBAAJ,EAAuB;AACxB5C,MAAAA,OAAO,GAAG4C,iBAAV;AACH;;AACD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D,CAAX;AACH;;AACD,WAAO,IAAIjF,MAAM,CAACoF,IAAX,CAAgB,IAAhB,EAAsB3E,IAAtB,EAA4BC,OAA5B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIuH,EAAAA,QAAQ,CAACP,eAAD,EAAkBnE,QAAlB,EAA4B;AAChC,QAAIgE,KAAK,GAAG,OAAOG,eAAP,KAA2B,QAA3B,GAAsCA,eAAtC,GAAwD,EAApE;;AACA,QAAI,CAACnE,QAAL,EAAe;AACXA,MAAAA,QAAQ,GAAGmE,eAAX;AACH;;AACDH,IAAAA,KAAK,GAAG5I,MAAM,CAACuH,MAAP,CAAc,EAAd,EAAkBqB,KAAlB,CAAR;;AACA,QAAIA,KAAK,CAAC4C,SAAV,EAAqB;AACjB5C,MAAAA,KAAK,CAAC8B,MAAN,GAAe,UAAG9B,KAAK,CAAC4C,SAAT,OAAsBpJ,OAAtB,CAA8B,MAA9B,EAAsC,GAAtC,CAAf;AACA,aAAOwG,KAAK,CAAC4C,SAAb;AACH;;AACD,SAAK3H,OAAL,CAAa;AACT4D,MAAAA,GAAG,EAAE,IADI;AAET1E,MAAAA,EAAE,EAAE6F;AAFK,KAAb,EAGG,CAAChD,GAAD,EAAMkC,IAAN,KAAe;AACd,UAAIlC,GAAJ,EAAS;AACL;AACAhB,QAAAA,QAAQ,CAACgB,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkBkC,IAAlB,CAAR;AACA;AACH;;AACD,YAAM0B,KAAK,GAAG7I,MAAM,CAACmH,IAAI,CAAC2D,KAAN,CAAN,CAAmB3G,GAAnB,CAAwB0B,IAAD,IAAU;AAC3C,cAAMzE,OAAO,GAAG,EAAhB;;AACA,YAAI6G,KAAK,CAAC8C,QAAV,EAAoB;AAChB3J,UAAAA,OAAO,CAAC8F,UAAR,GAAqBrB,IAAI,CAACqB,UAA1B;AACH;;AACD,YAAIrB,IAAI,CAACmF,UAAT,EAAqB;AACjB5J,UAAAA,OAAO,CAAC4J,UAAR,GAAqBnF,IAAI,CAACmF,UAA1B;AACH;;AACD,cAAMC,YAAY,GAAG,KAAKpF,IAAL,CAAUA,IAAI,CAAC1E,IAAf,EAAqBC,OAArB,CAArB;AACA6J,QAAAA,YAAY,CAAC/F,QAAb,GAAwBW,IAAxB;AACA,eAAOoF,YAAP;AACH,OAXa,CAAd;AAYA,UAAIC,SAAS,GAAG,IAAhB;;AACA,UAAI/D,IAAI,CAACgE,aAAT,EAAwB;AACpBD,QAAAA,SAAS,GAAG7L,MAAM,CAACuH,MAAP,CAAc,EAAd,EAAkBqB,KAAlB,EAAyB;AACjCmD,UAAAA,SAAS,EAAEjE,IAAI,CAACgE;AADiB,SAAzB,CAAZ;AAGH,OAvBa,CAwBd;;;AACAlH,MAAAA,QAAQ,CAAC,IAAD,EAAO4E,KAAP,EAAcqC,SAAd,EAAyB/D,IAAzB,CAAR;AACH,KA7BD;AA8BH;AACD;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIsC,EAAAA,SAAS,CAACzF,iBAAD,EAAoBC,QAApB,EAA8B;AACnC,QAAI7C,OAAO,GAAG,EAAd;;AACA,QAAI,OAAO4C,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,MAAAA,QAAQ,GAAGD,iBAAX;AACH,KAFD,MAGK,IAAIA,iBAAJ,EAAuB;AACxB5C,MAAAA,OAAO,GAAG4C,iBAAV;AACH;;AACD,SAAKxB,WAAL,CAAiBpB,OAAjB,EAA0B,CAAC6D,GAAD,EAAMC,QAAN,KAAmB;AACzC,UAAID,GAAJ,EAAS;AACLhB,QAAAA,QAAQ,CAACgB,GAAD,EAAM,IAAN,CAAR;AACA;AACH;;AACDhB,MAAAA,QAAQ,CAAC,IAAD,EAAOiB,QAAQ,CAACkE,MAAT,IAAmB,EAA1B,CAAR;AACH,KAND;AAOH;AACD;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIiC,EAAAA,gBAAgB,CAACrH,iBAAD,EAAoBC,QAApB,EAA8B;AAC1C,QAAI7C,OAAO,GAAG,EAAd;;AACA,QAAI,OAAO4C,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,MAAAA,QAAQ,GAAGD,iBAAX;AACH,KAFD,MAGK,IAAIA,iBAAJ,EAAuB;AACxB5C,MAAAA,OAAO,GAAG4C,iBAAV;AACH;;AACD,SAAKd,OAAL,CAAa;AACT4D,MAAAA,GAAG,EAAE,sBADI;AAET1E,MAAAA,EAAE,EAAEhB;AAFK,KAAb,EAGG,CAAC6D,GAAD,EAAMkC,IAAN,KAAe;AACd,UAAIlC,GAAJ,EAAS;AACLhB,QAAAA,QAAQ,CAACgB,GAAD,EAAM,IAAN,EAAYkC,IAAZ,CAAR;AACA;AACH;;AACD,YAAMmE,aAAa,GAAGtL,MAAM,CAACmH,IAAI,CAAC2D,KAAN,CAAN,CAAmB3G,GAAnB,CAAwB+D,YAAD,IAAkB;AAC3D,cAAMqD,oBAAoB,GAAG,KAAKrD,YAAL,CAAkBA,YAAY,CAACtF,EAA/B,CAA7B;AACA2I,QAAAA,oBAAoB,CAACrG,QAArB,GAAgCgD,YAAhC;AACA,eAAOqD,oBAAP;AACH,OAJqB,CAAtB;AAKAtH,MAAAA,QAAQ,CAAC,IAAD,EAAOqH,aAAP,EAAsBnE,IAAtB,CAAR;AACH,KAdD;AAeqE,EAAAA,YAAY,CAACC,GAAD,EAAMxH,QAAN,EAAgB;AACxB,UAAM4C,MAAM,GAAGlH,wBAAwB,CAAC8L,GAAG,CAACrH,MAAL,CAAvC;;AACA,QAAI,CAACyC,MAAL,EAAa;AACT,YAAM,IAAIlB,KAAJ,CAAU,wCAAV,CAAN;AACH;;AACD,UAAM+F,UAAU,GAAG;AACf7E,MAAAA,MADe;AAEf8E,MAAAA,OAAO,EAAEF,GAAG,CAACE,OAFE;AAGfC,MAAAA,OAAO,EAAEH,GAAG,CAACG,OAHE;AAIfC,MAAAA,KAAK,EAAEJ,GAAG,CAACI,KAJI;AAKfC,MAAAA,gBAAgB,EAAEL,GAAG,CAACK,gBAAJ,IAAwB,EAL3B;AAMfC,MAAAA,WAAW,EAAEN,GAAG,CAACM,WAAJ,IAAmB;AANjB,KAAnB;;AAQA,QAAI,CAAC,KAAKC,MAAV,EAAkB;AACd,WAAKA,MAAL,GAAc,IAAIlL,QAAQ,CAACmL,SAAb,CAAuB,KAAK/K,OAAL,CAAagL,UAApC,EAAgD,IAAhD,CAAd;AACH;;AACD,SAAKF,MAAL,CACKR,YADL,CACkBE,UADlB,EAEK9C,IAFL,CAEUuD,SAAS,IAAIlI,QAAQ,CAAC,IAAD,EAAOkI,SAAP,CAF/B,EAEkDlI,QAFlD;AAGH;AACD;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACImI,EAAAA,IAAI,CAACC,cAAD,EAAiBpI,QAAjB,EAA2B;AAC3B,UAAMqI,QAAQ,GAAG,OAAOD,cAAxB;;AACA,QAAIC,QAAQ,KAAK,QAAb,IAAyBA,QAAQ,KAAK,QAA1C,EAAoD;AAChD,YAAM,IAAI3G,KAAJ,CAAU,oCAAV,CAAN;AACH;;AACD,SAAKzC,OAAL,CAAa;AACT2D,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,GAAG,EAAE,sBAFI;AAGT1E,MAAAA,EAAE,EAAE;AACAN,QAAAA,qBAAqB,EAAEuK;AADvB;AAHK,KAAb,EAMGpI,QANH;AAOH;AACD;AACJ;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIsI,EAAAA,WAAW,CAACvI,iBAAD,EAAoBC,QAApB,EAA8B;AACrC,UAAM7C,OAAO,GAAG,OAAO4C,iBAAP,KAA6B,QAA7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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bucket = exports.AvailableServiceObjectMethods = exports.BucketActionToHTTPMethod = void 0;\nconst common_1 = require(\"@google-cloud/common\");\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst extend = require(\"extend\");\nconst fs = require(\"fs\");\nconst mime = require(\"mime-types\");\nconst path = require(\"path\");\nconst pLimit = require(\"p-limit\");\nconst util_1 = require(\"util\");\nconst retry = require(\"async-retry\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst snakeize = require('snakeize');\nconst acl_1 = require(\"./acl\");\nconst file_1 = require(\"./file\");\nconst iam_1 = require(\"./iam\");\nconst notification_1 = require(\"./notification\");\nconst storage_1 = require(\"./storage\");\nconst signer_1 = require(\"./signer\");\nvar BucketActionToHTTPMethod;\n(function (BucketActionToHTTPMethod) {\n    BucketActionToHTTPMethod[\"list\"] = \"GET\";\n})(BucketActionToHTTPMethod = exports.BucketActionToHTTPMethod || (exports.BucketActionToHTTPMethod = {}));\nvar AvailableServiceObjectMethods;\n(function (AvailableServiceObjectMethods) {\n    AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"setMetadata\"] = 0] = \"setMetadata\";\n    AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"delete\"] = 1] = \"delete\";\n})(AvailableServiceObjectMethods = exports.AvailableServiceObjectMethods || (exports.AvailableServiceObjectMethods = {}));\n/**\n * The size of a file (in bytes) must be greater than this number to\n * automatically trigger a resumable upload.\n *\n * @const {number}\n * @private\n */\nconst RESUMABLE_THRESHOLD = 5000000;\n/**\n * Get and set IAM policies for your bucket.\n *\n * @name Bucket#iam\n * @mixes Iam\n *\n * See {@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}\n * See {@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}\n * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * //-\n * // Get the IAM policy for your bucket.\n * //-\n * bucket.iam.getPolicy(function(err, policy) {\n *   console.log(policy);\n * });\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * bucket.iam.getPolicy().then(function(data) {\n *   const policy = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_view_bucket_iam_members\n * Example of retrieving a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_add_bucket_iam_member\n * Example of adding to a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_remove_bucket_iam_member\n * Example of removing from a bucket's IAM policy:\n */\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against\n * an object or bucket (for example, `READ` or `WRITE`); the entity defines\n * who the permission applies to (for example, a specific user or group of\n * users).\n *\n * The `acl` object on a Bucket instance provides methods to get you a list of\n * the ACLs defined on your bucket, as well as set, update, and delete them.\n *\n * Buckets also have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. Default ACLs specify permissions that all new\n * objects added to the bucket will inherit by default. You can add, delete,\n * get, and update entities and permissions for these as well with\n * {@link Bucket#acl.default}.\n *\n * See {@link http://goo.gl/6qBBPO| About Access Control Lists}\n * See {@link https://cloud.google.com/storage/docs/access-control/lists#default| Default ACLs}\n *\n * @name Bucket#acl\n * @mixes Acl\n * @property {Acl} default Cloud Storage Buckets have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. You can add, delete, get, and update entities and\n * permissions for these as well. The method signatures and examples are all\n * the same, after only prefixing the method call with `default`.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n *\n * //-\n * // Make a bucket's contents publicly readable.\n * //-\n * const myBucket = storage.bucket('my-bucket');\n *\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * myBucket.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myBucket.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl\n * Example of printing a bucket's ACL:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl_for_user\n * Example of printing a bucket's ACL for a specific user:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_owner\n * Example of adding an owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_owner\n * Example of removing an owner from a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_default_owner\n * Example of adding a default owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_default_owner\n * Example of removing a default owner from a bucket:\n */\n/**\n * The API-formatted resource description of the bucket.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Bucket#metadata\n * @type {object}\n */\n/**\n * The bucket's name.\n * @name Bucket#name\n * @type {string}\n */\n/**\n * Get {@link File} objects for the files currently in the bucket as a\n * readable object stream.\n *\n * @method Bucket#getFilesStream\n * @param {GetFilesOptions} [query] Query object for listing files.\n * @returns {ReadableStream} A readable stream that emits {@link File} instances.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * bucket.getFilesStream()\n *   .on('error', console.error)\n *   .on('data', function(file) {\n *     // file is a File object.\n *   })\n *   .on('end', function() {\n *     // All files retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * bucket.getFilesStream()\n *   .on('data', function(file) {\n *     this.end();\n *   });\n *\n * //-\n * // If you're filtering files with a delimiter, you should use\n * // {@link Bucket#getFiles} and set `autoPaginate: false` in order to\n * // preserve the `apiResponse` argument.\n * //-\n * const prefixes = [];\n *\n * function callback(err, files, nextQuery, apiResponse) {\n *   prefixes = prefixes.concat(apiResponse.prefixes);\n *\n *   if (nextQuery) {\n *     bucket.getFiles(nextQuery, callback);\n *   } else {\n *     // prefixes = The finished array of prefixes.\n *   }\n * }\n *\n * bucket.getFiles({\n *   autoPaginate: false,\n *   delimiter: '/'\n * }, callback);\n * ```\n */\n/**\n * Create a Bucket object to interact with a Cloud Storage bucket.\n *\n * @class\n * @hideconstructor\n *\n * @param {Storage} storage A {@link Storage} instance.\n * @param {string} name The name of the bucket.\n * @param {object} [options] Configuration object.\n * @param {string} [options.userProject] User project.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n * ```\n */\nclass Bucket extends common_1.ServiceObject {\n    constructor(storage, name, options) {\n        var _a, _b, _c, _d;\n        options = options || {};\n        // Allow for \"gs://\"-style input, and strip any trailing slashes.\n        name = name.replace(/^gs:\\/\\//, '').replace(/\\/+$/, '');\n        const requestQueryObject = {};\n        if ((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) {\n            requestQueryObject.ifGenerationMatch =\n                options.preconditionOpts.ifGenerationMatch;\n        }\n        if ((_b = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationNotMatch) {\n            requestQueryObject.ifGenerationNotMatch =\n                options.preconditionOpts.ifGenerationNotMatch;\n        }\n        if ((_c = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _c === void 0 ? void 0 : _c.ifMetagenerationMatch) {\n            requestQueryObject.ifMetagenerationMatch =\n                options.preconditionOpts.ifMetagenerationMatch;\n        }\n        if ((_d = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _d === void 0 ? void 0 : _d.ifMetagenerationNotMatch) {\n            requestQueryObject.ifMetagenerationNotMatch =\n                options.preconditionOpts.ifMetagenerationNotMatch;\n        }\n        const userProject = options.userProject;\n        if (typeof userProject === 'string') {\n            requestQueryObject.userProject = userProject;\n        }\n        const methods = {\n            /**\n             * Create a bucket.\n             *\n             * @method Bucket#create\n             * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n             * @param {CreateBucketCallback} [callback] Callback function.\n             * @returns {Promise<CreateBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             * bucket.create(function(err, bucket, apiResponse) {\n             *   if (!err) {\n             *     // The bucket was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.create().then(function(data) {\n             *   const bucket = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            create: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} DeleteBucketOptions Configuration options.\n             * @property {boolean} [ignoreNotFound = false] Ignore an error if\n             *     the bucket does not exist.\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} DeleteBucketResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * @callback DeleteBucketCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Delete the bucket.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/delete| Buckets: delete API Documentation}\n             *\n             * @method Bucket#delete\n             * @param {DeleteBucketOptions} [options] Configuration options.\n             * @param {boolean} [options.ignoreNotFound = false] Ignore an error if\n             *     the bucket does not exist.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {DeleteBucketCallback} [callback] Callback function.\n             * @returns {Promise<DeleteBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             * bucket.delete(function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.delete().then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/buckets.js</caption>\n             * region_tag:storage_delete_bucket\n             * Another example:\n             */\n            delete: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} BucketExistsResponse\n             * @property {boolean} 0 Whether the {@link Bucket} exists.\n             */\n            /**\n             * @callback BucketExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the {@link Bucket} exists.\n             */\n            /**\n             * Check if the bucket exists.\n             *\n             * @method Bucket#exists\n             * @param {BucketExistsOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {BucketExistsCallback} [callback] Callback function.\n             * @returns {Promise<BucketExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()\n             * @property {boolean} [autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} GetBucketResponse\n             * @property {Bucket} 0 The {@link Bucket}.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetBucketCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Bucket} bucket The {@link Bucket}.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Get a bucket if it exists.\n             *\n             * You may optionally use this to \"get or create\" an object by providing\n             * an object with `autoCreate` set to `true`. Any extra configuration that\n             * is normally required for the `create` method must be contained within\n             * this object as well.\n             *\n             * @method Bucket#get\n             * @param {GetBucketOptions} [options] Configuration options.\n             * @param {boolean} [options.autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetBucketCallback} [callback] Callback function.\n             * @returns {Promise<GetBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.get(function(err, bucket, apiResponse) {\n             *   // `bucket.metadata` has been populated.\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.get().then(function(data) {\n             *   const bucket = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} GetBucketMetadataResponse\n             * @property {object} 0 The bucket metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetBucketMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The bucket metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * Get the bucket's metadata.\n             *\n             * To set metadata, see {@link Bucket#setMetadata}.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/get| Buckets: get API Documentation}\n             *\n             * @method Bucket#getMetadata\n             * @param {GetBucketMetadataOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetBucketMetadataCallback} [callback] Callback function.\n             * @returns {Promise<GetBucketMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.getMetadata(function(err, metadata, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.getMetadata().then(function(data) {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/requesterPays.js</caption>\n             * region_tag:storage_get_requester_pays_status\n             * Example of retrieving the requester pays status of a bucket:\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} SetBucketMetadataResponse\n             * @property {object} apiResponse The full API response.\n             */\n            /**\n             * @callback SetBucketMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The bucket metadata.\n             */\n            /**\n             * Set the bucket's metadata.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n             *\n             * @method Bucket#setMetadata\n             * @param {object<string, *>} metadata The metadata you wish to set.\n             * @param {SetBucketMetadataOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {SetBucketMetadataCallback} [callback] Callback function.\n             * @returns {Promise<SetBucketMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * //-\n             * // Set website metadata field on the bucket.\n             * //-\n             * const metadata = {\n             *   website: {\n             *     mainPageSuffix: 'http://example.com',\n             *     notFoundPage: 'http://example.com/404.html'\n             *   }\n             * };\n             *\n             * bucket.setMetadata(metadata, function(err, apiResponse) {});\n             *\n             * //-\n             * // Enable versioning for your bucket.\n             * //-\n             * bucket.setMetadata({\n             *   versioning: {\n             *     enabled: true\n             *   }\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Enable KMS encryption for objects within this bucket.\n             * //-\n             * bucket.setMetadata({\n             *   encryption: {\n             *     defaultKmsKeyName: 'projects/grape-spaceship-123/...'\n             *   }\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Set the default event-based hold value for new objects in this\n             * // bucket.\n             * //-\n             * bucket.setMetadata({\n             *   defaultEventBasedHold: true\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Remove object lifecycle rules.\n             * //-\n             * bucket.setMetadata({\n             *   lifecycle: null\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.setMetadata(metadata).then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             * ```\n             */\n            setMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n        };\n        super({\n            parent: storage,\n            baseUrl: '/b',\n            id: name,\n            createMethod: storage.createBucket.bind(storage),\n            methods,\n        });\n        this.name = name;\n        this.storage = storage;\n        this.userProject = options.userProject;\n        this.acl = new acl_1.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/acl',\n        });\n        this.acl.default = new acl_1.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/defaultObjectAcl',\n        });\n        this.iam = new iam_1.Iam(this);\n        this.getFilesStream = paginator_1.paginator.streamify('getFiles');\n        this.instanceRetryValue = storage.retryOptions.autoRetry;\n        this.instancePreconditionOpts = options === null || options === void 0 ? void 0 : options.preconditionOpts;\n    }\n    /**\n     * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().\n     * @property {boolean} [append=true] The new rules will be appended to any\n     *     pre-existing rules.\n     */\n    /**\n     *\n     * @typedef {object} LifecycleRule The new lifecycle rule to be added to objects\n     *     in this bucket.\n     * @property {string|object} action The action to be taken upon matching of\n     *     all the conditions 'delete' or 'setStorageClass'.\n     *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n     *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n     * @property {object} condition Condition a bucket must meet before the\n     *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n     * @property {string} [storageClass] When using the `setStorageClass`\n     *     action, provide this option to dictate which storage class the object\n     *     should update to. Please see\n     *     [SetStorageClass option documentation]{@link https://cloud.google.com/storage/docs/lifecycle#setstorageclass} for supported transitions.\n     */\n    /**\n     * Add an object lifecycle management rule to the bucket.\n     *\n     * By default, an Object Lifecycle Management rule provided to this method\n     * will be included to the existing policy. To replace all existing rules,\n     * supply the `options` argument, setting `append` to `false`.\n     *\n     * See {@link https://cloud.google.com/storage/docs/lifecycle| Object Lifecycle Management}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {LifecycleRule} rule The new lifecycle rule to be added to objects\n     *     in this bucket.\n     * @param {string|object} rule.action The action to be taken upon matching of\n     *     all the conditions 'delete' or 'setStorageClass'.\n     *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n     *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n     * @param {object} rule.condition Condition a bucket must meet before the\n     *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n     * @param {string} [rule.storageClass] When using the `setStorageClass`\n     *     action, provide this option to dictate which storage class the object\n     *     should update to.\n     * @param {AddLifecycleRuleOptions} [options] Configuration object.\n     * @param {boolean} [options.append=true] Append the new rule to the existing\n     *     policy.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Automatically have an object deleted from this bucket once it is 3 years\n     * // of age.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     age: 365 * 3 // Specified in days.\n     *   }\n     * }, function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   const lifecycleRules = bucket.metadata.lifecycle.rule;\n     *\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\n     *   lifecycleRules.forEach(lifecycleRule => {});\n     * });\n     *\n     * //-\n     * // By default, the rule you provide will be added to the existing policy.\n     * // Optionally, you can disable this behavior to replace all of the\n     * // pre-existing rules.\n     * //-\n     * const options = {\n     *   append: false\n     * };\n     *\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     age: 365 * 3 // Specified in days.\n     *   }\n     * }, options, function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // All rules have been replaced with the new \"delete\" rule.\n     *\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\n     *   lifecycleRules.forEach(lifecycleRule => {});\n     * });\n     *\n     * //-\n     * // For objects created before 2018, \"downgrade\" the storage class.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'setStorageClass',\n     *   storageClass: 'COLDLINE',\n     *   condition: {\n     *     createdBefore: new Date('2018')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete objects created before 2016 which have the Coldline storage\n     * // class.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     matchesStorageClass: [\n     *       'COLDLINE'\n     *     ],\n     *     createdBefore: new Date('2016')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a noncurrent timestamp that is at least 100 days.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     daysSinceNoncurrentTime: 100\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a noncurrent timestamp before 2020-01-01.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     noncurrentTimeBefore: new Date('2020-01-01')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a customTime that is at least 100 days.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     daysSinceCustomTime: 100\n     *   }\n     * }, function(err, apiResponse) ());\n     *\n     * //-\n     * // Delete object that has a customTime before 2020-01-01.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     customTimeBefore: new Date('2020-01-01')\n     *   }\n     * }, function(err, apiResponse) {});\n     * ```\n     */\n    addLifecycleRule(rule, optionsOrCallback, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        const newLifecycleRules = arrify(rule).map(rule => {\n            if (typeof rule.action === 'object') {\n                // This is a raw-formatted rule object, the way the API expects.\n                // Just pass it through as-is.\n                return rule;\n            }\n            const apiFormattedRule = {};\n            apiFormattedRule.condition = {};\n            apiFormattedRule.action = {\n                type: rule.action.charAt(0).toUpperCase() + rule.action.slice(1),\n            };\n            if (rule.storageClass) {\n                apiFormattedRule.action.storageClass = rule.storageClass;\n            }\n            for (const condition in rule.condition) {\n                if (rule.condition[condition] instanceof Date) {\n                    apiFormattedRule.condition[condition] = rule.condition[condition]\n                        .toISOString()\n                        .replace(/T.+$/, '');\n                }\n                else {\n                    apiFormattedRule.condition[condition] = rule.condition[condition];\n                }\n            }\n            return apiFormattedRule;\n        });\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n        if (options.append === false) {\n            this.setMetadata({ lifecycle: { rule: newLifecycleRules } }, callback);\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            return;\n        }\n        // The default behavior appends the previously-defined lifecycle rules with\n        // the new ones just passed in by the user.\n        this.getMetadata((err, metadata) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            const currentLifecycleRules = arrify(metadata.lifecycle && metadata.lifecycle.rule);\n            this.setMetadata({\n                lifecycle: {\n                    rule: currentLifecycleRules.concat(newLifecycleRules),\n                },\n            }, callback);\n        });\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * @typedef {object} CombineOptions\n     * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of\n     *     the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback CombineCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File} newFile The new {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} CombineResponse\n     * @property {File} 0 The new {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Combine multiple files into one new file.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/compose| Objects: compose API Documentation}\n     *\n     * @throws {Error} if a non-array is provided as sources argument.\n     * @throws {Error} if no sources are provided.\n     * @throws {Error} if no destination is provided.\n     *\n     * @param {string[]|File[]} sources The source files that will be\n     *     combined.\n     * @param {string|File} destination The file you would like the\n     *     source files combined into.\n     * @param {CombineOptions} [options] Configuration options.\n     * @param {string} [options.kmsKeyName] Resource name of the Cloud KMS key, of\n     *     the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n  \n     * @param {CombineCallback} [callback] Callback function.\n     * @returns {Promise<CombineResponse>}\n     *\n     * @example\n     * ```\n     * const logBucket = storage.bucket('log-bucket');\n     *\n     * const sources = [\n     *   logBucket.file('2013-logs.txt'),\n     *   logBucket.file('2014-logs.txt')\n     * ];\n     *\n     * const allLogs = logBucket.file('all-logs.txt');\n     *\n     * logBucket.combine(sources, allLogs, function(err, newFile, apiResponse) {\n     *   // newFile === allLogs\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * logBucket.combine(sources, allLogs).then(function(data) {\n     *   const newFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    combine(sources, destination, optionsOrCallback, callback) {\n        if (!Array.isArray(sources) || sources.length === 0) {\n            throw new Error('You must provide at least one source file.');\n        }\n        if (!destination) {\n            throw new Error('A destination file must be specified.');\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        const convertToFile = (file) => {\n            if (file instanceof file_1.File) {\n                return file;\n            }\n            return this.file(file);\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        sources = sources.map(convertToFile);\n        const destinationFile = convertToFile(destination);\n        callback = callback || common_1.util.noop;\n        if (!destinationFile.metadata.contentType) {\n            const destinationContentType = mime.contentType(destinationFile.name);\n            if (destinationContentType) {\n                destinationFile.metadata.contentType = destinationContentType;\n            }\n        }\n        let maxRetries = this.storage.retryOptions.maxRetries;\n        sources.forEach(source => {\n            var _a;\n            if ((((_a = source === null || source === void 0 ? void 0 : source.instancePreconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined &&\n                this.storage.retryOptions.idempotencyStrategy ===\n                    storage_1.IdempotencyStrategy.RetryConditional) ||\n                this.storage.retryOptions.idempotencyStrategy ===\n                    storage_1.IdempotencyStrategy.RetryNever) {\n                maxRetries = 0;\n            }\n        });\n        Object.assign(options, this.instancePreconditionOpts, options);\n        // Make the request from the destination File object.\n        destinationFile.request({\n            method: 'POST',\n            uri: '/compose',\n            maxRetries,\n            json: {\n                destination: {\n                    contentType: destinationFile.metadata.contentType,\n                },\n                sourceObjects: sources.map(source => {\n                    var _a, _b, _c, _d;\n                    const sourceObject = {\n                        name: source.name,\n                    };\n                    if (((_a = source === null || source === void 0 ? void 0 : source.metadata) === null || _a === void 0 ? void 0 : _a.generation) || ((_b = source === null || source === void 0 ? void 0 : source.instancePreconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch)) {\n                        sourceObject.generation =\n                            ((_c = source === null || source === void 0 ? void 0 : source.metadata) === null || _c === void 0 ? void 0 : _c.generation) || ((_d = source === null || source === void 0 ? void 0 : source.instancePreconditionOpts) === null || _d === void 0 ? void 0 : _d.ifGenerationMatch);\n                    }\n                    return sourceObject;\n                }),\n            },\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, destinationFile, resp);\n        });\n    }\n    /**\n     * See a {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll request body}.\n     *\n     * @typedef {object} CreateChannelConfig\n     * @property {string} address The address where notifications are\n     *     delivered for this channel.\n     * @property {string} [delimiter] Returns results in a directory-like mode.\n     * @property {number} [maxResults] Maximum number of `items` plus `prefixes`\n     *     to return in a single page of responses.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @property {string} [projection=noAcl] Set of properties to return.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {boolean} [versions=false] If `true`, lists all versions of an object\n     *     as distinct results.\n     */\n    /**\n     * @typedef {object} CreateChannelOptions\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} CreateChannelResponse\n     * @property {Channel} 0 The new {@link Channel}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateChannelCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Channel} channel The new {@link Channel}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Create a channel that will be notified when objects in this bucket changes.\n     *\n     * @throws {Error} If an ID is not provided.\n     * @throws {Error} If an address is not provided.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll API Documentation}\n     *\n     * @param {string} id The ID of the channel to create.\n     * @param {CreateChannelConfig} config Configuration for creating channel.\n     * @param {string} config.address The address where notifications are\n     *     delivered for this channel.\n     * @param {string} [config.delimiter] Returns results in a directory-like mode.\n     * @param {number} [config.maxResults] Maximum number of `items` plus `prefixes`\n     *     to return in a single page of responses.\n     * @param {string} [config.pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @param {string} [config.prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @param {string} [config.projection=noAcl] Set of properties to return.\n     * @param {string} [config.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {boolean} [config.versions=false] If `true`, lists all versions of an object\n     *     as distinct results.\n     * @param {CreateChannelOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {CreateChannelCallback} [callback] Callback function.\n     * @returns {Promise<CreateChannelResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const id = 'new-channel-id';\n     *\n     * const config = {\n     *   address: 'https://...'\n     * };\n     *\n     * bucket.createChannel(id, config, function(err, channel, apiResponse) {\n     *   if (!err) {\n     *     // Channel created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.createChannel(id, config).then(function(data) {\n     *   const channel = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    createChannel(id, config, optionsOrCallback, callback) {\n        if (typeof id !== 'string') {\n            throw new Error('An ID is required to create a channel.');\n        }\n        if (typeof config.address !== 'string') {\n            throw new Error('An address is required to create a channel.');\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/o/watch',\n            json: Object.assign({\n                id,\n                type: 'web_hook',\n            }, config),\n            qs: options,\n        }, (err, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            const resourceId = apiResponse.resourceId;\n            const channel = this.storage.channel(id, resourceId);\n            channel.metadata = apiResponse;\n            callback(null, channel, apiResponse);\n        });\n    }\n    /**\n     * Metadata to set for the Notification.\n     *\n     * @typedef {object} CreateNotificationOptions\n     * @property {object} [customAttributes] An optional list of additional\n     *     attributes to attach to each Cloud PubSub message published for this\n     *     notification subscription.\n     * @property {string[]} [eventTypes] If present, only send notifications about\n     *     listed event types. If empty, sent notifications for all event types.\n     * @property {string} [objectNamePrefix] If present, only apply this\n     *     notification configuration to object names that begin with this prefix.\n     * @property {string} [payloadFormat] The desired content of the Payload.\n     * Defaults to `JSON_API_V1`.\n     *\n     * Acceptable values are:\n     * - `JSON_API_V1`\n     *\n     * - `NONE`\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback CreateNotificationCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification} notification The new {@link Notification}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} CreateNotificationResponse\n     * @property {Notification} 0 The new {@link Notification}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Creates a notification subscription for the bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n     *\n     * @param {Topic|string} topic The Cloud PubSub topic to which this\n     * subscription publishes. If the project ID is omitted, the current\n     * project ID will be used.\n     *\n     * Acceptable formats are:\n     * - `projects/grape-spaceship-123/topics/my-topic`\n     *\n     * - `my-topic`\n     * @param {CreateNotificationOptions} [options] Metadata to set for the\n     *     notification.\n     * @param {object} [options.customAttributes] An optional list of additional\n     *     attributes to attach to each Cloud PubSub message published for this\n     *     notification subscription.\n     * @param {string[]} [options.eventTypes] If present, only send notifications about\n     *     listed event types. If empty, sent notifications for all event types.\n     * @param {string} [options.objectNamePrefix] If present, only apply this\n     *     notification configuration to object names that begin with this prefix.\n     * @param {string} [options.payloadFormat] The desired content of the Payload.\n     * Defaults to `JSON_API_V1`.\n     *\n     * Acceptable values are:\n     * - `JSON_API_V1`\n     *\n     * - `NONE`\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {CreateNotificationCallback} [callback] Callback function.\n     * @returns {Promise<CreateNotificationResponse>}\n     * @throws {Error} If a valid topic is not provided.\n     * @see Notification#create\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const callback = function(err, notification, apiResponse) {\n     *   if (!err) {\n     *     // The notification was created successfully.\n     *   }\n     * };\n     *\n     * myBucket.createNotification('my-topic', callback);\n     *\n     * //-\n     * // Configure the nofiication by providing Notification metadata.\n     * //-\n     * const metadata = {\n     *   objectNamePrefix: 'prefix-'\n     * };\n     *\n     * myBucket.createNotification('my-topic', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.createNotification('my-topic').then(function(data) {\n     *   const notification = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/createNotification.js</caption>\n     * region_tag:storage_create_bucket_notifications\n     * Another example:\n     */\n    createNotification(topic, optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        const topicIsObject = topic !== null && typeof topic === 'object';\n        if (topicIsObject && common_1.util.isCustomType(topic, 'pubsub/topic')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            topic = topic.name;\n        }\n        if (typeof topic !== 'string') {\n            throw new Error('A valid topic name is required.');\n        }\n        const body = Object.assign({ topic }, options);\n        if (body.topic.indexOf('projects') !== 0) {\n            body.topic = 'projects/{{projectId}}/topics/' + body.topic;\n        }\n        body.topic = '//pubsub.googleapis.com/' + body.topic;\n        if (!body.payloadFormat) {\n            body.payloadFormat = 'JSON_API_V1';\n        }\n        const query = {};\n        if (body.userProject) {\n            query.userProject = body.userProject;\n            delete body.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/notificationConfigs',\n            json: snakeize(body),\n            qs: query,\n            maxRetries: 0,\n        }, (err, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            const notification = this.notification(apiResponse.id);\n            notification.metadata = apiResponse;\n            callback(null, notification, apiResponse);\n        });\n    }\n    /**\n     * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}\n     *     for all of the supported properties.\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     */\n    /**\n     * @callback DeleteFilesCallback\n     * @param {?Error|?Error[]} err Request error, if any, or array of errors from\n     *     files that were not able to be deleted.\n     * @param {object} [apiResponse] The full API response.\n     */\n    /**\n     * Iterate over the bucket's files, calling `file.delete()` on each.\n     *\n     * <strong>This is not an atomic request.</strong> A delete attempt will be\n     * made for each file individually. Any one can fail, in which case only a\n     * portion of the files you intended to be deleted would have.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors until all files have had a chance\n     * to be processed.\n     *\n     * The `query` object passed as the first argument will also be passed to\n     * {@link Bucket#getFiles}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete| Objects: delete API Documentation}\n     *\n     * @param {DeleteFilesOptions} [query] Query object. See {@link Bucket#getFiles}\n     * @param {boolean} [query.force] Suppress errors until all files have been\n     *     processed.\n     * @param {DeleteFilesCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the files in the bucket.\n     * //-\n     * bucket.deleteFiles(function(err) {});\n     *\n     * //-\n     * // By default, if a file cannot be deleted, this method will stop deleting\n     * // files from your bucket. You can override this setting with `force:\n     * // true`.\n     * //-\n     * bucket.deleteFiles({\n     *   force: true\n     * }, function(errors) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     * });\n     *\n     * //-\n     * // The first argument to this method acts as a query to\n     * // {@link Bucket#getFiles}. As an example, you can delete files\n     * // which match a prefix.\n     * //-\n     * bucket.deleteFiles({\n     *   prefix: 'images/'\n     * }, function(err) {\n     *   if (!err) {\n     *     // All files in the `images` directory have been deleted.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteFiles().then(function() {});\n     * ```\n     */\n    deleteFiles(queryOrCallback, callback) {\n        let query = {};\n        if (typeof queryOrCallback === 'function') {\n            callback = queryOrCallback;\n        }\n        else if (queryOrCallback) {\n            query = queryOrCallback;\n        }\n        const MAX_PARALLEL_LIMIT = 10;\n        const errors = [];\n        const deleteFile = (file) => {\n            return file.delete(query).catch(err => {\n                if (!query.force) {\n                    throw err;\n                }\n                errors.push(err);\n            });\n        };\n        this.getFiles(query)\n            .then(([files]) => {\n            const limit = pLimit(MAX_PARALLEL_LIMIT);\n            const promises = files.map(file => {\n                return limit(() => deleteFile(file));\n            });\n            return Promise.all(promises);\n        })\n            .then(() => callback(errors.length > 0 ? errors : null), callback);\n    }\n    /**\n     * @typedef {array} DeleteLabelsResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback DeleteLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata Bucket's metadata.\n     */\n    /**\n     * Delete one or more labels from this bucket.\n     *\n     * @param {string|string[]} [labels] The labels to delete. If no labels are\n     *     provided, all of the labels are removed.\n     * @param {DeleteLabelsCallback} [callback] Callback function.\n     * @returns {Promise<DeleteLabelsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the labels from this bucket.\n     * //-\n     * bucket.deleteLabels(function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a single label.\n     * //-\n     * bucket.deleteLabels('labelone', function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a specific set of labels.\n     * //-\n     * bucket.deleteLabels([\n     *   'labelone',\n     *   'labeltwo'\n     * ], function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteLabels().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    deleteLabels(labelsOrCallback, callback) {\n        let labels = new Array();\n        if (typeof labelsOrCallback === 'function') {\n            callback = labelsOrCallback;\n        }\n        else if (labelsOrCallback) {\n            labels = arrify(labelsOrCallback);\n        }\n        const deleteLabels = (labels) => {\n            const nullLabelMap = labels.reduce((nullLabelMap, labelKey) => {\n                nullLabelMap[labelKey] = null;\n                return nullLabelMap;\n            }, {});\n            this.setLabels(nullLabelMap, callback);\n        };\n        if (labels.length === 0) {\n            this.getLabels((err, labels) => {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                deleteLabels(Object.keys(labels));\n            });\n        }\n        else {\n            deleteLabels(labels);\n        }\n    }\n    /**\n     * @typedef {array} DisableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback DisableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Disable `requesterPays` functionality from this bucket.\n     *\n     * @param {DisableRequesterPaysCallback} [callback] Callback function.\n     * @returns {Promise<DisableRequesterPaysCallback>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.disableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality disabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.disableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_disable_requester_pays\n     * Example of disabling requester pays:\n     */\n    disableRequesterPays(callback) {\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n        this.setMetadata({\n            billing: {\n                requesterPays: false,\n            },\n        }, callback || common_1.util.noop);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * Configuration object for enabling logging.\n     *\n     * @typedef {object} EnableLoggingOptions\n     * @property {string|Bucket} [bucket] The bucket for the log entries. By\n     *     default, the current bucket is used.\n     * @property {string} prefix A unique prefix for log object names.\n     */\n    /**\n     * Enable logging functionality for this bucket. This will make two API\n     * requests, first to grant Cloud Storage WRITE permission to the bucket, then\n     * to set the appropriate configuration on the Bucket's metadata.\n     *\n     * @param {EnableLoggingOptions} config Configuration options.\n     * @param {string|Bucket} [config.bucket] The bucket for the log entries. By\n     *     default, the current bucket is used.\n     * @param {string} config.prefix A unique prefix for log object names.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const config = {\n     *   prefix: 'log'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {\n     *   if (!err) {\n     *     // Logging functionality enabled successfully.\n     *   }\n     * });\n     *\n     * ```\n     * @example\n     * Optionally, provide a destination bucket.\n     * ```\n     * const config = {\n     *   prefix: 'log',\n     *   bucket: 'destination-bucket'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {});\n     * ```\n     *\n     * @example\n     * If the callback is omitted, we'll return a Promise.\n     * ```\n     * bucket.enableLogging(config).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    enableLogging(config, callback) {\n        if (!config ||\n            typeof config === 'function' ||\n            typeof config.prefix === 'undefined') {\n            throw new Error('A configuration object with a prefix is required.');\n        }\n        const logBucket = config.bucket\n            ? config.bucket.id || config.bucket\n            : this.id;\n        (async () => {\n            let setMetadataResponse;\n            try {\n                const [policy] = await this.iam.getPolicy();\n                policy.bindings.push({\n                    members: ['group:cloud-storage-analytics@google.com'],\n                    role: 'roles/storage.objectCreator',\n                });\n                await this.iam.setPolicy(policy);\n                this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n                [setMetadataResponse] = await this.setMetadata({\n                    logging: {\n                        logBucket,\n                        logObjectPrefix: config.prefix,\n                    },\n                });\n            }\n            catch (e) {\n                callback(e);\n                return;\n            }\n            finally {\n                this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            }\n            callback(null, setMetadataResponse);\n        })();\n    }\n    /**\n     * @typedef {array} EnableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback EnableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Enable `requesterPays` functionality for this bucket. This enables you, the\n     * bucket owner, to have the requesting user assume the charges for the access\n     * to your bucket and its contents.\n     *\n     * @param {EnableRequesterPaysCallback} [callback] Callback function.\n     * @returns {Promise<EnableRequesterPaysResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.enableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality enabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.enableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_enable_requester_pays\n     * Example of enabling requester pays:\n     */\n    enableRequesterPays(callback) {\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n        this.setMetadata({\n            billing: {\n                requesterPays: true,\n            },\n        }, callback || common_1.util.noop);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * Create a {@link File} object. See {@link File} to see how to handle\n     * the different use cases you may have.\n     *\n     * @param {string} name The name of the file in this bucket.\n     * @param {FileOptions} [options] Configuration options.\n     * @param {string|number} [options.generation] Only use a specific revision of\n     *     this file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     *     KMS key ring must use the same location as the bucket.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for all requests made from File object.\n     * @returns {File}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const file = bucket.file('my-existing-file.png');\n     * ```\n     */\n    file(name, options) {\n        if (!name) {\n            throw Error('A file name must be specified.');\n        }\n        return new file_1.File(this, name, options);\n    }\n    /**\n     * @typedef {array} GetFilesResponse\n     * @property {File[]} 0 Array of {@link File} instances.\n     * @param {object} nextQuery 1 A query object to receive more results.\n     * @param {object} apiResponse 2 The full API response.\n     */\n    /**\n     * @callback GetFilesCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Array of {@link File} instances.\n     * @param {object} nextQuery A query object to receive more results.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Query object for listing files.\n     *\n     * @typedef {object} GetFilesOptions\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {string} [delimiter] Results will contain only objects whose\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\n     *     names, aside from the prefix, contain delimiter will have their name\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n     *     Duplicate prefixes are omitted.\n     * @deprecated @property {string} [directory] Filter results based on a directory name, or\n     *     more technically, a \"prefix\". Assumes delimeter to be '/'. Deprecated. Use prefix instead.\n     * @property {string} [endOffset] Filter results to objects whose names are\n     * lexicographically before endOffset. If startOffset is also set, the objects\n     * listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @property {boolean} [includeTrailingDelimiter] If true, objects that end in\n     * exactly one instance of delimiter have their metadata included in items[]\n     * in addition to the relevant part of the object name appearing in prefixes[].\n     * @property {string} [prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [startOffset] Filter results to objects whose names are\n     * lexicographically equal to or after startOffset. If endOffset is also set,\n     * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {boolean} [versions] If true, returns File objects scoped to\n     *     their versions.\n     */\n    /**\n     * Get {@link File} objects for the files currently in the bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/list| Objects: list API Documentation}\n     *\n     * @param {GetFilesOptions} [query] Query object for listing files.\n     * @param {boolean} [query.autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @param {string} [query.delimiter] Results will contain only objects whose\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\n     *     names, aside from the prefix, contain delimiter will have their name\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n     *     Duplicate prefixes are omitted.\n     * @deprecated @param {string} [query.directory] Filter results based on a directory name, or\n     *     more technically, a \"prefix\". Assumes delimeter to be '/'. Deprecated. Use query.prefix instead.\n     * @param {string} [query.endOffset] Filter results to objects whose names are\n     * lexicographically before endOffset. If startOffset is also set, the objects\n     * listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @param {boolean} [query.includeTrailingDelimiter] If true, objects that end in\n     * exactly one instance of delimiter have their metadata included in items[]\n     * in addition to the relevant part of the object name appearing in prefixes[].\n     * @param {string} [query.prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @param {number} [query.maxApiCalls] Maximum number of API calls to make.\n     * @param {number} [query.maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @param {string} [query.pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @param {string} [query.startOffset] Filter results to objects whose names are\n     * lexicographically equal to or after startOffset. If endOffset is also set,\n     * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @param {string} [query.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {boolean} [query.versions] If true, returns File objects scoped to\n     *     their versions.\n     * @param {GetFilesCallback} [callback] Callback function.\n     * @returns {Promise<GetFilesResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getFiles(function(err, files) {\n     *   if (!err) {\n     *     // files is an array of File objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If your bucket has versioning enabled, you can get all of your files\n     * // scoped to their generation.\n     * //-\n     * bucket.getFiles({\n     *   versions: true\n     * }, function(err, files) {\n     *   // Each file is scoped to its generation.\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, files, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     bucket.getFiles(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   files[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   files[0].getMetadata(function(err, metadata) {});\n     * };\n     *\n     * bucket.getFiles({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getFiles().then(function(data) {\n     *   const files = data[0];\n     * });\n     *\n     * ```\n     * @example\n     * <h6>Simulating a File System</h6><p>With `autoPaginate: false`, it's possible to iterate over files which incorporate a common structure using a delimiter.</p><p>Consider the following remote objects:</p><ol><li>\"a\"</li><li>\"a/b/c/d\"</li><li>\"b/d/e\"</li></ol><p>Using a delimiter of `/` will return a single file, \"a\".</p><p>`apiResponse.prefixes` will return the \"sub-directories\" that were found:</p><ol><li>\"a/\"</li><li>\"b/\"</li></ol>\n     * ```\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // files = [\n     *   //   {File} // File object for file \"a\"\n     *   // ]\n     *\n     *   // apiResponse.prefixes = [\n     *   //   'a/',\n     *   //   'b/'\n     *   // ]\n     * });\n     * ```\n     *\n     * @example\n     * Using prefixes, it's now possible to simulate a file system with follow-up requests.\n     * ```\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/',\n     *   prefix: 'a/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // No files found within \"directory\" a.\n     *   // files = []\n     *\n     *   // However, a \"sub-directory\" was found.\n     *   // This prefix can be used to continue traversing the \"file system\".\n     *   // apiResponse.prefixes = [\n     *   //   'a/b/'\n     *   // ]\n     * });\n     * ```\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files\n     * Another example:\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files_with_prefix\n     * Example of listing files, filtered by a prefix:\n     */\n    getFiles(queryOrCallback, callback) {\n        let query = typeof queryOrCallback === 'object' ? queryOrCallback : {};\n        if (!callback) {\n            callback = queryOrCallback;\n        }\n        query = Object.assign({}, query);\n        if (query.directory) {\n            query.prefix = `${query.directory}/`.replace(/\\/*$/, '/');\n            delete query.directory;\n        }\n        this.request({\n            uri: '/o',\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                callback(err, null, null, resp);\n                return;\n            }\n            const files = arrify(resp.items).map((file) => {\n                const options = {};\n                if (query.versions) {\n                    options.generation = file.generation;\n                }\n                if (file.kmsKeyName) {\n                    options.kmsKeyName = file.kmsKeyName;\n                }\n                const fileInstance = this.file(file.name, options);\n                fileInstance.metadata = file;\n                return fileInstance;\n            });\n            let nextQuery = null;\n            if (resp.nextPageToken) {\n                nextQuery = Object.assign({}, query, {\n                    pageToken: resp.nextPageToken,\n                });\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            callback(null, files, nextQuery, resp);\n        });\n    }\n    /**\n     * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} GetLabelsResponse\n     * @property {object} 0 Object of labels currently set on this bucket.\n     */\n    /**\n     * @callback GetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} labels Object of labels currently set on this bucket.\n     */\n    /**\n     * Get the labels currently set on this bucket.\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<GetLabelsCallback>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getLabels(function(err, labels) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // labels = {\n     *   //   label: 'labelValue',\n     *   //   ...\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getLabels().then(function(data) {\n     *   const labels = data[0];\n     * });\n     * ```\n     */\n    getLabels(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.getMetadata(options, (err, metadata) => {\n            if (err) {\n                callback(err, null);\n                return;\n            }\n            callback(null, metadata.labels || {});\n        });\n    }\n    /**\n     * @typedef {object} GetNotificationsOptions Configuration options for Bucket#getNotification().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback GetNotificationsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification[]} notifications Array of {@link Notification}\n     *     instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} GetNotificationsResponse\n     * @property {Notification[]} 0 Array of {@link Notification} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Retrieves a list of notification subscriptions for a given bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/list| Notifications: list}\n     *\n     * @param {GetNotificationsOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetNotificationsCallback} [callback] Callback function.\n     * @returns {Promise<GetNotificationsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * bucket.getNotifications(function(err, notifications, apiResponse) {\n     *   if (!err) {\n     *     // notifications is an array of Notification objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getNotifications().then(function(data) {\n     *   const notifications = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/listNotifications.js</caption>\n     * region_tag:storage_list_bucket_notifications\n     * Another example:\n     */\n    getNotifications(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.request({\n            uri: '/notificationConfigs',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const notifications = arrify(resp.items).map((notification) => {\n                const notificationInstance = this.notification(notification.id);\n                notificationInstance.metadata = notification;\n                return notificationInstance;\n            });\n            callback(null, notifications, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetSignedUrlResponse\n     * @property {object} 0 The signed URL.\n     */\n    /**\n     * @callback GetSignedUrlCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} url The signed URL.\n     */\n    /**\n     * @typedef {object} GetBucketSignedUrlConfig\n     * @property {string} action Currently only supports \"list\" (HTTP: GET).\n     * @property {*} expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     * @property {string} [version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @property {boolean} [virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @property {string} [cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @property {object} [extensionHeaders] If these headers are used, the\n     * server will check to make sure that the client provides matching\n     * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n     * for the requirements of this feature, most notably:\n     * - The header name must be prefixed with `x-goog-`\n     * - The header name must be all lowercase\n     *\n     * Note: Multi-valued header passed as an array in the extensionHeaders\n     *       object is converted into a string, delimited by `,` with\n     *       no space. Requests made using the signed URL will need to\n     *       delimit multi-valued headers using a single `,` as well, or\n     *       else the server will report a mismatched signature.\n     * @property {object} [queryParams] Additional query parameters to include\n     *     in the signed URL.\n     */\n    /**\n     * Get a signed URL to allow limited time access to a bucket.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n     * to create a signed URL. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * See {@link https://cloud.google.com/storage/docs/access-control/signed-urls| Signed URLs Reference}\n     *\n     * @throws {Error} if an expiration timestamp from the past is given.\n     *\n     * @param {GetBucketSignedUrlConfig} config Configuration object.\n     * @param {string} config.action Currently only supports \"list\" (HTTP: GET).\n     * @param {*} config.expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     * @param {string} [config.version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @param {string} [config.cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @param {object} [config.extensionHeaders] If these headers are used, the\n     * server will check to make sure that the client provides matching\n     * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n     * for the requirements of this feature, most notably:\n     * - The header name must be prefixed with `x-goog-`\n     * - The header name must be all lowercase\n     *\n     * Note: Multi-valued header passed as an array in the extensionHeaders\n     *       object is converted into a string, delimited by `,` with\n     *       no space. Requests made using the signed URL will need to\n     *       delimit multi-valued headers using a single `,` as well, or\n     *       else the server will report a mismatched signature.\n     * @property {object} [config.queryParams] Additional query parameters to include\n     *     in the signed URL.\n     * @param {GetSignedUrlCallback} [callback] Callback function.\n     * @returns {Promise<GetSignedUrlResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Generate a URL that allows temporary access to list files in a bucket.\n     * //-\n     * const request = require('request');\n     *\n     * const config = {\n     *   action: 'list',\n     *   expires: '03-17-2025'\n     * };\n     *\n     * bucket.getSignedUrl(config, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The bucket is now available to be listed from this URL.\n     *   request(url, function(err, resp) {\n     *     // resp.statusCode = 200\n     *   });\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getSignedUrl(config).then(function(data) {\n     *   const url = data[0];\n     * });\n     * ```\n     */\n    getSignedUrl(cfg, callback) {\n        const method = BucketActionToHTTPMethod[cfg.action];\n        if (!method) {\n            throw new Error('The action is not provided or invalid.');\n        }\n        const signConfig = {\n            method,\n            expires: cfg.expires,\n            version: cfg.version,\n            cname: cfg.cname,\n            extensionHeaders: cfg.extensionHeaders || {},\n            queryParams: cfg.queryParams || {},\n        };\n        if (!this.signer) {\n            this.signer = new signer_1.URLSigner(this.storage.authClient, this);\n        }\n        this.signer\n            .getSignedUrl(signConfig)\n            .then(signedUrl => callback(null, signedUrl), callback);\n    }\n    /**\n     * @callback BucketLockCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Lock a previously-defined retention policy. This will prevent changes to\n     * the policy.\n     *\n     * @throws {Error} if a metageneration is not provided.\n     *\n     * @param {number|string} metageneration The bucket's metageneration. This is\n     *     accesssible from calling {@link File#getMetadata}.\n     * @param {BucketLockCallback} [callback] Callback function.\n     * @returns {Promise<BucketLockResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const metageneration = 2;\n     *\n     * bucket.lock(metageneration, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.lock(metageneration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    lock(metageneration, callback) {\n        const metatype = typeof metageneration;\n        if (metatype !== 'number' && metatype !== 'string') {\n            throw new Error('A metageneration must be provided.');\n        }\n        this.request({\n            method: 'POST',\n            uri: '/lockRetentionPolicy',\n            qs: {\n                ifMetagenerationMatch: metageneration,\n            },\n        }, callback);\n    }\n    /**\n     * @typedef {array} MakeBucketPrivateResponse\n     * @property {File[]} 0 List of files made private.\n     */\n    /**\n     * @callback MakeBucketPrivateCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made private.\n     */\n    /**\n     * @typedef {object} MakeBucketPrivateOptions\n     * @property {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @property {Metadata} [metadata] Define custom metadata properties to define\n     *     along with the operation.\n     * @property {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Make the bucket listing private.\n     *\n     * You may also choose to make the contents of the bucket private by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePrivate} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {MakeBucketPrivateOptions} [options] Configuration options.\n     * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {Metadata} [options.metadata] Define custom metadata properties to define\n     *     along with the operation.\n     * @param {boolean} [options.force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {MakeBucketPrivateCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPrivateResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket private.\n     * //-\n     * bucket.makePrivate(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents private.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents private, using force to suppress errors\n     * // until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePrivate(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     * ```\n     */\n    makePrivate(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        options.private = true;\n        const query = {\n            predefinedAcl: 'projectPrivate',\n        };\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n        // You aren't allowed to set both predefinedAcl & acl properties on a bucket\n        // so acl must explicitly be nullified.\n        const metadata = extend({}, options.metadata, { acl: null });\n        this.setMetadata(metadata, query)\n            .then(() => {\n            if (options.includeFiles) {\n                return util_1.promisify(this.makeAllFilesPublicPrivate_).call(this, options);\n            }\n            return [];\n        })\n            .then(files => callback(null, files), callback)\n            .finally(() => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n        });\n    }\n    /**\n     * @typedef {object} MakeBucketPublicOptions\n     * @property {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @property {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     */\n    /**\n     * @callback MakeBucketPublicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made public.\n     */\n    /**\n     * @typedef {array} MakeBucketPublicResponse\n     * @property {File[]} 0 List of files made public.\n     */\n    /**\n     * Make the bucket publicly readable.\n     *\n     * You may also choose to make the contents of the bucket publicly readable by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePublic} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {MakeBucketPublicOptions} [options] Configuration options.\n     * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {boolean} [options.force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @param {MakeBucketPublicCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPublicResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket publicly readable.\n     * //-\n     * bucket.makePublic(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePublic(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable, using force to\n     * // suppress errors until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePublic(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePublic(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     * ```\n     */\n    makePublic(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const req = extend(true, { public: true }, options);\n        this.acl\n            .add({\n            entity: 'allUsers',\n            role: 'READER',\n        })\n            .then(() => {\n            return this.acl.default.add({\n                entity: 'allUsers',\n                role: 'READER',\n            });\n        })\n            .then(() => {\n            if (req.includeFiles) {\n                return util_1.promisify(this.makeAllFilesPublicPrivate_).call(this, req);\n            }\n            return [];\n        })\n            .then(files => callback(null, files), callback);\n    }\n    /**\n     * Get a reference to a Cloud Pub/Sub Notification.\n     *\n     * @param {string} id ID of notification.\n     * @returns {Notification}\n     * @see Notification\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const notification = bucket.notification('1');\n     * ```\n     */\n    notification(id) {\n        if (!id) {\n            throw new Error('You must supply a notification ID.');\n        }\n        return new notification_1.Notification(this, id);\n    }\n    /**\n     * Remove an already-existing retention policy from this bucket, if it is not\n     * locked.\n     *\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.removeRetentionPeriod(function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.removeRetentionPeriod().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    removeRetentionPeriod(callback) {\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n        this.setMetadata({\n            retentionPolicy: null,\n        }, callback);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * Makes request and applies userProject query parameter if necessary.\n     *\n     * @private\n     *\n     * @param {object} reqOpts - The request options.\n     * @param {function} callback - The callback function.\n     */\n    request(reqOpts, callback) {\n        if (this.userProject && (!reqOpts.qs || !reqOpts.qs.userProject)) {\n            reqOpts.qs = extend(reqOpts.qs, { userProject: this.userProject });\n        }\n        return super.request(reqOpts, callback);\n    }\n    /**\n     * @typedef {array} SetLabelsResponse\n     * @property {object} 0 The bucket metadata.\n     */\n    /**\n     * @callback SetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata The bucket metadata.\n     */\n    /**\n     * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Set labels on the bucket.\n     *\n     * This makes an underlying call to {@link Bucket#setMetadata}, which\n     * is a PATCH request. This means an individual label can be overwritten, but\n     * unmentioned labels will not be touched.\n     *\n     * @param {object<string, string>} labels Labels to set on the bucket.\n     * @param {SetLabelsOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {SetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<SetLabelsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const labels = {\n     *   labelone: 'labelonevalue',\n     *   labeltwo: 'labeltwovalue'\n     * };\n     *\n     * bucket.setLabels(labels, function(err, metadata) {\n     *   if (!err) {\n     *     // Labels set successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setLabels(labels).then(function(data) {\n     *   const metadata = data[0];\n     * });\n     * ```\n     */\n    setLabels(labels, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        callback = callback || common_1.util.noop;\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n        this.setMetadata({ labels }, options, callback);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * Lock all objects contained in the bucket, based on their creation time. Any\n     * attempt to overwrite or delete objects younger than the retention period\n     * will result in a `PERMISSION_DENIED` error.\n     *\n     * An unlocked retention policy can be modified or removed from the bucket via\n     * {@link File#removeRetentionPeriod} and {@link File#setRetentionPeriod}. A\n     * locked retention policy cannot be removed or shortened in duration for the\n     * lifetime of the bucket. Attempting to remove or decrease period of a locked\n     * retention policy will result in a `PERMISSION_DENIED` error. You can still\n     * increase the policy.\n     *\n     * @param {*} duration In seconds, the minimum retention time for all objects\n     *     contained in this bucket.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const DURATION_SECONDS = 15780000; // 6 months.\n     *\n     * //-\n     * // Lock the objects in this bucket for 6 months.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    setRetentionPeriod(duration, callback) {\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n        this.setMetadata({\n            retentionPolicy: {\n                retentionPeriod: duration,\n            },\n        }, callback);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     *\n     * @typedef {object} Cors\n     * @property {number} [maxAgeSeconds] The number of seconds the browser is\n     *     allowed to make requests before it must repeat the preflight request.\n     * @property {string[]} [method] HTTP method allowed for cross origin resource\n     *     sharing with this bucket.\n     * @property {string[]} [origin] an origin allowed for cross origin resource\n     *     sharing with this bucket.\n     * @property {string[]} [responseHeader] A header allowed for cross origin\n     *     resource sharing with this bucket.\n     */\n    /**\n     * This can be used to set the CORS configuration on the bucket.\n     *\n     * The configuration will be overwritten with the value passed into this.\n     *\n     * @param {Cors[]} corsConfiguration The new CORS configuration to set\n     * @param {number} [corsConfiguration.maxAgeSeconds] The number of seconds the browser is\n     *     allowed to make requests before it must repeat the preflight request.\n     * @param {string[]} [corsConfiguration.method] HTTP method allowed for cross origin resource\n     *     sharing with this bucket.\n     * @param {string[]} [corsConfiguration.origin] an origin allowed for cross origin resource\n     *     sharing with this bucket.\n     * @param {string[]} [corsConfiguration.responseHeader] A header allowed for cross origin\n     *     resource sharing with this bucket.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const corsConfiguration = [{maxAgeSeconds: 3600}]; // 1 hour\n     * bucket.setCorsConfiguration(corsConfiguration);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setCorsConfiguration(corsConfiguration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    setCorsConfiguration(corsConfiguration, callback) {\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n        this.setMetadata({\n            cors: corsConfiguration,\n        }, callback);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * @typedef {object} SetBucketStorageClassOptions\n     * @property {string} [userProject] - The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback SetBucketStorageClassCallback\n     * @param {?Error} err Request error, if any.\n     */\n    /**\n     * Set the default storage class for new files in this bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\n     *\n     * @param {string} storageClass The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] - The ID of the project which will be\n     *     billed for the request.\n     * @param {SetStorageClassCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setStorageClass('nearline', function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // The storage class was updated successfully.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setStorageClass('nearline').then(function() {});\n     * ```\n     */\n    setStorageClass(storageClass, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata);\n        // In case we get input like `storageClass`, convert to `storage_class`.\n        storageClass = storageClass\n            .replace(/-/g, '_')\n            .replace(/([a-z])([A-Z])/g, (_, low, up) => {\n            return low + '_' + up;\n        })\n            .toUpperCase();\n        this.setMetadata({ storageClass }, options, callback);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * Set a user project to be billed for all requests made from this Bucket\n     * object and any files referenced from this Bucket object.\n     *\n     * @param {string} userProject The user project.\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setUserProject('grape-spaceship-123');\n     * ```\n     */\n    setUserProject(userProject) {\n        this.userProject = userProject;\n        const methods = [\n            'create',\n            'delete',\n            'exists',\n            'get',\n            'getMetadata',\n            'setMetadata',\n        ];\n        methods.forEach(method => {\n            const methodConfig = this.methods[method];\n            if (typeof methodConfig === 'object') {\n                if (typeof methodConfig.reqOpts === 'object') {\n                    extend(methodConfig.reqOpts.qs, { userProject });\n                }\n                else {\n                    methodConfig.reqOpts = {\n                        qs: { userProject },\n                    };\n                }\n            }\n        });\n    }\n    /**\n     * @typedef {object} UploadOptions Configuration options for Bucket#upload().\n     * @property {string|File} [destination] The place to save\n     *     your file. If given a string, the file will be uploaded to the bucket\n     *     using the string as a filename. When given a File object, your local\n     * file will be uploaded to the File object's bucket and under the File\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\n     * to your bucket using the name of the local file.\n     * @property {string} [encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @property {boolean} [gzip] Automatically gzip the file. This will set\n     *     `options.metadata.contentEncoding` to `gzip`.\n     * @property {string} [kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     * @property {object} [metadata] See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n     * @property {string} [offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @property {string} [predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     *\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *       `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *       project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *       team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *       team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *       get `READER` access.\n     * @property {boolean} [private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @property {boolean} [public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @property {boolean} [resumable] Force a resumable upload. (default:\n     *     true for files larger than 5 MB).\n     * @property {number} [timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @property {string} [uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {string|boolean} [validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\n     *     performance with less reliability. You may also choose to skip\n     * validation completely, however this is **not recommended**.\n     */\n    /**\n     * @typedef {array} UploadResponse\n     * @property {object} 0 The uploaded {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback UploadCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} file The uploaded {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Upload a file to the bucket. This is a convenience method that wraps\n     * {@link File#createWriteStream}.\n     *\n     * You can specify whether or not an upload is resumable by setting\n     * `options.resumable`. *Resumable uploads are enabled by default if your\n     * input file is larger than 5 MB.*\n     *\n     * For faster crc32c computation, you must manually install\n     * {@link https://www.npmjs.com/package/fast-crc32c| `fast-crc32c`}:\n     *\n     *     $ npm install --save fast-crc32c\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads| Upload Options (Simple or Resumable)}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert| Objects: insert API Documentation}\n     *\n     * @param {string} pathString The fully qualified path to the file you\n     *     wish to upload to your bucket.\n     * @param {UploadOptions} [options] Configuration options.\n     * @param {string|File} [options.destination] The place to save\n     *     your file. If given a string, the file will be uploaded to the bucket\n     *     using the string as a filename. When given a File object, your local\n     * file will be uploaded to the File object's bucket and under the File\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\n     * to your bucket using the name of the local file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @param {boolean} [options.gzip] Automatically gzip the file. This will set\n     *     `options.metadata.contentEncoding` to `gzip`.\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     * @param {object} [options.metadata] See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n     * @param {string} [options.offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @param {string} [options.predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *   `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *   project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *   team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *   team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *   get `READER` access.\n     * @param {boolean} [options.private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @param {boolean} [options.public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @param {boolean} [options.resumable] Force a resumable upload. (default:\n     *     true for files larger than 5 MB).\n     * @param {number} [options.timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @param {string} [options.uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {string|boolean} [options.validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\n     *     performance with less reliability. You may also choose to skip\n     * validation completely, however this is **not recommended**.\n     * @param {UploadCallback} [callback] Callback function.\n     * @returns {Promise<UploadResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Upload a file from a local path.\n     * //-\n     * bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\n     *   // Your bucket now contains:\n     *   // - \"image.png\" (with the contents of `/local/path/image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     *\n     * //-\n     * // It's not always that easy. You will likely want to specify the filename\n     * // used when your new file lands in your bucket.\n     * //\n     * // You may also want to set metadata or customize other options.\n     * //-\n     * const options = {\n     *   destination: 'new-image.png',\n     *   resumable: true,\n     *   validation: 'crc32c',\n     *   metadata: {\n     *     metadata: {\n     *       event: 'Fall trip to the zoo'\n     *     }\n     *   }\n     * };\n     *\n     * bucket.upload('local-image.png', options, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"new-image.png\" (with the contents of `local-image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     * //-\n     * // You can also have a file gzip'd on the fly.\n     * //-\n     * bucket.upload('index.html', { gzip: true }, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"index.html\" (automatically compressed with gzip)\n     *\n     *   // Downloading the file with `file.download` will automatically decode\n     * the\n     *   // file.\n     * });\n     *\n     * //-\n     * // You may also re-use a File object, {File}, that references\n     * // the file you wish to create or overwrite.\n     * //-\n     * const options = {\n     *   destination: bucket.file('existing-file.png'),\n     *   resumable: false\n     * };\n     *\n     * bucket.upload('local-img.png', options, function(err, newFile) {\n     *   // Your bucket now contains:\n     *   // - \"existing-file.png\" (with the contents of `local-img.png')\n     *\n     *   // Note:\n     *   // The `newFile` parameter is equal to `file`.\n     * });\n     *\n     * //-\n     * // To use\n     * // <a\n     * href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">\n     * // Customer-supplied Encryption Keys</a>, provide the `encryptionKey`\n     * option.\n     * //-\n     * const crypto = require('crypto');\n     * const encryptionKey = crypto.randomBytes(32);\n     *\n     * bucket.upload('img.png', {\n     *   encryptionKey: encryptionKey\n     * }, function(err, newFile) {\n     *   // `img.png` was uploaded with your custom encryption key.\n     *\n     *   // `newFile` is already configured to use the encryption key when making\n     *   // operations on the remote object.\n     *\n     *   // However, to use your encryption key later, you must create a `File`\n     *   // instance with the `key` supplied:\n     *   const file = bucket.file('img.png', {\n     *     encryptionKey: encryptionKey\n     *   });\n     *\n     *   // Or with `file#setEncryptionKey`:\n     *   const file = bucket.file('img.png');\n     *   file.setEncryptionKey(encryptionKey);\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.upload('local-image.png').then(function(data) {\n     *   const file = data[0];\n     * });\n     *\n     * To upload a file from a URL, use {@link File#createWriteStream}.\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_upload_file\n     * Another example:\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_upload_encrypted_file\n     * Example of uploading an encrypted file:\n     */\n    upload(pathString, optionsOrCallback, callback) {\n        var _a, _b;\n        const upload = (numberOfRetries) => {\n            const returnValue = retry(async (bail) => {\n                await new Promise((resolve, reject) => {\n                    var _a, _b;\n                    if (numberOfRetries === 0 && ((_b = (_a = newFile === null || newFile === void 0 ? void 0 : newFile.storage) === null || _a === void 0 ? void 0 : _a.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry)) {\n                        newFile.storage.retryOptions.autoRetry = false;\n                    }\n                    const writable = newFile.createWriteStream(options);\n                    if (options.onUploadProgress) {\n                        writable.on('progress', options.onUploadProgress);\n                    }\n                    fs.createReadStream(pathString)\n                        .pipe(writable)\n                        .on('error', err => {\n                        if (this.storage.retryOptions.autoRetry &&\n                            this.storage.retryOptions.retryableErrorFn(err)) {\n                            return reject(err);\n                        }\n                        else {\n                            return bail(err);\n                        }\n                    })\n                        .on('finish', () => {\n                        return resolve();\n                    });\n                });\n            }, {\n                retries: numberOfRetries,\n                factor: this.storage.retryOptions.retryDelayMultiplier,\n                maxTimeout: this.storage.retryOptions.maxRetryDelay * 1000,\n                maxRetryTime: this.storage.retryOptions.totalTimeout * 1000,\n            });\n            if (!callback) {\n                return returnValue;\n            }\n            else {\n                return returnValue\n                    .then(() => {\n                    if (callback) {\n                        return callback(null, newFile, newFile.metadata);\n                    }\n                })\n                    .catch(callback);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (global['GCLOUD_SANDBOX_ENV']) {\n            return;\n        }\n        let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        options = Object.assign({\n            metadata: {},\n        }, options);\n        // Do not retry if precondition option ifMetagenerationMatch is not set\n        let maxRetries = this.storage.retryOptions.maxRetries;\n        if ((((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifMetagenerationMatch) === undefined &&\n            ((_b = this.instancePreconditionOpts) === null || _b === void 0 ? void 0 : _b.ifMetagenerationMatch) === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                storage_1.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                storage_1.IdempotencyStrategy.RetryNever) {\n            maxRetries = 0;\n        }\n        let newFile;\n        if (options.destination instanceof file_1.File) {\n            newFile = options.destination;\n        }\n        else if (options.destination !== null &&\n            typeof options.destination === 'string') {\n            // Use the string as the name of the file.\n            newFile = this.file(options.destination, {\n                encryptionKey: options.encryptionKey,\n                kmsKeyName: options.kmsKeyName,\n                preconditionOpts: this.instancePreconditionOpts,\n            });\n        }\n        else {\n            // Resort to using the name of the incoming file.\n            const destination = path.basename(pathString);\n            newFile = this.file(destination, {\n                encryptionKey: options.encryptionKey,\n                kmsKeyName: options.kmsKeyName,\n                preconditionOpts: this.instancePreconditionOpts,\n            });\n        }\n        if (options.resumable !== null && typeof options.resumable === 'boolean') {\n            upload(maxRetries);\n        }\n        else {\n            // Determine if the upload should be resumable if it's over the threshold.\n            fs.stat(pathString, (err, fd) => {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                if (fd.size <= RESUMABLE_THRESHOLD) {\n                    // Only disable resumable uploads so createWriteStream still attempts them and falls back to simple upload.\n                    options.resumable = false;\n                }\n                upload(maxRetries);\n            });\n        }\n    }\n    /**\n     * @private\n     *\n     * @typedef {object} MakeAllFilesPublicPrivateOptions\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     * @property {boolean} [private] Make files private.\n     * @property {boolean} [public] Make files public.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @private\n     *\n     * @callback SetBucketMetadataCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Files that were updated.\n     */\n    /**\n     * @typedef {array} MakeAllFilesPublicPrivateResponse\n     * @property {File[]} 0 List of files affected.\n     */\n    /**\n     * Iterate over all of a bucket's files, calling `file.makePublic()` (public)\n     * or `file.makePrivate()` (private) on each.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop, and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors.\n     *\n     * @private\n     *\n     * @param {MakeAllFilesPublicPrivateOptions} [options] Configuration options.\n     * @param {boolean} [options.force] Suppress errors until all files have been\n     *     processed.\n     * @param {boolean} [options.private] Make files private.\n     * @param {boolean} [options.public] Make files public.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n  \n     * @param {MakeAllFilesPublicPrivateCallback} callback Callback function.\n     *\n     * @return {Promise<MakeAllFilesPublicPrivateResponse>}\n     */\n    makeAllFilesPublicPrivate_(optionsOrCallback, callback) {\n        const MAX_PARALLEL_LIMIT = 10;\n        const errors = [];\n        const updatedFiles = [];\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const processFile = async (file) => {\n            try {\n                await (options.public ? file.makePublic() : file.makePrivate(options));\n                updatedFiles.push(file);\n            }\n            catch (e) {\n                if (!options.force) {\n                    throw e;\n                }\n                errors.push(e);\n            }\n        };\n        this.getFiles(options)\n            .then(([files]) => {\n            const limit = pLimit(MAX_PARALLEL_LIMIT);\n            const promises = files.map(file => {\n                return limit(() => processFile(file));\n            });\n            return Promise.all(promises);\n        })\n            .then(() => callback(errors.length > 0 ? errors : null, updatedFiles), err => callback(err, updatedFiles));\n    }\n    getId() {\n        return this.id;\n    }\n    disableAutoRetryConditionallyIdempotent_(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    coreOpts, methodType) {\n        var _a, _b;\n        if (typeof coreOpts === 'object' &&\n            ((_b = (_a = coreOpts === null || coreOpts === void 0 ? void 0 : coreOpts.reqOpts) === null || _a === void 0 ? void 0 : _a.qs) === null || _b === void 0 ? void 0 : _b.ifMetagenerationMatch) === undefined &&\n            (methodType === AvailableServiceObjectMethods.setMetadata ||\n                methodType === AvailableServiceObjectMethods.delete) &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                storage_1.IdempotencyStrategy.RetryConditional) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        else if (this.storage.retryOptions.idempotencyStrategy ===\n            storage_1.IdempotencyStrategy.RetryNever) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n    }\n}\nexports.Bucket = Bucket;\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Bucket, 'getFiles');\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Bucket, {\n    exclude: ['request', 'file', 'notification'],\n});\n//# sourceMappingURL=bucket.js.map"]},"metadata":{},"sourceType":"script"}